/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIN1N2MessageTransferReqData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIN1N2MessageTransferReqData::OAIN1N2MessageTransferReqData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIN1N2MessageTransferReqData::OAIN1N2MessageTransferReqData() {
    this->initializeModel();
}

OAIN1N2MessageTransferReqData::~OAIN1N2MessageTransferReqData() {}

void OAIN1N2MessageTransferReqData::initializeModel() {

    m_n1_message_container_isSet = false;
    m_n1_message_container_isValid = false;

    m_n2_info_container_isSet = false;
    m_n2_info_container_isValid = false;

    m_mt_data_isSet = false;
    m_mt_data_isValid = false;

    m_skip_ind_isSet = false;
    m_skip_ind_isValid = false;

    m_last_msg_indication_isSet = false;
    m_last_msg_indication_isValid = false;

    m_pdu_session_id_isSet = false;
    m_pdu_session_id_isValid = false;

    m_lcs_correlation_id_isSet = false;
    m_lcs_correlation_id_isValid = false;

    m_ppi_isSet = false;
    m_ppi_isValid = false;

    m_arp_isSet = false;
    m_arp_isValid = false;

    m_r_5qi_isSet = false;
    m_r_5qi_isValid = false;

    m_n1n2_failure_txf_notif_uri_isSet = false;
    m_n1n2_failure_txf_notif_uri_isValid = false;

    m_smf_reallocation_ind_isSet = false;
    m_smf_reallocation_ind_isValid = false;

    m_area_of_validity_isSet = false;
    m_area_of_validity_isValid = false;

    m_supported_features_isSet = false;
    m_supported_features_isValid = false;

    m_old_guami_isSet = false;
    m_old_guami_isValid = false;

    m_ma_accepted_ind_isSet = false;
    m_ma_accepted_ind_isValid = false;

    m_ext_buf_support_isSet = false;
    m_ext_buf_support_isValid = false;

    m_target_access_isSet = false;
    m_target_access_isValid = false;
}

void OAIN1N2MessageTransferReqData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIN1N2MessageTransferReqData::fromJsonObject(QJsonObject json) {

    m_n1_message_container_isValid = ::OpenAPI::fromJsonValue(n1_message_container, json[QString("n1MessageContainer")]);
    m_n1_message_container_isSet = !json[QString("n1MessageContainer")].isNull() && m_n1_message_container_isValid;

    m_n2_info_container_isValid = ::OpenAPI::fromJsonValue(n2_info_container, json[QString("n2InfoContainer")]);
    m_n2_info_container_isSet = !json[QString("n2InfoContainer")].isNull() && m_n2_info_container_isValid;

    m_mt_data_isValid = ::OpenAPI::fromJsonValue(mt_data, json[QString("mtData")]);
    m_mt_data_isSet = !json[QString("mtData")].isNull() && m_mt_data_isValid;

    m_skip_ind_isValid = ::OpenAPI::fromJsonValue(skip_ind, json[QString("skipInd")]);
    m_skip_ind_isSet = !json[QString("skipInd")].isNull() && m_skip_ind_isValid;

    m_last_msg_indication_isValid = ::OpenAPI::fromJsonValue(last_msg_indication, json[QString("lastMsgIndication")]);
    m_last_msg_indication_isSet = !json[QString("lastMsgIndication")].isNull() && m_last_msg_indication_isValid;

    m_pdu_session_id_isValid = ::OpenAPI::fromJsonValue(pdu_session_id, json[QString("pduSessionId")]);
    m_pdu_session_id_isSet = !json[QString("pduSessionId")].isNull() && m_pdu_session_id_isValid;

    m_lcs_correlation_id_isValid = ::OpenAPI::fromJsonValue(lcs_correlation_id, json[QString("lcsCorrelationId")]);
    m_lcs_correlation_id_isSet = !json[QString("lcsCorrelationId")].isNull() && m_lcs_correlation_id_isValid;

    m_ppi_isValid = ::OpenAPI::fromJsonValue(ppi, json[QString("ppi")]);
    m_ppi_isSet = !json[QString("ppi")].isNull() && m_ppi_isValid;

    m_arp_isValid = ::OpenAPI::fromJsonValue(arp, json[QString("arp")]);
    m_arp_isSet = !json[QString("arp")].isNull() && m_arp_isValid;

    m_r_5qi_isValid = ::OpenAPI::fromJsonValue(r_5qi, json[QString("5qi")]);
    m_r_5qi_isSet = !json[QString("5qi")].isNull() && m_r_5qi_isValid;

    m_n1n2_failure_txf_notif_uri_isValid = ::OpenAPI::fromJsonValue(n1n2_failure_txf_notif_uri, json[QString("n1n2FailureTxfNotifURI")]);
    m_n1n2_failure_txf_notif_uri_isSet = !json[QString("n1n2FailureTxfNotifURI")].isNull() && m_n1n2_failure_txf_notif_uri_isValid;

    m_smf_reallocation_ind_isValid = ::OpenAPI::fromJsonValue(smf_reallocation_ind, json[QString("smfReallocationInd")]);
    m_smf_reallocation_ind_isSet = !json[QString("smfReallocationInd")].isNull() && m_smf_reallocation_ind_isValid;

    m_area_of_validity_isValid = ::OpenAPI::fromJsonValue(area_of_validity, json[QString("areaOfValidity")]);
    m_area_of_validity_isSet = !json[QString("areaOfValidity")].isNull() && m_area_of_validity_isValid;

    m_supported_features_isValid = ::OpenAPI::fromJsonValue(supported_features, json[QString("supportedFeatures")]);
    m_supported_features_isSet = !json[QString("supportedFeatures")].isNull() && m_supported_features_isValid;

    m_old_guami_isValid = ::OpenAPI::fromJsonValue(old_guami, json[QString("oldGuami")]);
    m_old_guami_isSet = !json[QString("oldGuami")].isNull() && m_old_guami_isValid;

    m_ma_accepted_ind_isValid = ::OpenAPI::fromJsonValue(ma_accepted_ind, json[QString("maAcceptedInd")]);
    m_ma_accepted_ind_isSet = !json[QString("maAcceptedInd")].isNull() && m_ma_accepted_ind_isValid;

    m_ext_buf_support_isValid = ::OpenAPI::fromJsonValue(ext_buf_support, json[QString("extBufSupport")]);
    m_ext_buf_support_isSet = !json[QString("extBufSupport")].isNull() && m_ext_buf_support_isValid;

    m_target_access_isValid = ::OpenAPI::fromJsonValue(target_access, json[QString("targetAccess")]);
    m_target_access_isSet = !json[QString("targetAccess")].isNull() && m_target_access_isValid;
}

QString OAIN1N2MessageTransferReqData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIN1N2MessageTransferReqData::asJsonObject() const {
    QJsonObject obj;
    if (n1_message_container.isSet()) {
        obj.insert(QString("n1MessageContainer"), ::OpenAPI::toJsonValue(n1_message_container));
    }
    if (n2_info_container.isSet()) {
        obj.insert(QString("n2InfoContainer"), ::OpenAPI::toJsonValue(n2_info_container));
    }
    if (mt_data.isSet()) {
        obj.insert(QString("mtData"), ::OpenAPI::toJsonValue(mt_data));
    }
    if (m_skip_ind_isSet) {
        obj.insert(QString("skipInd"), ::OpenAPI::toJsonValue(skip_ind));
    }
    if (m_last_msg_indication_isSet) {
        obj.insert(QString("lastMsgIndication"), ::OpenAPI::toJsonValue(last_msg_indication));
    }
    if (m_pdu_session_id_isSet) {
        obj.insert(QString("pduSessionId"), ::OpenAPI::toJsonValue(pdu_session_id));
    }
    if (m_lcs_correlation_id_isSet) {
        obj.insert(QString("lcsCorrelationId"), ::OpenAPI::toJsonValue(lcs_correlation_id));
    }
    if (m_ppi_isSet) {
        obj.insert(QString("ppi"), ::OpenAPI::toJsonValue(ppi));
    }
    if (arp.isSet()) {
        obj.insert(QString("arp"), ::OpenAPI::toJsonValue(arp));
    }
    if (m_r_5qi_isSet) {
        obj.insert(QString("5qi"), ::OpenAPI::toJsonValue(r_5qi));
    }
    if (m_n1n2_failure_txf_notif_uri_isSet) {
        obj.insert(QString("n1n2FailureTxfNotifURI"), ::OpenAPI::toJsonValue(n1n2_failure_txf_notif_uri));
    }
    if (m_smf_reallocation_ind_isSet) {
        obj.insert(QString("smfReallocationInd"), ::OpenAPI::toJsonValue(smf_reallocation_ind));
    }
    if (area_of_validity.isSet()) {
        obj.insert(QString("areaOfValidity"), ::OpenAPI::toJsonValue(area_of_validity));
    }
    if (m_supported_features_isSet) {
        obj.insert(QString("supportedFeatures"), ::OpenAPI::toJsonValue(supported_features));
    }
    if (old_guami.isSet()) {
        obj.insert(QString("oldGuami"), ::OpenAPI::toJsonValue(old_guami));
    }
    if (m_ma_accepted_ind_isSet) {
        obj.insert(QString("maAcceptedInd"), ::OpenAPI::toJsonValue(ma_accepted_ind));
    }
    if (m_ext_buf_support_isSet) {
        obj.insert(QString("extBufSupport"), ::OpenAPI::toJsonValue(ext_buf_support));
    }
    if (target_access.isSet()) {
        obj.insert(QString("targetAccess"), ::OpenAPI::toJsonValue(target_access));
    }
    return obj;
}

OAIN1MessageContainer OAIN1N2MessageTransferReqData::getN1MessageContainer() const {
    return n1_message_container;
}
void OAIN1N2MessageTransferReqData::setN1MessageContainer(const OAIN1MessageContainer &n1_message_container) {
    this->n1_message_container = n1_message_container;
    this->m_n1_message_container_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_n1_message_container_Set() const{
    return m_n1_message_container_isSet;
}

bool OAIN1N2MessageTransferReqData::is_n1_message_container_Valid() const{
    return m_n1_message_container_isValid;
}

OAIN2InfoContainer OAIN1N2MessageTransferReqData::getN2InfoContainer() const {
    return n2_info_container;
}
void OAIN1N2MessageTransferReqData::setN2InfoContainer(const OAIN2InfoContainer &n2_info_container) {
    this->n2_info_container = n2_info_container;
    this->m_n2_info_container_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_n2_info_container_Set() const{
    return m_n2_info_container_isSet;
}

bool OAIN1N2MessageTransferReqData::is_n2_info_container_Valid() const{
    return m_n2_info_container_isValid;
}

OAIRefToBinaryData OAIN1N2MessageTransferReqData::getMtData() const {
    return mt_data;
}
void OAIN1N2MessageTransferReqData::setMtData(const OAIRefToBinaryData &mt_data) {
    this->mt_data = mt_data;
    this->m_mt_data_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_mt_data_Set() const{
    return m_mt_data_isSet;
}

bool OAIN1N2MessageTransferReqData::is_mt_data_Valid() const{
    return m_mt_data_isValid;
}

bool OAIN1N2MessageTransferReqData::isSkipInd() const {
    return skip_ind;
}
void OAIN1N2MessageTransferReqData::setSkipInd(const bool &skip_ind) {
    this->skip_ind = skip_ind;
    this->m_skip_ind_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_skip_ind_Set() const{
    return m_skip_ind_isSet;
}

bool OAIN1N2MessageTransferReqData::is_skip_ind_Valid() const{
    return m_skip_ind_isValid;
}

bool OAIN1N2MessageTransferReqData::isLastMsgIndication() const {
    return last_msg_indication;
}
void OAIN1N2MessageTransferReqData::setLastMsgIndication(const bool &last_msg_indication) {
    this->last_msg_indication = last_msg_indication;
    this->m_last_msg_indication_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_last_msg_indication_Set() const{
    return m_last_msg_indication_isSet;
}

bool OAIN1N2MessageTransferReqData::is_last_msg_indication_Valid() const{
    return m_last_msg_indication_isValid;
}

qint32 OAIN1N2MessageTransferReqData::getPduSessionId() const {
    return pdu_session_id;
}
void OAIN1N2MessageTransferReqData::setPduSessionId(const qint32 &pdu_session_id) {
    this->pdu_session_id = pdu_session_id;
    this->m_pdu_session_id_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_pdu_session_id_Set() const{
    return m_pdu_session_id_isSet;
}

bool OAIN1N2MessageTransferReqData::is_pdu_session_id_Valid() const{
    return m_pdu_session_id_isValid;
}

QString OAIN1N2MessageTransferReqData::getLcsCorrelationId() const {
    return lcs_correlation_id;
}
void OAIN1N2MessageTransferReqData::setLcsCorrelationId(const QString &lcs_correlation_id) {
    this->lcs_correlation_id = lcs_correlation_id;
    this->m_lcs_correlation_id_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_lcs_correlation_id_Set() const{
    return m_lcs_correlation_id_isSet;
}

bool OAIN1N2MessageTransferReqData::is_lcs_correlation_id_Valid() const{
    return m_lcs_correlation_id_isValid;
}

qint32 OAIN1N2MessageTransferReqData::getPpi() const {
    return ppi;
}
void OAIN1N2MessageTransferReqData::setPpi(const qint32 &ppi) {
    this->ppi = ppi;
    this->m_ppi_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_ppi_Set() const{
    return m_ppi_isSet;
}

bool OAIN1N2MessageTransferReqData::is_ppi_Valid() const{
    return m_ppi_isValid;
}

OAIArp OAIN1N2MessageTransferReqData::getArp() const {
    return arp;
}
void OAIN1N2MessageTransferReqData::setArp(const OAIArp &arp) {
    this->arp = arp;
    this->m_arp_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_arp_Set() const{
    return m_arp_isSet;
}

bool OAIN1N2MessageTransferReqData::is_arp_Valid() const{
    return m_arp_isValid;
}

qint32 OAIN1N2MessageTransferReqData::getR5qi() const {
    return r_5qi;
}
void OAIN1N2MessageTransferReqData::setR5qi(const qint32 &r_5qi) {
    this->r_5qi = r_5qi;
    this->m_r_5qi_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_r_5qi_Set() const{
    return m_r_5qi_isSet;
}

bool OAIN1N2MessageTransferReqData::is_r_5qi_Valid() const{
    return m_r_5qi_isValid;
}

QString OAIN1N2MessageTransferReqData::getN1n2FailureTxfNotifUri() const {
    return n1n2_failure_txf_notif_uri;
}
void OAIN1N2MessageTransferReqData::setN1n2FailureTxfNotifUri(const QString &n1n2_failure_txf_notif_uri) {
    this->n1n2_failure_txf_notif_uri = n1n2_failure_txf_notif_uri;
    this->m_n1n2_failure_txf_notif_uri_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_n1n2_failure_txf_notif_uri_Set() const{
    return m_n1n2_failure_txf_notif_uri_isSet;
}

bool OAIN1N2MessageTransferReqData::is_n1n2_failure_txf_notif_uri_Valid() const{
    return m_n1n2_failure_txf_notif_uri_isValid;
}

bool OAIN1N2MessageTransferReqData::isSmfReallocationInd() const {
    return smf_reallocation_ind;
}
void OAIN1N2MessageTransferReqData::setSmfReallocationInd(const bool &smf_reallocation_ind) {
    this->smf_reallocation_ind = smf_reallocation_ind;
    this->m_smf_reallocation_ind_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_smf_reallocation_ind_Set() const{
    return m_smf_reallocation_ind_isSet;
}

bool OAIN1N2MessageTransferReqData::is_smf_reallocation_ind_Valid() const{
    return m_smf_reallocation_ind_isValid;
}

OAIAreaOfValidity OAIN1N2MessageTransferReqData::getAreaOfValidity() const {
    return area_of_validity;
}
void OAIN1N2MessageTransferReqData::setAreaOfValidity(const OAIAreaOfValidity &area_of_validity) {
    this->area_of_validity = area_of_validity;
    this->m_area_of_validity_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_area_of_validity_Set() const{
    return m_area_of_validity_isSet;
}

bool OAIN1N2MessageTransferReqData::is_area_of_validity_Valid() const{
    return m_area_of_validity_isValid;
}

QString OAIN1N2MessageTransferReqData::getSupportedFeatures() const {
    return supported_features;
}
void OAIN1N2MessageTransferReqData::setSupportedFeatures(const QString &supported_features) {
    this->supported_features = supported_features;
    this->m_supported_features_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_supported_features_Set() const{
    return m_supported_features_isSet;
}

bool OAIN1N2MessageTransferReqData::is_supported_features_Valid() const{
    return m_supported_features_isValid;
}

OAIGuami OAIN1N2MessageTransferReqData::getOldGuami() const {
    return old_guami;
}
void OAIN1N2MessageTransferReqData::setOldGuami(const OAIGuami &old_guami) {
    this->old_guami = old_guami;
    this->m_old_guami_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_old_guami_Set() const{
    return m_old_guami_isSet;
}

bool OAIN1N2MessageTransferReqData::is_old_guami_Valid() const{
    return m_old_guami_isValid;
}

bool OAIN1N2MessageTransferReqData::isMaAcceptedInd() const {
    return ma_accepted_ind;
}
void OAIN1N2MessageTransferReqData::setMaAcceptedInd(const bool &ma_accepted_ind) {
    this->ma_accepted_ind = ma_accepted_ind;
    this->m_ma_accepted_ind_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_ma_accepted_ind_Set() const{
    return m_ma_accepted_ind_isSet;
}

bool OAIN1N2MessageTransferReqData::is_ma_accepted_ind_Valid() const{
    return m_ma_accepted_ind_isValid;
}

bool OAIN1N2MessageTransferReqData::isExtBufSupport() const {
    return ext_buf_support;
}
void OAIN1N2MessageTransferReqData::setExtBufSupport(const bool &ext_buf_support) {
    this->ext_buf_support = ext_buf_support;
    this->m_ext_buf_support_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_ext_buf_support_Set() const{
    return m_ext_buf_support_isSet;
}

bool OAIN1N2MessageTransferReqData::is_ext_buf_support_Valid() const{
    return m_ext_buf_support_isValid;
}

OAIAccessType OAIN1N2MessageTransferReqData::getTargetAccess() const {
    return target_access;
}
void OAIN1N2MessageTransferReqData::setTargetAccess(const OAIAccessType &target_access) {
    this->target_access = target_access;
    this->m_target_access_isSet = true;
}

bool OAIN1N2MessageTransferReqData::is_target_access_Set() const{
    return m_target_access_isSet;
}

bool OAIN1N2MessageTransferReqData::is_target_access_Valid() const{
    return m_target_access_isValid;
}

bool OAIN1N2MessageTransferReqData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (n1_message_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (n2_info_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (mt_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_msg_indication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdu_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lcs_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ppi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (arp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_5qi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_n1n2_failure_txf_notif_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smf_reallocation_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (area_of_validity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (old_guami.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ma_accepted_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_buf_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (target_access.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIN1N2MessageTransferReqData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
