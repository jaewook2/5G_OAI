/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUeN1N2InfoSubscriptionCreateData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUeN1N2InfoSubscriptionCreateData::OAIUeN1N2InfoSubscriptionCreateData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUeN1N2InfoSubscriptionCreateData::OAIUeN1N2InfoSubscriptionCreateData() {
    this->initializeModel();
}

OAIUeN1N2InfoSubscriptionCreateData::~OAIUeN1N2InfoSubscriptionCreateData() {}

void OAIUeN1N2InfoSubscriptionCreateData::initializeModel() {

    m_n2_information_class_isSet = false;
    m_n2_information_class_isValid = false;

    m_n2_notify_callback_uri_isSet = false;
    m_n2_notify_callback_uri_isValid = false;

    m_n1_message_class_isSet = false;
    m_n1_message_class_isValid = false;

    m_n1_notify_callback_uri_isSet = false;
    m_n1_notify_callback_uri_isValid = false;

    m_nf_id_isSet = false;
    m_nf_id_isValid = false;

    m_supported_features_isSet = false;
    m_supported_features_isValid = false;

    m_old_guami_isSet = false;
    m_old_guami_isValid = false;
}

void OAIUeN1N2InfoSubscriptionCreateData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUeN1N2InfoSubscriptionCreateData::fromJsonObject(QJsonObject json) {

    m_n2_information_class_isValid = ::OpenAPI::fromJsonValue(n2_information_class, json[QString("n2InformationClass")]);
    m_n2_information_class_isSet = !json[QString("n2InformationClass")].isNull() && m_n2_information_class_isValid;

    m_n2_notify_callback_uri_isValid = ::OpenAPI::fromJsonValue(n2_notify_callback_uri, json[QString("n2NotifyCallbackUri")]);
    m_n2_notify_callback_uri_isSet = !json[QString("n2NotifyCallbackUri")].isNull() && m_n2_notify_callback_uri_isValid;

    m_n1_message_class_isValid = ::OpenAPI::fromJsonValue(n1_message_class, json[QString("n1MessageClass")]);
    m_n1_message_class_isSet = !json[QString("n1MessageClass")].isNull() && m_n1_message_class_isValid;

    m_n1_notify_callback_uri_isValid = ::OpenAPI::fromJsonValue(n1_notify_callback_uri, json[QString("n1NotifyCallbackUri")]);
    m_n1_notify_callback_uri_isSet = !json[QString("n1NotifyCallbackUri")].isNull() && m_n1_notify_callback_uri_isValid;

    m_nf_id_isValid = ::OpenAPI::fromJsonValue(nf_id, json[QString("nfId")]);
    m_nf_id_isSet = !json[QString("nfId")].isNull() && m_nf_id_isValid;

    m_supported_features_isValid = ::OpenAPI::fromJsonValue(supported_features, json[QString("supportedFeatures")]);
    m_supported_features_isSet = !json[QString("supportedFeatures")].isNull() && m_supported_features_isValid;

    m_old_guami_isValid = ::OpenAPI::fromJsonValue(old_guami, json[QString("oldGuami")]);
    m_old_guami_isSet = !json[QString("oldGuami")].isNull() && m_old_guami_isValid;
}

QString OAIUeN1N2InfoSubscriptionCreateData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUeN1N2InfoSubscriptionCreateData::asJsonObject() const {
    QJsonObject obj;
    if (n2_information_class.isSet()) {
        obj.insert(QString("n2InformationClass"), ::OpenAPI::toJsonValue(n2_information_class));
    }
    if (m_n2_notify_callback_uri_isSet) {
        obj.insert(QString("n2NotifyCallbackUri"), ::OpenAPI::toJsonValue(n2_notify_callback_uri));
    }
    if (n1_message_class.isSet()) {
        obj.insert(QString("n1MessageClass"), ::OpenAPI::toJsonValue(n1_message_class));
    }
    if (m_n1_notify_callback_uri_isSet) {
        obj.insert(QString("n1NotifyCallbackUri"), ::OpenAPI::toJsonValue(n1_notify_callback_uri));
    }
    if (m_nf_id_isSet) {
        obj.insert(QString("nfId"), ::OpenAPI::toJsonValue(nf_id));
    }
    if (m_supported_features_isSet) {
        obj.insert(QString("supportedFeatures"), ::OpenAPI::toJsonValue(supported_features));
    }
    if (old_guami.isSet()) {
        obj.insert(QString("oldGuami"), ::OpenAPI::toJsonValue(old_guami));
    }
    return obj;
}

OAIN2InformationClass OAIUeN1N2InfoSubscriptionCreateData::getN2InformationClass() const {
    return n2_information_class;
}
void OAIUeN1N2InfoSubscriptionCreateData::setN2InformationClass(const OAIN2InformationClass &n2_information_class) {
    this->n2_information_class = n2_information_class;
    this->m_n2_information_class_isSet = true;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_n2_information_class_Set() const{
    return m_n2_information_class_isSet;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_n2_information_class_Valid() const{
    return m_n2_information_class_isValid;
}

QString OAIUeN1N2InfoSubscriptionCreateData::getN2NotifyCallbackUri() const {
    return n2_notify_callback_uri;
}
void OAIUeN1N2InfoSubscriptionCreateData::setN2NotifyCallbackUri(const QString &n2_notify_callback_uri) {
    this->n2_notify_callback_uri = n2_notify_callback_uri;
    this->m_n2_notify_callback_uri_isSet = true;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_n2_notify_callback_uri_Set() const{
    return m_n2_notify_callback_uri_isSet;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_n2_notify_callback_uri_Valid() const{
    return m_n2_notify_callback_uri_isValid;
}

OAIN1MessageClass OAIUeN1N2InfoSubscriptionCreateData::getN1MessageClass() const {
    return n1_message_class;
}
void OAIUeN1N2InfoSubscriptionCreateData::setN1MessageClass(const OAIN1MessageClass &n1_message_class) {
    this->n1_message_class = n1_message_class;
    this->m_n1_message_class_isSet = true;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_n1_message_class_Set() const{
    return m_n1_message_class_isSet;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_n1_message_class_Valid() const{
    return m_n1_message_class_isValid;
}

QString OAIUeN1N2InfoSubscriptionCreateData::getN1NotifyCallbackUri() const {
    return n1_notify_callback_uri;
}
void OAIUeN1N2InfoSubscriptionCreateData::setN1NotifyCallbackUri(const QString &n1_notify_callback_uri) {
    this->n1_notify_callback_uri = n1_notify_callback_uri;
    this->m_n1_notify_callback_uri_isSet = true;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_n1_notify_callback_uri_Set() const{
    return m_n1_notify_callback_uri_isSet;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_n1_notify_callback_uri_Valid() const{
    return m_n1_notify_callback_uri_isValid;
}

QString OAIUeN1N2InfoSubscriptionCreateData::getNfId() const {
    return nf_id;
}
void OAIUeN1N2InfoSubscriptionCreateData::setNfId(const QString &nf_id) {
    this->nf_id = nf_id;
    this->m_nf_id_isSet = true;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_nf_id_Set() const{
    return m_nf_id_isSet;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_nf_id_Valid() const{
    return m_nf_id_isValid;
}

QString OAIUeN1N2InfoSubscriptionCreateData::getSupportedFeatures() const {
    return supported_features;
}
void OAIUeN1N2InfoSubscriptionCreateData::setSupportedFeatures(const QString &supported_features) {
    this->supported_features = supported_features;
    this->m_supported_features_isSet = true;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_supported_features_Set() const{
    return m_supported_features_isSet;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_supported_features_Valid() const{
    return m_supported_features_isValid;
}

OAIGuami OAIUeN1N2InfoSubscriptionCreateData::getOldGuami() const {
    return old_guami;
}
void OAIUeN1N2InfoSubscriptionCreateData::setOldGuami(const OAIGuami &old_guami) {
    this->old_guami = old_guami;
    this->m_old_guami_isSet = true;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_old_guami_Set() const{
    return m_old_guami_isSet;
}

bool OAIUeN1N2InfoSubscriptionCreateData::is_old_guami_Valid() const{
    return m_old_guami_isValid;
}

bool OAIUeN1N2InfoSubscriptionCreateData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (n2_information_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_n2_notify_callback_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (n1_message_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_n1_notify_callback_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (old_guami.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUeN1N2InfoSubscriptionCreateData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
