/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUeContextRelocateData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUeContextRelocateData::OAIUeContextRelocateData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUeContextRelocateData::OAIUeContextRelocateData() {
    this->initializeModel();
}

OAIUeContextRelocateData::~OAIUeContextRelocateData() {}

void OAIUeContextRelocateData::initializeModel() {

    m_ue_context_isSet = false;
    m_ue_context_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_source_to_target_data_isSet = false;
    m_source_to_target_data_isValid = false;

    m_forward_relocation_request_isSet = false;
    m_forward_relocation_request_isValid = false;

    m_pdu_session_list_isSet = false;
    m_pdu_session_list_isValid = false;

    m_ue_radio_capability_isSet = false;
    m_ue_radio_capability_isValid = false;

    m_ngap_cause_isSet = false;
    m_ngap_cause_isValid = false;

    m_supported_features_isSet = false;
    m_supported_features_isValid = false;
}

void OAIUeContextRelocateData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUeContextRelocateData::fromJsonObject(QJsonObject json) {

    m_ue_context_isValid = ::OpenAPI::fromJsonValue(ue_context, json[QString("ueContext")]);
    m_ue_context_isSet = !json[QString("ueContext")].isNull() && m_ue_context_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;

    m_source_to_target_data_isValid = ::OpenAPI::fromJsonValue(source_to_target_data, json[QString("sourceToTargetData")]);
    m_source_to_target_data_isSet = !json[QString("sourceToTargetData")].isNull() && m_source_to_target_data_isValid;

    m_forward_relocation_request_isValid = ::OpenAPI::fromJsonValue(forward_relocation_request, json[QString("forwardRelocationRequest")]);
    m_forward_relocation_request_isSet = !json[QString("forwardRelocationRequest")].isNull() && m_forward_relocation_request_isValid;

    m_pdu_session_list_isValid = ::OpenAPI::fromJsonValue(pdu_session_list, json[QString("pduSessionList")]);
    m_pdu_session_list_isSet = !json[QString("pduSessionList")].isNull() && m_pdu_session_list_isValid;

    m_ue_radio_capability_isValid = ::OpenAPI::fromJsonValue(ue_radio_capability, json[QString("ueRadioCapability")]);
    m_ue_radio_capability_isSet = !json[QString("ueRadioCapability")].isNull() && m_ue_radio_capability_isValid;

    m_ngap_cause_isValid = ::OpenAPI::fromJsonValue(ngap_cause, json[QString("ngapCause")]);
    m_ngap_cause_isSet = !json[QString("ngapCause")].isNull() && m_ngap_cause_isValid;

    m_supported_features_isValid = ::OpenAPI::fromJsonValue(supported_features, json[QString("supportedFeatures")]);
    m_supported_features_isSet = !json[QString("supportedFeatures")].isNull() && m_supported_features_isValid;
}

QString OAIUeContextRelocateData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUeContextRelocateData::asJsonObject() const {
    QJsonObject obj;
    if (ue_context.isSet()) {
        obj.insert(QString("ueContext"), ::OpenAPI::toJsonValue(ue_context));
    }
    if (target_id.isSet()) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(target_id));
    }
    if (source_to_target_data.isSet()) {
        obj.insert(QString("sourceToTargetData"), ::OpenAPI::toJsonValue(source_to_target_data));
    }
    if (forward_relocation_request.isSet()) {
        obj.insert(QString("forwardRelocationRequest"), ::OpenAPI::toJsonValue(forward_relocation_request));
    }
    if (pdu_session_list.size() > 0) {
        obj.insert(QString("pduSessionList"), ::OpenAPI::toJsonValue(pdu_session_list));
    }
    if (ue_radio_capability.isSet()) {
        obj.insert(QString("ueRadioCapability"), ::OpenAPI::toJsonValue(ue_radio_capability));
    }
    if (ngap_cause.isSet()) {
        obj.insert(QString("ngapCause"), ::OpenAPI::toJsonValue(ngap_cause));
    }
    if (m_supported_features_isSet) {
        obj.insert(QString("supportedFeatures"), ::OpenAPI::toJsonValue(supported_features));
    }
    return obj;
}

OAIUeContext OAIUeContextRelocateData::getUeContext() const {
    return ue_context;
}
void OAIUeContextRelocateData::setUeContext(const OAIUeContext &ue_context) {
    this->ue_context = ue_context;
    this->m_ue_context_isSet = true;
}

bool OAIUeContextRelocateData::is_ue_context_Set() const{
    return m_ue_context_isSet;
}

bool OAIUeContextRelocateData::is_ue_context_Valid() const{
    return m_ue_context_isValid;
}

OAINgRanTargetId OAIUeContextRelocateData::getTargetId() const {
    return target_id;
}
void OAIUeContextRelocateData::setTargetId(const OAINgRanTargetId &target_id) {
    this->target_id = target_id;
    this->m_target_id_isSet = true;
}

bool OAIUeContextRelocateData::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIUeContextRelocateData::is_target_id_Valid() const{
    return m_target_id_isValid;
}

OAIN2InfoContent OAIUeContextRelocateData::getSourceToTargetData() const {
    return source_to_target_data;
}
void OAIUeContextRelocateData::setSourceToTargetData(const OAIN2InfoContent &source_to_target_data) {
    this->source_to_target_data = source_to_target_data;
    this->m_source_to_target_data_isSet = true;
}

bool OAIUeContextRelocateData::is_source_to_target_data_Set() const{
    return m_source_to_target_data_isSet;
}

bool OAIUeContextRelocateData::is_source_to_target_data_Valid() const{
    return m_source_to_target_data_isValid;
}

OAIRefToBinaryData OAIUeContextRelocateData::getForwardRelocationRequest() const {
    return forward_relocation_request;
}
void OAIUeContextRelocateData::setForwardRelocationRequest(const OAIRefToBinaryData &forward_relocation_request) {
    this->forward_relocation_request = forward_relocation_request;
    this->m_forward_relocation_request_isSet = true;
}

bool OAIUeContextRelocateData::is_forward_relocation_request_Set() const{
    return m_forward_relocation_request_isSet;
}

bool OAIUeContextRelocateData::is_forward_relocation_request_Valid() const{
    return m_forward_relocation_request_isValid;
}

QList<OAIN2SmInformation> OAIUeContextRelocateData::getPduSessionList() const {
    return pdu_session_list;
}
void OAIUeContextRelocateData::setPduSessionList(const QList<OAIN2SmInformation> &pdu_session_list) {
    this->pdu_session_list = pdu_session_list;
    this->m_pdu_session_list_isSet = true;
}

bool OAIUeContextRelocateData::is_pdu_session_list_Set() const{
    return m_pdu_session_list_isSet;
}

bool OAIUeContextRelocateData::is_pdu_session_list_Valid() const{
    return m_pdu_session_list_isValid;
}

OAIN2InfoContent OAIUeContextRelocateData::getUeRadioCapability() const {
    return ue_radio_capability;
}
void OAIUeContextRelocateData::setUeRadioCapability(const OAIN2InfoContent &ue_radio_capability) {
    this->ue_radio_capability = ue_radio_capability;
    this->m_ue_radio_capability_isSet = true;
}

bool OAIUeContextRelocateData::is_ue_radio_capability_Set() const{
    return m_ue_radio_capability_isSet;
}

bool OAIUeContextRelocateData::is_ue_radio_capability_Valid() const{
    return m_ue_radio_capability_isValid;
}

OAINgApCause OAIUeContextRelocateData::getNgapCause() const {
    return ngap_cause;
}
void OAIUeContextRelocateData::setNgapCause(const OAINgApCause &ngap_cause) {
    this->ngap_cause = ngap_cause;
    this->m_ngap_cause_isSet = true;
}

bool OAIUeContextRelocateData::is_ngap_cause_Set() const{
    return m_ngap_cause_isSet;
}

bool OAIUeContextRelocateData::is_ngap_cause_Valid() const{
    return m_ngap_cause_isValid;
}

QString OAIUeContextRelocateData::getSupportedFeatures() const {
    return supported_features;
}
void OAIUeContextRelocateData::setSupportedFeatures(const QString &supported_features) {
    this->supported_features = supported_features;
    this->m_supported_features_isSet = true;
}

bool OAIUeContextRelocateData::is_supported_features_Set() const{
    return m_supported_features_isSet;
}

bool OAIUeContextRelocateData::is_supported_features_Valid() const{
    return m_supported_features_isValid;
}

bool OAIUeContextRelocateData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (ue_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (target_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (source_to_target_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (forward_relocation_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (pdu_session_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (ue_radio_capability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (ngap_cause.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_features_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUeContextRelocateData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ue_context_isValid && m_target_id_isValid && m_source_to_target_data_isValid && m_forward_relocation_request_isValid && true;
}

} // namespace OpenAPI
