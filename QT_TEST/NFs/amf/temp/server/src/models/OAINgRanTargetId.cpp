/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINgRanTargetId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINgRanTargetId::OAINgRanTargetId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINgRanTargetId::OAINgRanTargetId() {
    this->initializeModel();
}

OAINgRanTargetId::~OAINgRanTargetId() {}

void OAINgRanTargetId::initializeModel() {

    m_ran_node_id_isSet = false;
    m_ran_node_id_isValid = false;

    m_tai_isSet = false;
    m_tai_isValid = false;
}

void OAINgRanTargetId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINgRanTargetId::fromJsonObject(QJsonObject json) {

    m_ran_node_id_isValid = ::OpenAPI::fromJsonValue(ran_node_id, json[QString("ranNodeId")]);
    m_ran_node_id_isSet = !json[QString("ranNodeId")].isNull() && m_ran_node_id_isValid;

    m_tai_isValid = ::OpenAPI::fromJsonValue(tai, json[QString("tai")]);
    m_tai_isSet = !json[QString("tai")].isNull() && m_tai_isValid;
}

QString OAINgRanTargetId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINgRanTargetId::asJsonObject() const {
    QJsonObject obj;
    if (ran_node_id.isSet()) {
        obj.insert(QString("ranNodeId"), ::OpenAPI::toJsonValue(ran_node_id));
    }
    if (tai.isSet()) {
        obj.insert(QString("tai"), ::OpenAPI::toJsonValue(tai));
    }
    return obj;
}

OAIGlobalRanNodeId OAINgRanTargetId::getRanNodeId() const {
    return ran_node_id;
}
void OAINgRanTargetId::setRanNodeId(const OAIGlobalRanNodeId &ran_node_id) {
    this->ran_node_id = ran_node_id;
    this->m_ran_node_id_isSet = true;
}

bool OAINgRanTargetId::is_ran_node_id_Set() const{
    return m_ran_node_id_isSet;
}

bool OAINgRanTargetId::is_ran_node_id_Valid() const{
    return m_ran_node_id_isValid;
}

OAITai OAINgRanTargetId::getTai() const {
    return tai;
}
void OAINgRanTargetId::setTai(const OAITai &tai) {
    this->tai = tai;
    this->m_tai_isSet = true;
}

bool OAINgRanTargetId::is_tai_Set() const{
    return m_tai_isSet;
}

bool OAINgRanTargetId::is_tai_Valid() const{
    return m_tai_isValid;
}

bool OAINgRanTargetId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (ran_node_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (tai.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINgRanTargetId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ran_node_id_isValid && m_tai_isValid && true;
}

} // namespace OpenAPI
