/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPwsInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPwsInformation::OAIPwsInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPwsInformation::OAIPwsInformation() {
    this->initializeModel();
}

OAIPwsInformation::~OAIPwsInformation() {}

void OAIPwsInformation::initializeModel() {

    m_message_identifier_isSet = false;
    m_message_identifier_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_pws_container_isSet = false;
    m_pws_container_isValid = false;

    m_bc_empty_area_list_isSet = false;
    m_bc_empty_area_list_isValid = false;

    m_send_ran_response_isSet = false;
    m_send_ran_response_isValid = false;

    m_omc_id_isSet = false;
    m_omc_id_isValid = false;
}

void OAIPwsInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPwsInformation::fromJsonObject(QJsonObject json) {

    m_message_identifier_isValid = ::OpenAPI::fromJsonValue(message_identifier, json[QString("messageIdentifier")]);
    m_message_identifier_isSet = !json[QString("messageIdentifier")].isNull() && m_message_identifier_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_pws_container_isValid = ::OpenAPI::fromJsonValue(pws_container, json[QString("pwsContainer")]);
    m_pws_container_isSet = !json[QString("pwsContainer")].isNull() && m_pws_container_isValid;

    m_bc_empty_area_list_isValid = ::OpenAPI::fromJsonValue(bc_empty_area_list, json[QString("bcEmptyAreaList")]);
    m_bc_empty_area_list_isSet = !json[QString("bcEmptyAreaList")].isNull() && m_bc_empty_area_list_isValid;

    m_send_ran_response_isValid = ::OpenAPI::fromJsonValue(send_ran_response, json[QString("sendRanResponse")]);
    m_send_ran_response_isSet = !json[QString("sendRanResponse")].isNull() && m_send_ran_response_isValid;

    m_omc_id_isValid = ::OpenAPI::fromJsonValue(omc_id, json[QString("omcId")]);
    m_omc_id_isSet = !json[QString("omcId")].isNull() && m_omc_id_isValid;
}

QString OAIPwsInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPwsInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_message_identifier_isSet) {
        obj.insert(QString("messageIdentifier"), ::OpenAPI::toJsonValue(message_identifier));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(serial_number));
    }
    if (pws_container.isSet()) {
        obj.insert(QString("pwsContainer"), ::OpenAPI::toJsonValue(pws_container));
    }
    if (bc_empty_area_list.size() > 0) {
        obj.insert(QString("bcEmptyAreaList"), ::OpenAPI::toJsonValue(bc_empty_area_list));
    }
    if (m_send_ran_response_isSet) {
        obj.insert(QString("sendRanResponse"), ::OpenAPI::toJsonValue(send_ran_response));
    }
    if (m_omc_id_isSet) {
        obj.insert(QString("omcId"), ::OpenAPI::toJsonValue(omc_id));
    }
    return obj;
}

qint32 OAIPwsInformation::getMessageIdentifier() const {
    return message_identifier;
}
void OAIPwsInformation::setMessageIdentifier(const qint32 &message_identifier) {
    this->message_identifier = message_identifier;
    this->m_message_identifier_isSet = true;
}

bool OAIPwsInformation::is_message_identifier_Set() const{
    return m_message_identifier_isSet;
}

bool OAIPwsInformation::is_message_identifier_Valid() const{
    return m_message_identifier_isValid;
}

qint32 OAIPwsInformation::getSerialNumber() const {
    return serial_number;
}
void OAIPwsInformation::setSerialNumber(const qint32 &serial_number) {
    this->serial_number = serial_number;
    this->m_serial_number_isSet = true;
}

bool OAIPwsInformation::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIPwsInformation::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

OAIN2InfoContent OAIPwsInformation::getPwsContainer() const {
    return pws_container;
}
void OAIPwsInformation::setPwsContainer(const OAIN2InfoContent &pws_container) {
    this->pws_container = pws_container;
    this->m_pws_container_isSet = true;
}

bool OAIPwsInformation::is_pws_container_Set() const{
    return m_pws_container_isSet;
}

bool OAIPwsInformation::is_pws_container_Valid() const{
    return m_pws_container_isValid;
}

QList<OAIGlobalRanNodeId> OAIPwsInformation::getBcEmptyAreaList() const {
    return bc_empty_area_list;
}
void OAIPwsInformation::setBcEmptyAreaList(const QList<OAIGlobalRanNodeId> &bc_empty_area_list) {
    this->bc_empty_area_list = bc_empty_area_list;
    this->m_bc_empty_area_list_isSet = true;
}

bool OAIPwsInformation::is_bc_empty_area_list_Set() const{
    return m_bc_empty_area_list_isSet;
}

bool OAIPwsInformation::is_bc_empty_area_list_Valid() const{
    return m_bc_empty_area_list_isValid;
}

bool OAIPwsInformation::isSendRanResponse() const {
    return send_ran_response;
}
void OAIPwsInformation::setSendRanResponse(const bool &send_ran_response) {
    this->send_ran_response = send_ran_response;
    this->m_send_ran_response_isSet = true;
}

bool OAIPwsInformation::is_send_ran_response_Set() const{
    return m_send_ran_response_isSet;
}

bool OAIPwsInformation::is_send_ran_response_Valid() const{
    return m_send_ran_response_isValid;
}

QString OAIPwsInformation::getOmcId() const {
    return omc_id;
}
void OAIPwsInformation::setOmcId(const QString &omc_id) {
    this->omc_id = omc_id;
    this->m_omc_id_isSet = true;
}

bool OAIPwsInformation::is_omc_id_Set() const{
    return m_omc_id_isSet;
}

bool OAIPwsInformation::is_omc_id_Valid() const{
    return m_omc_id_isValid;
}

bool OAIPwsInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (pws_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (bc_empty_area_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_ran_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_omc_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPwsInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_identifier_isValid && m_serial_number_isValid && m_pws_container_isValid && true;
}

} // namespace OpenAPI
