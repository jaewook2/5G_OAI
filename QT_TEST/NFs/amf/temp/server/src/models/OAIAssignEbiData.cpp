/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignEbiData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignEbiData::OAIAssignEbiData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignEbiData::OAIAssignEbiData() {
    this->initializeModel();
}

OAIAssignEbiData::~OAIAssignEbiData() {}

void OAIAssignEbiData::initializeModel() {

    m_pdu_session_id_isSet = false;
    m_pdu_session_id_isValid = false;

    m_arp_list_isSet = false;
    m_arp_list_isValid = false;

    m_released_ebi_list_isSet = false;
    m_released_ebi_list_isValid = false;

    m_old_guami_isSet = false;
    m_old_guami_isValid = false;
}

void OAIAssignEbiData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignEbiData::fromJsonObject(QJsonObject json) {

    m_pdu_session_id_isValid = ::OpenAPI::fromJsonValue(pdu_session_id, json[QString("pduSessionId")]);
    m_pdu_session_id_isSet = !json[QString("pduSessionId")].isNull() && m_pdu_session_id_isValid;

    m_arp_list_isValid = ::OpenAPI::fromJsonValue(arp_list, json[QString("arpList")]);
    m_arp_list_isSet = !json[QString("arpList")].isNull() && m_arp_list_isValid;

    m_released_ebi_list_isValid = ::OpenAPI::fromJsonValue(released_ebi_list, json[QString("releasedEbiList")]);
    m_released_ebi_list_isSet = !json[QString("releasedEbiList")].isNull() && m_released_ebi_list_isValid;

    m_old_guami_isValid = ::OpenAPI::fromJsonValue(old_guami, json[QString("oldGuami")]);
    m_old_guami_isSet = !json[QString("oldGuami")].isNull() && m_old_guami_isValid;
}

QString OAIAssignEbiData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignEbiData::asJsonObject() const {
    QJsonObject obj;
    if (m_pdu_session_id_isSet) {
        obj.insert(QString("pduSessionId"), ::OpenAPI::toJsonValue(pdu_session_id));
    }
    if (arp_list.size() > 0) {
        obj.insert(QString("arpList"), ::OpenAPI::toJsonValue(arp_list));
    }
    if (released_ebi_list.size() > 0) {
        obj.insert(QString("releasedEbiList"), ::OpenAPI::toJsonValue(released_ebi_list));
    }
    if (old_guami.isSet()) {
        obj.insert(QString("oldGuami"), ::OpenAPI::toJsonValue(old_guami));
    }
    return obj;
}

qint32 OAIAssignEbiData::getPduSessionId() const {
    return pdu_session_id;
}
void OAIAssignEbiData::setPduSessionId(const qint32 &pdu_session_id) {
    this->pdu_session_id = pdu_session_id;
    this->m_pdu_session_id_isSet = true;
}

bool OAIAssignEbiData::is_pdu_session_id_Set() const{
    return m_pdu_session_id_isSet;
}

bool OAIAssignEbiData::is_pdu_session_id_Valid() const{
    return m_pdu_session_id_isValid;
}

QList<OAIArp> OAIAssignEbiData::getArpList() const {
    return arp_list;
}
void OAIAssignEbiData::setArpList(const QList<OAIArp> &arp_list) {
    this->arp_list = arp_list;
    this->m_arp_list_isSet = true;
}

bool OAIAssignEbiData::is_arp_list_Set() const{
    return m_arp_list_isSet;
}

bool OAIAssignEbiData::is_arp_list_Valid() const{
    return m_arp_list_isValid;
}

QList<qint32> OAIAssignEbiData::getReleasedEbiList() const {
    return released_ebi_list;
}
void OAIAssignEbiData::setReleasedEbiList(const QList<qint32> &released_ebi_list) {
    this->released_ebi_list = released_ebi_list;
    this->m_released_ebi_list_isSet = true;
}

bool OAIAssignEbiData::is_released_ebi_list_Set() const{
    return m_released_ebi_list_isSet;
}

bool OAIAssignEbiData::is_released_ebi_list_Valid() const{
    return m_released_ebi_list_isValid;
}

OAIGuami OAIAssignEbiData::getOldGuami() const {
    return old_guami;
}
void OAIAssignEbiData::setOldGuami(const OAIGuami &old_guami) {
    this->old_guami = old_guami;
    this->m_old_guami_isSet = true;
}

bool OAIAssignEbiData::is_old_guami_Set() const{
    return m_old_guami_isSet;
}

bool OAIAssignEbiData::is_old_guami_Valid() const{
    return m_old_guami_isValid;
}

bool OAIAssignEbiData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pdu_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (arp_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (released_ebi_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (old_guami.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignEbiData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pdu_session_id_isValid && true;
}

} // namespace OpenAPI
