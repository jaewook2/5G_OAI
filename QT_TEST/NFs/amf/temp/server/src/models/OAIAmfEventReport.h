/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAmfEventReport.h
 *
 * 
 */

#ifndef OAIAmfEventReport_H
#define OAIAmfEventReport_H

#include <QJsonObject>

#include "OAI5GsUserStateInfo.h"
#include "OAIAccessType.h"
#include "OAIAmfEventArea.h"
#include "OAIAmfEventState.h"
#include "OAIAmfEventType.h"
#include "OAICmInfo.h"
#include "OAICommunicationFailure.h"
#include "OAILossOfConnectivityReason.h"
#include "OAIRmInfo.h"
#include "OAIUEIdExt.h"
#include "OAIUeReachability.h"
#include "OAIUserLocation.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAmfEventReport : public OAIObject {
public:
    OAIAmfEventReport();
    OAIAmfEventReport(QString json);
    ~OAIAmfEventReport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAmfEventType getType() const;
    void setType(const OAIAmfEventType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIAmfEventState getState() const;
    void setState(const OAIAmfEventState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QDateTime getTimeStamp() const;
    void setTimeStamp(const QDateTime &time_stamp);
    bool is_time_stamp_Set() const;
    bool is_time_stamp_Valid() const;

    QString getSubscriptionId() const;
    void setSubscriptionId(const QString &subscription_id);
    bool is_subscription_id_Set() const;
    bool is_subscription_id_Valid() const;

    bool isAnyUe() const;
    void setAnyUe(const bool &any_ue);
    bool is_any_ue_Set() const;
    bool is_any_ue_Valid() const;

    QString getSupi() const;
    void setSupi(const QString &supi);
    bool is_supi_Set() const;
    bool is_supi_Valid() const;

    QList<OAIAmfEventArea> getAreaList() const;
    void setAreaList(const QList<OAIAmfEventArea> &area_list);
    bool is_area_list_Set() const;
    bool is_area_list_Valid() const;

    qint32 getRefId() const;
    void setRefId(const qint32 &ref_id);
    bool is_ref_id_Set() const;
    bool is_ref_id_Valid() const;

    QString getGpsi() const;
    void setGpsi(const QString &gpsi);
    bool is_gpsi_Set() const;
    bool is_gpsi_Valid() const;

    QString getPei() const;
    void setPei(const QString &pei);
    bool is_pei_Set() const;
    bool is_pei_Valid() const;

    OAIUserLocation getLocation() const;
    void setLocation(const OAIUserLocation &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    OAIUserLocation getAdditionalLocation() const;
    void setAdditionalLocation(const OAIUserLocation &additional_location);
    bool is_additional_location_Set() const;
    bool is_additional_location_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    QList<OAIAccessType> getAccessTypeList() const;
    void setAccessTypeList(const QList<OAIAccessType> &access_type_list);
    bool is_access_type_list_Set() const;
    bool is_access_type_list_Valid() const;

    QList<OAIRmInfo> getRmInfoList() const;
    void setRmInfoList(const QList<OAIRmInfo> &rm_info_list);
    bool is_rm_info_list_Set() const;
    bool is_rm_info_list_Valid() const;

    QList<OAICmInfo> getCmInfoList() const;
    void setCmInfoList(const QList<OAICmInfo> &cm_info_list);
    bool is_cm_info_list_Set() const;
    bool is_cm_info_list_Valid() const;

    OAIUeReachability getReachability() const;
    void setReachability(const OAIUeReachability &reachability);
    bool is_reachability_Set() const;
    bool is_reachability_Valid() const;

    OAICommunicationFailure getCommFailure() const;
    void setCommFailure(const OAICommunicationFailure &comm_failure);
    bool is_comm_failure_Set() const;
    bool is_comm_failure_Valid() const;

    OAILossOfConnectivityReason getLossOfConnectReason() const;
    void setLossOfConnectReason(const OAILossOfConnectivityReason &loss_of_connect_reason);
    bool is_loss_of_connect_reason_Set() const;
    bool is_loss_of_connect_reason_Valid() const;

    qint32 getNumberOfUes() const;
    void setNumberOfUes(const qint32 &number_of_ues);
    bool is_number_of_ues_Set() const;
    bool is_number_of_ues_Valid() const;

    QList<OAI5GsUserStateInfo> getR5gsUserStateList() const;
    void setR5gsUserStateList(const QList<OAI5GsUserStateInfo> &r_5gs_user_state_list);
    bool is_r_5gs_user_state_list_Set() const;
    bool is_r_5gs_user_state_list_Valid() const;

    QString getTypeCode() const;
    void setTypeCode(const QString &type_code);
    bool is_type_code_Set() const;
    bool is_type_code_Valid() const;

    qint32 getRegistrationNumber() const;
    void setRegistrationNumber(const qint32 &registration_number);
    bool is_registration_number_Set() const;
    bool is_registration_number_Valid() const;

    QDateTime getMaxAvailabilityTime() const;
    void setMaxAvailabilityTime(const QDateTime &max_availability_time);
    bool is_max_availability_time_Set() const;
    bool is_max_availability_time_Valid() const;

    QList<OAIUEIdExt> getUeIdExt() const;
    void setUeIdExt(const QList<OAIUEIdExt> &ue_id_ext);
    bool is_ue_id_ext_Set() const;
    bool is_ue_id_ext_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAmfEventType type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIAmfEventState state;
    bool m_state_isSet;
    bool m_state_isValid;

    QDateTime time_stamp;
    bool m_time_stamp_isSet;
    bool m_time_stamp_isValid;

    QString subscription_id;
    bool m_subscription_id_isSet;
    bool m_subscription_id_isValid;

    bool any_ue;
    bool m_any_ue_isSet;
    bool m_any_ue_isValid;

    QString supi;
    bool m_supi_isSet;
    bool m_supi_isValid;

    QList<OAIAmfEventArea> area_list;
    bool m_area_list_isSet;
    bool m_area_list_isValid;

    qint32 ref_id;
    bool m_ref_id_isSet;
    bool m_ref_id_isValid;

    QString gpsi;
    bool m_gpsi_isSet;
    bool m_gpsi_isValid;

    QString pei;
    bool m_pei_isSet;
    bool m_pei_isValid;

    OAIUserLocation location;
    bool m_location_isSet;
    bool m_location_isValid;

    OAIUserLocation additional_location;
    bool m_additional_location_isSet;
    bool m_additional_location_isValid;

    QString timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    QList<OAIAccessType> access_type_list;
    bool m_access_type_list_isSet;
    bool m_access_type_list_isValid;

    QList<OAIRmInfo> rm_info_list;
    bool m_rm_info_list_isSet;
    bool m_rm_info_list_isValid;

    QList<OAICmInfo> cm_info_list;
    bool m_cm_info_list_isSet;
    bool m_cm_info_list_isValid;

    OAIUeReachability reachability;
    bool m_reachability_isSet;
    bool m_reachability_isValid;

    OAICommunicationFailure comm_failure;
    bool m_comm_failure_isSet;
    bool m_comm_failure_isValid;

    OAILossOfConnectivityReason loss_of_connect_reason;
    bool m_loss_of_connect_reason_isSet;
    bool m_loss_of_connect_reason_isValid;

    qint32 number_of_ues;
    bool m_number_of_ues_isSet;
    bool m_number_of_ues_isValid;

    QList<OAI5GsUserStateInfo> r_5gs_user_state_list;
    bool m_r_5gs_user_state_list_isSet;
    bool m_r_5gs_user_state_list_isValid;

    QString type_code;
    bool m_type_code_isSet;
    bool m_type_code_isValid;

    qint32 registration_number;
    bool m_registration_number_isSet;
    bool m_registration_number_isValid;

    QDateTime max_availability_time;
    bool m_max_availability_time_isSet;
    bool m_max_availability_time_isValid;

    QList<OAIUEIdExt> ue_id_ext;
    bool m_ue_id_ext_isSet;
    bool m_ue_id_ext_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAmfEventReport)

#endif // OAIAmfEventReport_H
