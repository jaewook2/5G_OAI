/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficDescriptor::OAITrafficDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficDescriptor::OAITrafficDescriptor() {
    this->initializeModel();
}

OAITrafficDescriptor::~OAITrafficDescriptor() {}

void OAITrafficDescriptor::initializeModel() {

    m_dnn_isSet = false;
    m_dnn_isValid = false;

    m_s_nssai_isSet = false;
    m_s_nssai_isValid = false;

    m_ddd_traffic_descriptor_list_isSet = false;
    m_ddd_traffic_descriptor_list_isValid = false;
}

void OAITrafficDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficDescriptor::fromJsonObject(QJsonObject json) {

    m_dnn_isValid = ::OpenAPI::fromJsonValue(dnn, json[QString("dnn")]);
    m_dnn_isSet = !json[QString("dnn")].isNull() && m_dnn_isValid;

    m_s_nssai_isValid = ::OpenAPI::fromJsonValue(s_nssai, json[QString("sNssai")]);
    m_s_nssai_isSet = !json[QString("sNssai")].isNull() && m_s_nssai_isValid;

    m_ddd_traffic_descriptor_list_isValid = ::OpenAPI::fromJsonValue(ddd_traffic_descriptor_list, json[QString("dddTrafficDescriptorList")]);
    m_ddd_traffic_descriptor_list_isSet = !json[QString("dddTrafficDescriptorList")].isNull() && m_ddd_traffic_descriptor_list_isValid;
}

QString OAITrafficDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_dnn_isSet) {
        obj.insert(QString("dnn"), ::OpenAPI::toJsonValue(dnn));
    }
    if (s_nssai.isSet()) {
        obj.insert(QString("sNssai"), ::OpenAPI::toJsonValue(s_nssai));
    }
    if (ddd_traffic_descriptor_list.size() > 0) {
        obj.insert(QString("dddTrafficDescriptorList"), ::OpenAPI::toJsonValue(ddd_traffic_descriptor_list));
    }
    return obj;
}

QString OAITrafficDescriptor::getDnn() const {
    return dnn;
}
void OAITrafficDescriptor::setDnn(const QString &dnn) {
    this->dnn = dnn;
    this->m_dnn_isSet = true;
}

bool OAITrafficDescriptor::is_dnn_Set() const{
    return m_dnn_isSet;
}

bool OAITrafficDescriptor::is_dnn_Valid() const{
    return m_dnn_isValid;
}

OAISnssai OAITrafficDescriptor::getSNssai() const {
    return s_nssai;
}
void OAITrafficDescriptor::setSNssai(const OAISnssai &s_nssai) {
    this->s_nssai = s_nssai;
    this->m_s_nssai_isSet = true;
}

bool OAITrafficDescriptor::is_s_nssai_Set() const{
    return m_s_nssai_isSet;
}

bool OAITrafficDescriptor::is_s_nssai_Valid() const{
    return m_s_nssai_isValid;
}

QList<OAIDddTrafficDescriptor> OAITrafficDescriptor::getDddTrafficDescriptorList() const {
    return ddd_traffic_descriptor_list;
}
void OAITrafficDescriptor::setDddTrafficDescriptorList(const QList<OAIDddTrafficDescriptor> &ddd_traffic_descriptor_list) {
    this->ddd_traffic_descriptor_list = ddd_traffic_descriptor_list;
    this->m_ddd_traffic_descriptor_list_isSet = true;
}

bool OAITrafficDescriptor::is_ddd_traffic_descriptor_list_Set() const{
    return m_ddd_traffic_descriptor_list_isSet;
}

bool OAITrafficDescriptor::is_ddd_traffic_descriptor_list_Valid() const{
    return m_ddd_traffic_descriptor_list_isValid;
}

bool OAITrafficDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dnn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (s_nssai.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (ddd_traffic_descriptor_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
