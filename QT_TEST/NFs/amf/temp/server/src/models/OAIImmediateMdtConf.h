/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImmediateMdtConf.h
 *
 * 
 */

#ifndef OAIImmediateMdtConf_H
#define OAIImmediateMdtConf_H

#include <QJsonObject>

#include "OAIAreaScope.h"
#include "OAICollectionPeriodRmmLteMdt.h"
#include "OAICollectionPeriodRmmNrMdt.h"
#include "OAIJobType.h"
#include "OAIMeasurementLteForMdt.h"
#include "OAIMeasurementNrForMdt.h"
#include "OAIMeasurementPeriodLteMdt.h"
#include "OAIPlmnId.h"
#include "OAIPositioningMethodMdt.h"
#include "OAIReportAmountMdt.h"
#include "OAIReportIntervalMdt.h"
#include "OAIReportIntervalNrMdt.h"
#include "OAIReportingTrigger.h"
#include "OAISensorMeasurement.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIImmediateMdtConf : public OAIObject {
public:
    OAIImmediateMdtConf();
    OAIImmediateMdtConf(QString json);
    ~OAIImmediateMdtConf() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIJobType getJobType() const;
    void setJobType(const OAIJobType &job_type);
    bool is_job_type_Set() const;
    bool is_job_type_Valid() const;

    QList<OAIMeasurementLteForMdt> getMeasurementLteList() const;
    void setMeasurementLteList(const QList<OAIMeasurementLteForMdt> &measurement_lte_list);
    bool is_measurement_lte_list_Set() const;
    bool is_measurement_lte_list_Valid() const;

    QList<OAIMeasurementNrForMdt> getMeasurementNrList() const;
    void setMeasurementNrList(const QList<OAIMeasurementNrForMdt> &measurement_nr_list);
    bool is_measurement_nr_list_Set() const;
    bool is_measurement_nr_list_Valid() const;

    QList<OAIReportingTrigger> getReportingTriggerList() const;
    void setReportingTriggerList(const QList<OAIReportingTrigger> &reporting_trigger_list);
    bool is_reporting_trigger_list_Set() const;
    bool is_reporting_trigger_list_Valid() const;

    OAIReportIntervalMdt getReportInterval() const;
    void setReportInterval(const OAIReportIntervalMdt &report_interval);
    bool is_report_interval_Set() const;
    bool is_report_interval_Valid() const;

    OAIReportIntervalNrMdt getReportIntervalNr() const;
    void setReportIntervalNr(const OAIReportIntervalNrMdt &report_interval_nr);
    bool is_report_interval_nr_Set() const;
    bool is_report_interval_nr_Valid() const;

    OAIReportAmountMdt getReportAmount() const;
    void setReportAmount(const OAIReportAmountMdt &report_amount);
    bool is_report_amount_Set() const;
    bool is_report_amount_Valid() const;

    qint32 getEventThresholdRsrp() const;
    void setEventThresholdRsrp(const qint32 &event_threshold_rsrp);
    bool is_event_threshold_rsrp_Set() const;
    bool is_event_threshold_rsrp_Valid() const;

    qint32 getEventThresholdRsrq() const;
    void setEventThresholdRsrq(const qint32 &event_threshold_rsrq);
    bool is_event_threshold_rsrq_Set() const;
    bool is_event_threshold_rsrq_Valid() const;

    qint32 getEventThresholdRsrpNr() const;
    void setEventThresholdRsrpNr(const qint32 &event_threshold_rsrp_nr);
    bool is_event_threshold_rsrp_nr_Set() const;
    bool is_event_threshold_rsrp_nr_Valid() const;

    qint32 getEventThresholdRsrqNr() const;
    void setEventThresholdRsrqNr(const qint32 &event_threshold_rsrq_nr);
    bool is_event_threshold_rsrq_nr_Set() const;
    bool is_event_threshold_rsrq_nr_Valid() const;

    OAICollectionPeriodRmmLteMdt getCollectionPeriodRmmLte() const;
    void setCollectionPeriodRmmLte(const OAICollectionPeriodRmmLteMdt &collection_period_rmm_lte);
    bool is_collection_period_rmm_lte_Set() const;
    bool is_collection_period_rmm_lte_Valid() const;

    OAICollectionPeriodRmmNrMdt getCollectionPeriodRmmNr() const;
    void setCollectionPeriodRmmNr(const OAICollectionPeriodRmmNrMdt &collection_period_rmm_nr);
    bool is_collection_period_rmm_nr_Set() const;
    bool is_collection_period_rmm_nr_Valid() const;

    OAIMeasurementPeriodLteMdt getMeasurementPeriodLte() const;
    void setMeasurementPeriodLte(const OAIMeasurementPeriodLteMdt &measurement_period_lte);
    bool is_measurement_period_lte_Set() const;
    bool is_measurement_period_lte_Valid() const;

    OAIAreaScope getAreaScope() const;
    void setAreaScope(const OAIAreaScope &area_scope);
    bool is_area_scope_Set() const;
    bool is_area_scope_Valid() const;

    OAIPositioningMethodMdt getPositioningMethod() const;
    void setPositioningMethod(const OAIPositioningMethodMdt &positioning_method);
    bool is_positioning_method_Set() const;
    bool is_positioning_method_Valid() const;

    QList<OAIPositioningMethodMdt> getAddPositioningMethodList() const;
    void setAddPositioningMethodList(const QList<OAIPositioningMethodMdt> &add_positioning_method_list);
    bool is_add_positioning_method_list_Set() const;
    bool is_add_positioning_method_list_Valid() const;

    QList<OAIPlmnId> getMdtAllowedPlmnIdList() const;
    void setMdtAllowedPlmnIdList(const QList<OAIPlmnId> &mdt_allowed_plmn_id_list);
    bool is_mdt_allowed_plmn_id_list_Set() const;
    bool is_mdt_allowed_plmn_id_list_Valid() const;

    QList<OAISensorMeasurement> getSensorMeasurementList() const;
    void setSensorMeasurementList(const QList<OAISensorMeasurement> &sensor_measurement_list);
    bool is_sensor_measurement_list_Set() const;
    bool is_sensor_measurement_list_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIJobType job_type;
    bool m_job_type_isSet;
    bool m_job_type_isValid;

    QList<OAIMeasurementLteForMdt> measurement_lte_list;
    bool m_measurement_lte_list_isSet;
    bool m_measurement_lte_list_isValid;

    QList<OAIMeasurementNrForMdt> measurement_nr_list;
    bool m_measurement_nr_list_isSet;
    bool m_measurement_nr_list_isValid;

    QList<OAIReportingTrigger> reporting_trigger_list;
    bool m_reporting_trigger_list_isSet;
    bool m_reporting_trigger_list_isValid;

    OAIReportIntervalMdt report_interval;
    bool m_report_interval_isSet;
    bool m_report_interval_isValid;

    OAIReportIntervalNrMdt report_interval_nr;
    bool m_report_interval_nr_isSet;
    bool m_report_interval_nr_isValid;

    OAIReportAmountMdt report_amount;
    bool m_report_amount_isSet;
    bool m_report_amount_isValid;

    qint32 event_threshold_rsrp;
    bool m_event_threshold_rsrp_isSet;
    bool m_event_threshold_rsrp_isValid;

    qint32 event_threshold_rsrq;
    bool m_event_threshold_rsrq_isSet;
    bool m_event_threshold_rsrq_isValid;

    qint32 event_threshold_rsrp_nr;
    bool m_event_threshold_rsrp_nr_isSet;
    bool m_event_threshold_rsrp_nr_isValid;

    qint32 event_threshold_rsrq_nr;
    bool m_event_threshold_rsrq_nr_isSet;
    bool m_event_threshold_rsrq_nr_isValid;

    OAICollectionPeriodRmmLteMdt collection_period_rmm_lte;
    bool m_collection_period_rmm_lte_isSet;
    bool m_collection_period_rmm_lte_isValid;

    OAICollectionPeriodRmmNrMdt collection_period_rmm_nr;
    bool m_collection_period_rmm_nr_isSet;
    bool m_collection_period_rmm_nr_isValid;

    OAIMeasurementPeriodLteMdt measurement_period_lte;
    bool m_measurement_period_lte_isSet;
    bool m_measurement_period_lte_isValid;

    OAIAreaScope area_scope;
    bool m_area_scope_isSet;
    bool m_area_scope_isValid;

    OAIPositioningMethodMdt positioning_method;
    bool m_positioning_method_isSet;
    bool m_positioning_method_isValid;

    QList<OAIPositioningMethodMdt> add_positioning_method_list;
    bool m_add_positioning_method_list_isSet;
    bool m_add_positioning_method_list_isValid;

    QList<OAIPlmnId> mdt_allowed_plmn_id_list;
    bool m_mdt_allowed_plmn_id_list_isSet;
    bool m_mdt_allowed_plmn_id_list_isValid;

    QList<OAISensorMeasurement> sensor_measurement_list;
    bool m_sensor_measurement_list_isSet;
    bool m_sensor_measurement_list_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImmediateMdtConf)

#endif // OAIImmediateMdtConf_H
