/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledCommunicationTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledCommunicationTime::OAIScheduledCommunicationTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledCommunicationTime::OAIScheduledCommunicationTime() {
    this->initializeModel();
}

OAIScheduledCommunicationTime::~OAIScheduledCommunicationTime() {}

void OAIScheduledCommunicationTime::initializeModel() {

    m_days_of_week_isSet = false;
    m_days_of_week_isValid = false;

    m_time_of_day_start_isSet = false;
    m_time_of_day_start_isValid = false;

    m_time_of_day_end_isSet = false;
    m_time_of_day_end_isValid = false;
}

void OAIScheduledCommunicationTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledCommunicationTime::fromJsonObject(QJsonObject json) {

    m_days_of_week_isValid = ::OpenAPI::fromJsonValue(days_of_week, json[QString("daysOfWeek")]);
    m_days_of_week_isSet = !json[QString("daysOfWeek")].isNull() && m_days_of_week_isValid;

    m_time_of_day_start_isValid = ::OpenAPI::fromJsonValue(time_of_day_start, json[QString("timeOfDayStart")]);
    m_time_of_day_start_isSet = !json[QString("timeOfDayStart")].isNull() && m_time_of_day_start_isValid;

    m_time_of_day_end_isValid = ::OpenAPI::fromJsonValue(time_of_day_end, json[QString("timeOfDayEnd")]);
    m_time_of_day_end_isSet = !json[QString("timeOfDayEnd")].isNull() && m_time_of_day_end_isValid;
}

QString OAIScheduledCommunicationTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledCommunicationTime::asJsonObject() const {
    QJsonObject obj;
    if (days_of_week.size() > 0) {
        obj.insert(QString("daysOfWeek"), ::OpenAPI::toJsonValue(days_of_week));
    }
    if (m_time_of_day_start_isSet) {
        obj.insert(QString("timeOfDayStart"), ::OpenAPI::toJsonValue(time_of_day_start));
    }
    if (m_time_of_day_end_isSet) {
        obj.insert(QString("timeOfDayEnd"), ::OpenAPI::toJsonValue(time_of_day_end));
    }
    return obj;
}

QList<qint32> OAIScheduledCommunicationTime::getDaysOfWeek() const {
    return days_of_week;
}
void OAIScheduledCommunicationTime::setDaysOfWeek(const QList<qint32> &days_of_week) {
    this->days_of_week = days_of_week;
    this->m_days_of_week_isSet = true;
}

bool OAIScheduledCommunicationTime::is_days_of_week_Set() const{
    return m_days_of_week_isSet;
}

bool OAIScheduledCommunicationTime::is_days_of_week_Valid() const{
    return m_days_of_week_isValid;
}

QString OAIScheduledCommunicationTime::getTimeOfDayStart() const {
    return time_of_day_start;
}
void OAIScheduledCommunicationTime::setTimeOfDayStart(const QString &time_of_day_start) {
    this->time_of_day_start = time_of_day_start;
    this->m_time_of_day_start_isSet = true;
}

bool OAIScheduledCommunicationTime::is_time_of_day_start_Set() const{
    return m_time_of_day_start_isSet;
}

bool OAIScheduledCommunicationTime::is_time_of_day_start_Valid() const{
    return m_time_of_day_start_isValid;
}

QString OAIScheduledCommunicationTime::getTimeOfDayEnd() const {
    return time_of_day_end;
}
void OAIScheduledCommunicationTime::setTimeOfDayEnd(const QString &time_of_day_end) {
    this->time_of_day_end = time_of_day_end;
    this->m_time_of_day_end_isSet = true;
}

bool OAIScheduledCommunicationTime::is_time_of_day_end_Set() const{
    return m_time_of_day_end_isSet;
}

bool OAIScheduledCommunicationTime::is_time_of_day_end_Valid() const{
    return m_time_of_day_end_isValid;
}

bool OAIScheduledCommunicationTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (days_of_week.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_day_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_day_end_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledCommunicationTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
