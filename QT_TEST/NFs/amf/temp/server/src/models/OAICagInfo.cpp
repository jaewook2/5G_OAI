/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICagInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICagInfo::OAICagInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICagInfo::OAICagInfo() {
    this->initializeModel();
}

OAICagInfo::~OAICagInfo() {}

void OAICagInfo::initializeModel() {

    m_allowed_cag_list_isSet = false;
    m_allowed_cag_list_isValid = false;

    m_cag_only_indicator_isSet = false;
    m_cag_only_indicator_isValid = false;
}

void OAICagInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICagInfo::fromJsonObject(QJsonObject json) {

    m_allowed_cag_list_isValid = ::OpenAPI::fromJsonValue(allowed_cag_list, json[QString("allowedCagList")]);
    m_allowed_cag_list_isSet = !json[QString("allowedCagList")].isNull() && m_allowed_cag_list_isValid;

    m_cag_only_indicator_isValid = ::OpenAPI::fromJsonValue(cag_only_indicator, json[QString("cagOnlyIndicator")]);
    m_cag_only_indicator_isSet = !json[QString("cagOnlyIndicator")].isNull() && m_cag_only_indicator_isValid;
}

QString OAICagInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICagInfo::asJsonObject() const {
    QJsonObject obj;
    if (allowed_cag_list.size() > 0) {
        obj.insert(QString("allowedCagList"), ::OpenAPI::toJsonValue(allowed_cag_list));
    }
    if (m_cag_only_indicator_isSet) {
        obj.insert(QString("cagOnlyIndicator"), ::OpenAPI::toJsonValue(cag_only_indicator));
    }
    return obj;
}

QList<QString> OAICagInfo::getAllowedCagList() const {
    return allowed_cag_list;
}
void OAICagInfo::setAllowedCagList(const QList<QString> &allowed_cag_list) {
    this->allowed_cag_list = allowed_cag_list;
    this->m_allowed_cag_list_isSet = true;
}

bool OAICagInfo::is_allowed_cag_list_Set() const{
    return m_allowed_cag_list_isSet;
}

bool OAICagInfo::is_allowed_cag_list_Valid() const{
    return m_allowed_cag_list_isValid;
}

bool OAICagInfo::isCagOnlyIndicator() const {
    return cag_only_indicator;
}
void OAICagInfo::setCagOnlyIndicator(const bool &cag_only_indicator) {
    this->cag_only_indicator = cag_only_indicator;
    this->m_cag_only_indicator_isSet = true;
}

bool OAICagInfo::is_cag_only_indicator_Set() const{
    return m_cag_only_indicator_isSet;
}

bool OAICagInfo::is_cag_only_indicator_Valid() const{
    return m_cag_only_indicator_isValid;
}

bool OAICagInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (allowed_cag_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cag_only_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICagInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allowed_cag_list_isValid && true;
}

} // namespace OpenAPI
