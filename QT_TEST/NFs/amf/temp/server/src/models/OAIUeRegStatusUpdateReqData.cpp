/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUeRegStatusUpdateReqData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUeRegStatusUpdateReqData::OAIUeRegStatusUpdateReqData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUeRegStatusUpdateReqData::OAIUeRegStatusUpdateReqData() {
    this->initializeModel();
}

OAIUeRegStatusUpdateReqData::~OAIUeRegStatusUpdateReqData() {}

void OAIUeRegStatusUpdateReqData::initializeModel() {

    m_transfer_status_isSet = false;
    m_transfer_status_isValid = false;

    m_to_release_session_list_isSet = false;
    m_to_release_session_list_isValid = false;

    m_pcf_reselected_ind_isSet = false;
    m_pcf_reselected_ind_isValid = false;

    m_smf_change_info_list_isSet = false;
    m_smf_change_info_list_isValid = false;
}

void OAIUeRegStatusUpdateReqData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUeRegStatusUpdateReqData::fromJsonObject(QJsonObject json) {

    m_transfer_status_isValid = ::OpenAPI::fromJsonValue(transfer_status, json[QString("transferStatus")]);
    m_transfer_status_isSet = !json[QString("transferStatus")].isNull() && m_transfer_status_isValid;

    m_to_release_session_list_isValid = ::OpenAPI::fromJsonValue(to_release_session_list, json[QString("toReleaseSessionList")]);
    m_to_release_session_list_isSet = !json[QString("toReleaseSessionList")].isNull() && m_to_release_session_list_isValid;

    m_pcf_reselected_ind_isValid = ::OpenAPI::fromJsonValue(pcf_reselected_ind, json[QString("pcfReselectedInd")]);
    m_pcf_reselected_ind_isSet = !json[QString("pcfReselectedInd")].isNull() && m_pcf_reselected_ind_isValid;

    m_smf_change_info_list_isValid = ::OpenAPI::fromJsonValue(smf_change_info_list, json[QString("smfChangeInfoList")]);
    m_smf_change_info_list_isSet = !json[QString("smfChangeInfoList")].isNull() && m_smf_change_info_list_isValid;
}

QString OAIUeRegStatusUpdateReqData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUeRegStatusUpdateReqData::asJsonObject() const {
    QJsonObject obj;
    if (transfer_status.isSet()) {
        obj.insert(QString("transferStatus"), ::OpenAPI::toJsonValue(transfer_status));
    }
    if (to_release_session_list.size() > 0) {
        obj.insert(QString("toReleaseSessionList"), ::OpenAPI::toJsonValue(to_release_session_list));
    }
    if (m_pcf_reselected_ind_isSet) {
        obj.insert(QString("pcfReselectedInd"), ::OpenAPI::toJsonValue(pcf_reselected_ind));
    }
    if (smf_change_info_list.size() > 0) {
        obj.insert(QString("smfChangeInfoList"), ::OpenAPI::toJsonValue(smf_change_info_list));
    }
    return obj;
}

OAIUeContextTransferStatus OAIUeRegStatusUpdateReqData::getTransferStatus() const {
    return transfer_status;
}
void OAIUeRegStatusUpdateReqData::setTransferStatus(const OAIUeContextTransferStatus &transfer_status) {
    this->transfer_status = transfer_status;
    this->m_transfer_status_isSet = true;
}

bool OAIUeRegStatusUpdateReqData::is_transfer_status_Set() const{
    return m_transfer_status_isSet;
}

bool OAIUeRegStatusUpdateReqData::is_transfer_status_Valid() const{
    return m_transfer_status_isValid;
}

QList<qint32> OAIUeRegStatusUpdateReqData::getToReleaseSessionList() const {
    return to_release_session_list;
}
void OAIUeRegStatusUpdateReqData::setToReleaseSessionList(const QList<qint32> &to_release_session_list) {
    this->to_release_session_list = to_release_session_list;
    this->m_to_release_session_list_isSet = true;
}

bool OAIUeRegStatusUpdateReqData::is_to_release_session_list_Set() const{
    return m_to_release_session_list_isSet;
}

bool OAIUeRegStatusUpdateReqData::is_to_release_session_list_Valid() const{
    return m_to_release_session_list_isValid;
}

bool OAIUeRegStatusUpdateReqData::isPcfReselectedInd() const {
    return pcf_reselected_ind;
}
void OAIUeRegStatusUpdateReqData::setPcfReselectedInd(const bool &pcf_reselected_ind) {
    this->pcf_reselected_ind = pcf_reselected_ind;
    this->m_pcf_reselected_ind_isSet = true;
}

bool OAIUeRegStatusUpdateReqData::is_pcf_reselected_ind_Set() const{
    return m_pcf_reselected_ind_isSet;
}

bool OAIUeRegStatusUpdateReqData::is_pcf_reselected_ind_Valid() const{
    return m_pcf_reselected_ind_isValid;
}

QList<OAISmfChangeInfo> OAIUeRegStatusUpdateReqData::getSmfChangeInfoList() const {
    return smf_change_info_list;
}
void OAIUeRegStatusUpdateReqData::setSmfChangeInfoList(const QList<OAISmfChangeInfo> &smf_change_info_list) {
    this->smf_change_info_list = smf_change_info_list;
    this->m_smf_change_info_list_isSet = true;
}

bool OAIUeRegStatusUpdateReqData::is_smf_change_info_list_Set() const{
    return m_smf_change_info_list_isSet;
}

bool OAIUeRegStatusUpdateReqData::is_smf_change_info_list_Valid() const{
    return m_smf_change_info_list_isValid;
}

bool OAIUeRegStatusUpdateReqData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (transfer_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (to_release_session_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcf_reselected_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (smf_change_info_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUeRegStatusUpdateReqData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transfer_status_isValid && true;
}

} // namespace OpenAPI
