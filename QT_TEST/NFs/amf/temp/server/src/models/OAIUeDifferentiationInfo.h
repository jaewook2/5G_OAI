/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUeDifferentiationInfo.h
 *
 * 
 */

#ifndef OAIUeDifferentiationInfo_H
#define OAIUeDifferentiationInfo_H

#include <QJsonObject>

#include "OAIBatteryIndication.h"
#include "OAIPeriodicCommunicationIndicator.h"
#include "OAIScheduledCommunicationTime.h"
#include "OAIStationaryIndication.h"
#include "OAITrafficProfile.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUeDifferentiationInfo : public OAIObject {
public:
    OAIUeDifferentiationInfo();
    OAIUeDifferentiationInfo(QString json);
    ~OAIUeDifferentiationInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPeriodicCommunicationIndicator getPeriodicComInd() const;
    void setPeriodicComInd(const OAIPeriodicCommunicationIndicator &periodic_com_ind);
    bool is_periodic_com_ind_Set() const;
    bool is_periodic_com_ind_Valid() const;

    qint32 getPeriodicTime() const;
    void setPeriodicTime(const qint32 &periodic_time);
    bool is_periodic_time_Set() const;
    bool is_periodic_time_Valid() const;

    OAIScheduledCommunicationTime getScheduledComTime() const;
    void setScheduledComTime(const OAIScheduledCommunicationTime &scheduled_com_time);
    bool is_scheduled_com_time_Set() const;
    bool is_scheduled_com_time_Valid() const;

    OAIStationaryIndication getStationaryInd() const;
    void setStationaryInd(const OAIStationaryIndication &stationary_ind);
    bool is_stationary_ind_Set() const;
    bool is_stationary_ind_Valid() const;

    OAITrafficProfile getTrafficProfile() const;
    void setTrafficProfile(const OAITrafficProfile &traffic_profile);
    bool is_traffic_profile_Set() const;
    bool is_traffic_profile_Valid() const;

    OAIBatteryIndication getBatteryInd() const;
    void setBatteryInd(const OAIBatteryIndication &battery_ind);
    bool is_battery_ind_Set() const;
    bool is_battery_ind_Valid() const;

    QDateTime getValidityTime() const;
    void setValidityTime(const QDateTime &validity_time);
    bool is_validity_time_Set() const;
    bool is_validity_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPeriodicCommunicationIndicator periodic_com_ind;
    bool m_periodic_com_ind_isSet;
    bool m_periodic_com_ind_isValid;

    qint32 periodic_time;
    bool m_periodic_time_isSet;
    bool m_periodic_time_isValid;

    OAIScheduledCommunicationTime scheduled_com_time;
    bool m_scheduled_com_time_isSet;
    bool m_scheduled_com_time_isValid;

    OAIStationaryIndication stationary_ind;
    bool m_stationary_ind_isSet;
    bool m_stationary_ind_isValid;

    OAITrafficProfile traffic_profile;
    bool m_traffic_profile_isSet;
    bool m_traffic_profile_isValid;

    OAIBatteryIndication battery_ind;
    bool m_battery_ind_isSet;
    bool m_battery_ind_isValid;

    QDateTime validity_time;
    bool m_validity_time_isSet;
    bool m_validity_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUeDifferentiationInfo)

#endif // OAIUeDifferentiationInfo_H
