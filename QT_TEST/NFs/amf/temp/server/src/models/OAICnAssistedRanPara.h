/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICnAssistedRanPara.h
 *
 * 
 */

#ifndef OAICnAssistedRanPara_H
#define OAICnAssistedRanPara_H

#include <QJsonObject>

#include "OAIBatteryIndication.h"
#include "OAIScheduledCommunicationTime.h"
#include "OAIScheduledCommunicationType.h"
#include "OAIStationaryIndication.h"
#include "OAITrafficProfile.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICnAssistedRanPara : public OAIObject {
public:
    OAICnAssistedRanPara();
    OAICnAssistedRanPara(QString json);
    ~OAICnAssistedRanPara() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIStationaryIndication getStationaryIndication() const;
    void setStationaryIndication(const OAIStationaryIndication &stationary_indication);
    bool is_stationary_indication_Set() const;
    bool is_stationary_indication_Valid() const;

    qint32 getCommunicationDurationTime() const;
    void setCommunicationDurationTime(const qint32 &communication_duration_time);
    bool is_communication_duration_time_Set() const;
    bool is_communication_duration_time_Valid() const;

    qint32 getPeriodicTime() const;
    void setPeriodicTime(const qint32 &periodic_time);
    bool is_periodic_time_Set() const;
    bool is_periodic_time_Valid() const;

    OAIScheduledCommunicationTime getScheduledCommunicationTime() const;
    void setScheduledCommunicationTime(const OAIScheduledCommunicationTime &scheduled_communication_time);
    bool is_scheduled_communication_time_Set() const;
    bool is_scheduled_communication_time_Valid() const;

    OAIScheduledCommunicationType getScheduledCommunicationType() const;
    void setScheduledCommunicationType(const OAIScheduledCommunicationType &scheduled_communication_type);
    bool is_scheduled_communication_type_Set() const;
    bool is_scheduled_communication_type_Valid() const;

    OAITrafficProfile getTrafficProfile() const;
    void setTrafficProfile(const OAITrafficProfile &traffic_profile);
    bool is_traffic_profile_Set() const;
    bool is_traffic_profile_Valid() const;

    OAIBatteryIndication getBatteryIndication() const;
    void setBatteryIndication(const OAIBatteryIndication &battery_indication);
    bool is_battery_indication_Set() const;
    bool is_battery_indication_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIStationaryIndication stationary_indication;
    bool m_stationary_indication_isSet;
    bool m_stationary_indication_isValid;

    qint32 communication_duration_time;
    bool m_communication_duration_time_isSet;
    bool m_communication_duration_time_isValid;

    qint32 periodic_time;
    bool m_periodic_time_isSet;
    bool m_periodic_time_isValid;

    OAIScheduledCommunicationTime scheduled_communication_time;
    bool m_scheduled_communication_time_isSet;
    bool m_scheduled_communication_time_isValid;

    OAIScheduledCommunicationType scheduled_communication_type;
    bool m_scheduled_communication_type_isSet;
    bool m_scheduled_communication_type_isValid;

    OAITrafficProfile traffic_profile;
    bool m_traffic_profile_isSet;
    bool m_traffic_profile_isValid;

    OAIBatteryIndication battery_indication;
    bool m_battery_indication_isSet;
    bool m_battery_indication_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICnAssistedRanPara)

#endif // OAICnAssistedRanPara_H
