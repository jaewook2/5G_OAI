/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUeRegStatusUpdateRspData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUeRegStatusUpdateRspData::OAIUeRegStatusUpdateRspData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUeRegStatusUpdateRspData::OAIUeRegStatusUpdateRspData() {
    this->initializeModel();
}

OAIUeRegStatusUpdateRspData::~OAIUeRegStatusUpdateRspData() {}

void OAIUeRegStatusUpdateRspData::initializeModel() {

    m_reg_status_transfer_complete_isSet = false;
    m_reg_status_transfer_complete_isValid = false;
}

void OAIUeRegStatusUpdateRspData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUeRegStatusUpdateRspData::fromJsonObject(QJsonObject json) {

    m_reg_status_transfer_complete_isValid = ::OpenAPI::fromJsonValue(reg_status_transfer_complete, json[QString("regStatusTransferComplete")]);
    m_reg_status_transfer_complete_isSet = !json[QString("regStatusTransferComplete")].isNull() && m_reg_status_transfer_complete_isValid;
}

QString OAIUeRegStatusUpdateRspData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUeRegStatusUpdateRspData::asJsonObject() const {
    QJsonObject obj;
    if (m_reg_status_transfer_complete_isSet) {
        obj.insert(QString("regStatusTransferComplete"), ::OpenAPI::toJsonValue(reg_status_transfer_complete));
    }
    return obj;
}

bool OAIUeRegStatusUpdateRspData::isRegStatusTransferComplete() const {
    return reg_status_transfer_complete;
}
void OAIUeRegStatusUpdateRspData::setRegStatusTransferComplete(const bool &reg_status_transfer_complete) {
    this->reg_status_transfer_complete = reg_status_transfer_complete;
    this->m_reg_status_transfer_complete_isSet = true;
}

bool OAIUeRegStatusUpdateRspData::is_reg_status_transfer_complete_Set() const{
    return m_reg_status_transfer_complete_isSet;
}

bool OAIUeRegStatusUpdateRspData::is_reg_status_transfer_complete_Valid() const{
    return m_reg_status_transfer_complete_isValid;
}

bool OAIUeRegStatusUpdateRspData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reg_status_transfer_complete_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUeRegStatusUpdateRspData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reg_status_transfer_complete_isValid && true;
}

} // namespace OpenAPI
