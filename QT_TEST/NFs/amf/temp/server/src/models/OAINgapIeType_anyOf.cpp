/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINgapIeType_anyOf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINgapIeType_anyOf::OAINgapIeType_anyOf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINgapIeType_anyOf::OAINgapIeType_anyOf() {
    this->initializeModel();
}

OAINgapIeType_anyOf::~OAINgapIeType_anyOf() {}

void OAINgapIeType_anyOf::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINgapIeType_anyOf::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINgapIeType_anyOf::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PDU_RES_SETUP_REQ", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::PDU_RES_SETUP_REQ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PDU_RES_REL_CMD", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::PDU_RES_REL_CMD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PDU_RES_MOD_REQ", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::PDU_RES_MOD_REQ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HANDOVER_CMD", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::HANDOVER_CMD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HANDOVER_REQUIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::HANDOVER_REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HANDOVER_PREP_FAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::HANDOVER_PREP_FAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SRC_TO_TAR_CONTAINER", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::SRC_TO_TAR_CONTAINER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAR_TO_SRC_CONTAINER", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::TAR_TO_SRC_CONTAINER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAR_TO_SRC_FAIL_CONTAINER", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::TAR_TO_SRC_FAIL_CONTAINER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RAN_STATUS_TRANS_CONTAINER", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::RAN_STATUS_TRANS_CONTAINER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SON_CONFIG_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::SON_CONFIG_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NRPPA_PDU", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::NRPPA_PDU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UE_RADIO_CAPABILITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::UE_RADIO_CAPABILITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RIM_INFO_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::RIM_INFO_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECONDARY_RAT_USAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::SECONDARY_RAT_USAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PC5_QOS_PARA", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::PC5_QOS_PARA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EARLY_STATUS_TRANS_CONTAINER", Qt::CaseInsensitive) == 0) {
        m_value = eOAINgapIeType_anyOf::EARLY_STATUS_TRANS_CONTAINER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINgapIeType_anyOf::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINgapIeType_anyOf::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINgapIeType_anyOf::PDU_RES_SETUP_REQ:
            val = "PDU_RES_SETUP_REQ";
            break;
        case eOAINgapIeType_anyOf::PDU_RES_REL_CMD:
            val = "PDU_RES_REL_CMD";
            break;
        case eOAINgapIeType_anyOf::PDU_RES_MOD_REQ:
            val = "PDU_RES_MOD_REQ";
            break;
        case eOAINgapIeType_anyOf::HANDOVER_CMD:
            val = "HANDOVER_CMD";
            break;
        case eOAINgapIeType_anyOf::HANDOVER_REQUIRED:
            val = "HANDOVER_REQUIRED";
            break;
        case eOAINgapIeType_anyOf::HANDOVER_PREP_FAIL:
            val = "HANDOVER_PREP_FAIL";
            break;
        case eOAINgapIeType_anyOf::SRC_TO_TAR_CONTAINER:
            val = "SRC_TO_TAR_CONTAINER";
            break;
        case eOAINgapIeType_anyOf::TAR_TO_SRC_CONTAINER:
            val = "TAR_TO_SRC_CONTAINER";
            break;
        case eOAINgapIeType_anyOf::TAR_TO_SRC_FAIL_CONTAINER:
            val = "TAR_TO_SRC_FAIL_CONTAINER";
            break;
        case eOAINgapIeType_anyOf::RAN_STATUS_TRANS_CONTAINER:
            val = "RAN_STATUS_TRANS_CONTAINER";
            break;
        case eOAINgapIeType_anyOf::SON_CONFIG_TRANSFER:
            val = "SON_CONFIG_TRANSFER";
            break;
        case eOAINgapIeType_anyOf::NRPPA_PDU:
            val = "NRPPA_PDU";
            break;
        case eOAINgapIeType_anyOf::UE_RADIO_CAPABILITY:
            val = "UE_RADIO_CAPABILITY";
            break;
        case eOAINgapIeType_anyOf::RIM_INFO_TRANSFER:
            val = "RIM_INFO_TRANSFER";
            break;
        case eOAINgapIeType_anyOf::SECONDARY_RAT_USAGE:
            val = "SECONDARY_RAT_USAGE";
            break;
        case eOAINgapIeType_anyOf::PC5_QOS_PARA:
            val = "PC5_QOS_PARA";
            break;
        case eOAINgapIeType_anyOf::EARLY_STATUS_TRANS_CONTAINER:
            val = "EARLY_STATUS_TRANS_CONTAINER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINgapIeType_anyOf::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINgapIeType_anyOf::eOAINgapIeType_anyOf OAINgapIeType_anyOf::getValue() const {
    return m_value;
}

void OAINgapIeType_anyOf::setValue(const OAINgapIeType_anyOf::eOAINgapIeType_anyOf& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINgapIeType_anyOf::isSet() const {
    
    return m_value_isSet;
}

bool OAINgapIeType_anyOf::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
