/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUeContextCreateError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUeContextCreateError::OAIUeContextCreateError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUeContextCreateError::OAIUeContextCreateError() {
    this->initializeModel();
}

OAIUeContextCreateError::~OAIUeContextCreateError() {}

void OAIUeContextCreateError::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_ngap_cause_isSet = false;
    m_ngap_cause_isValid = false;

    m_target_to_source_failure_data_isSet = false;
    m_target_to_source_failure_data_isValid = false;
}

void OAIUeContextCreateError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUeContextCreateError::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_ngap_cause_isValid = ::OpenAPI::fromJsonValue(ngap_cause, json[QString("ngapCause")]);
    m_ngap_cause_isSet = !json[QString("ngapCause")].isNull() && m_ngap_cause_isValid;

    m_target_to_source_failure_data_isValid = ::OpenAPI::fromJsonValue(target_to_source_failure_data, json[QString("targetToSourceFailureData")]);
    m_target_to_source_failure_data_isSet = !json[QString("targetToSourceFailureData")].isNull() && m_target_to_source_failure_data_isValid;
}

QString OAIUeContextCreateError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUeContextCreateError::asJsonObject() const {
    QJsonObject obj;
    if (error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(error));
    }
    if (ngap_cause.isSet()) {
        obj.insert(QString("ngapCause"), ::OpenAPI::toJsonValue(ngap_cause));
    }
    if (target_to_source_failure_data.isSet()) {
        obj.insert(QString("targetToSourceFailureData"), ::OpenAPI::toJsonValue(target_to_source_failure_data));
    }
    return obj;
}

OAIProblemDetails OAIUeContextCreateError::getError() const {
    return error;
}
void OAIUeContextCreateError::setError(const OAIProblemDetails &error) {
    this->error = error;
    this->m_error_isSet = true;
}

bool OAIUeContextCreateError::is_error_Set() const{
    return m_error_isSet;
}

bool OAIUeContextCreateError::is_error_Valid() const{
    return m_error_isValid;
}

OAINgApCause OAIUeContextCreateError::getNgapCause() const {
    return ngap_cause;
}
void OAIUeContextCreateError::setNgapCause(const OAINgApCause &ngap_cause) {
    this->ngap_cause = ngap_cause;
    this->m_ngap_cause_isSet = true;
}

bool OAIUeContextCreateError::is_ngap_cause_Set() const{
    return m_ngap_cause_isSet;
}

bool OAIUeContextCreateError::is_ngap_cause_Valid() const{
    return m_ngap_cause_isValid;
}

OAIN2InfoContent OAIUeContextCreateError::getTargetToSourceFailureData() const {
    return target_to_source_failure_data;
}
void OAIUeContextCreateError::setTargetToSourceFailureData(const OAIN2InfoContent &target_to_source_failure_data) {
    this->target_to_source_failure_data = target_to_source_failure_data;
    this->m_target_to_source_failure_data_isSet = true;
}

bool OAIUeContextCreateError::is_target_to_source_failure_data_Set() const{
    return m_target_to_source_failure_data_isSet;
}

bool OAIUeContextCreateError::is_target_to_source_failure_data_Valid() const{
    return m_target_to_source_failure_data_isValid;
}

bool OAIUeContextCreateError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (ngap_cause.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (target_to_source_failure_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUeContextCreateError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_isValid && true;
}

} // namespace OpenAPI
