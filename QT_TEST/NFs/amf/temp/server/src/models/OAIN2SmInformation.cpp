/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIN2SmInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIN2SmInformation::OAIN2SmInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIN2SmInformation::OAIN2SmInformation() {
    this->initializeModel();
}

OAIN2SmInformation::~OAIN2SmInformation() {}

void OAIN2SmInformation::initializeModel() {

    m_pdu_session_id_isSet = false;
    m_pdu_session_id_isValid = false;

    m_n2_info_content_isSet = false;
    m_n2_info_content_isValid = false;

    m_s_nssai_isSet = false;
    m_s_nssai_isValid = false;

    m_home_plmn_snssai_isSet = false;
    m_home_plmn_snssai_isValid = false;

    m_iwk_snssai_isSet = false;
    m_iwk_snssai_isValid = false;

    m_subject_to_ho_isSet = false;
    m_subject_to_ho_isValid = false;
}

void OAIN2SmInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIN2SmInformation::fromJsonObject(QJsonObject json) {

    m_pdu_session_id_isValid = ::OpenAPI::fromJsonValue(pdu_session_id, json[QString("pduSessionId")]);
    m_pdu_session_id_isSet = !json[QString("pduSessionId")].isNull() && m_pdu_session_id_isValid;

    m_n2_info_content_isValid = ::OpenAPI::fromJsonValue(n2_info_content, json[QString("n2InfoContent")]);
    m_n2_info_content_isSet = !json[QString("n2InfoContent")].isNull() && m_n2_info_content_isValid;

    m_s_nssai_isValid = ::OpenAPI::fromJsonValue(s_nssai, json[QString("sNssai")]);
    m_s_nssai_isSet = !json[QString("sNssai")].isNull() && m_s_nssai_isValid;

    m_home_plmn_snssai_isValid = ::OpenAPI::fromJsonValue(home_plmn_snssai, json[QString("homePlmnSnssai")]);
    m_home_plmn_snssai_isSet = !json[QString("homePlmnSnssai")].isNull() && m_home_plmn_snssai_isValid;

    m_iwk_snssai_isValid = ::OpenAPI::fromJsonValue(iwk_snssai, json[QString("iwkSnssai")]);
    m_iwk_snssai_isSet = !json[QString("iwkSnssai")].isNull() && m_iwk_snssai_isValid;

    m_subject_to_ho_isValid = ::OpenAPI::fromJsonValue(subject_to_ho, json[QString("subjectToHo")]);
    m_subject_to_ho_isSet = !json[QString("subjectToHo")].isNull() && m_subject_to_ho_isValid;
}

QString OAIN2SmInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIN2SmInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_pdu_session_id_isSet) {
        obj.insert(QString("pduSessionId"), ::OpenAPI::toJsonValue(pdu_session_id));
    }
    if (n2_info_content.isSet()) {
        obj.insert(QString("n2InfoContent"), ::OpenAPI::toJsonValue(n2_info_content));
    }
    if (s_nssai.isSet()) {
        obj.insert(QString("sNssai"), ::OpenAPI::toJsonValue(s_nssai));
    }
    if (home_plmn_snssai.isSet()) {
        obj.insert(QString("homePlmnSnssai"), ::OpenAPI::toJsonValue(home_plmn_snssai));
    }
    if (iwk_snssai.isSet()) {
        obj.insert(QString("iwkSnssai"), ::OpenAPI::toJsonValue(iwk_snssai));
    }
    if (m_subject_to_ho_isSet) {
        obj.insert(QString("subjectToHo"), ::OpenAPI::toJsonValue(subject_to_ho));
    }
    return obj;
}

qint32 OAIN2SmInformation::getPduSessionId() const {
    return pdu_session_id;
}
void OAIN2SmInformation::setPduSessionId(const qint32 &pdu_session_id) {
    this->pdu_session_id = pdu_session_id;
    this->m_pdu_session_id_isSet = true;
}

bool OAIN2SmInformation::is_pdu_session_id_Set() const{
    return m_pdu_session_id_isSet;
}

bool OAIN2SmInformation::is_pdu_session_id_Valid() const{
    return m_pdu_session_id_isValid;
}

OAIN2InfoContent OAIN2SmInformation::getN2InfoContent() const {
    return n2_info_content;
}
void OAIN2SmInformation::setN2InfoContent(const OAIN2InfoContent &n2_info_content) {
    this->n2_info_content = n2_info_content;
    this->m_n2_info_content_isSet = true;
}

bool OAIN2SmInformation::is_n2_info_content_Set() const{
    return m_n2_info_content_isSet;
}

bool OAIN2SmInformation::is_n2_info_content_Valid() const{
    return m_n2_info_content_isValid;
}

OAISnssai OAIN2SmInformation::getSNssai() const {
    return s_nssai;
}
void OAIN2SmInformation::setSNssai(const OAISnssai &s_nssai) {
    this->s_nssai = s_nssai;
    this->m_s_nssai_isSet = true;
}

bool OAIN2SmInformation::is_s_nssai_Set() const{
    return m_s_nssai_isSet;
}

bool OAIN2SmInformation::is_s_nssai_Valid() const{
    return m_s_nssai_isValid;
}

OAISnssai OAIN2SmInformation::getHomePlmnSnssai() const {
    return home_plmn_snssai;
}
void OAIN2SmInformation::setHomePlmnSnssai(const OAISnssai &home_plmn_snssai) {
    this->home_plmn_snssai = home_plmn_snssai;
    this->m_home_plmn_snssai_isSet = true;
}

bool OAIN2SmInformation::is_home_plmn_snssai_Set() const{
    return m_home_plmn_snssai_isSet;
}

bool OAIN2SmInformation::is_home_plmn_snssai_Valid() const{
    return m_home_plmn_snssai_isValid;
}

OAISnssai OAIN2SmInformation::getIwkSnssai() const {
    return iwk_snssai;
}
void OAIN2SmInformation::setIwkSnssai(const OAISnssai &iwk_snssai) {
    this->iwk_snssai = iwk_snssai;
    this->m_iwk_snssai_isSet = true;
}

bool OAIN2SmInformation::is_iwk_snssai_Set() const{
    return m_iwk_snssai_isSet;
}

bool OAIN2SmInformation::is_iwk_snssai_Valid() const{
    return m_iwk_snssai_isValid;
}

bool OAIN2SmInformation::isSubjectToHo() const {
    return subject_to_ho;
}
void OAIN2SmInformation::setSubjectToHo(const bool &subject_to_ho) {
    this->subject_to_ho = subject_to_ho;
    this->m_subject_to_ho_isSet = true;
}

bool OAIN2SmInformation::is_subject_to_ho_Set() const{
    return m_subject_to_ho_isSet;
}

bool OAIN2SmInformation::is_subject_to_ho_Valid() const{
    return m_subject_to_ho_isValid;
}

bool OAIN2SmInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pdu_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (n2_info_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (s_nssai.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (home_plmn_snssai.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (iwk_snssai.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_to_ho_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIN2SmInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pdu_session_id_isValid && true;
}

} // namespace OpenAPI
