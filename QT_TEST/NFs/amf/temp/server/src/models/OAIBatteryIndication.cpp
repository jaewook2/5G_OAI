/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatteryIndication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatteryIndication::OAIBatteryIndication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatteryIndication::OAIBatteryIndication() {
    this->initializeModel();
}

OAIBatteryIndication::~OAIBatteryIndication() {}

void OAIBatteryIndication::initializeModel() {

    m_battery_ind_isSet = false;
    m_battery_ind_isValid = false;

    m_replaceable_ind_isSet = false;
    m_replaceable_ind_isValid = false;

    m_rechargeable_ind_isSet = false;
    m_rechargeable_ind_isValid = false;
}

void OAIBatteryIndication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatteryIndication::fromJsonObject(QJsonObject json) {

    m_battery_ind_isValid = ::OpenAPI::fromJsonValue(battery_ind, json[QString("batteryInd")]);
    m_battery_ind_isSet = !json[QString("batteryInd")].isNull() && m_battery_ind_isValid;

    m_replaceable_ind_isValid = ::OpenAPI::fromJsonValue(replaceable_ind, json[QString("replaceableInd")]);
    m_replaceable_ind_isSet = !json[QString("replaceableInd")].isNull() && m_replaceable_ind_isValid;

    m_rechargeable_ind_isValid = ::OpenAPI::fromJsonValue(rechargeable_ind, json[QString("rechargeableInd")]);
    m_rechargeable_ind_isSet = !json[QString("rechargeableInd")].isNull() && m_rechargeable_ind_isValid;
}

QString OAIBatteryIndication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatteryIndication::asJsonObject() const {
    QJsonObject obj;
    if (m_battery_ind_isSet) {
        obj.insert(QString("batteryInd"), ::OpenAPI::toJsonValue(battery_ind));
    }
    if (m_replaceable_ind_isSet) {
        obj.insert(QString("replaceableInd"), ::OpenAPI::toJsonValue(replaceable_ind));
    }
    if (m_rechargeable_ind_isSet) {
        obj.insert(QString("rechargeableInd"), ::OpenAPI::toJsonValue(rechargeable_ind));
    }
    return obj;
}

bool OAIBatteryIndication::isBatteryInd() const {
    return battery_ind;
}
void OAIBatteryIndication::setBatteryInd(const bool &battery_ind) {
    this->battery_ind = battery_ind;
    this->m_battery_ind_isSet = true;
}

bool OAIBatteryIndication::is_battery_ind_Set() const{
    return m_battery_ind_isSet;
}

bool OAIBatteryIndication::is_battery_ind_Valid() const{
    return m_battery_ind_isValid;
}

bool OAIBatteryIndication::isReplaceableInd() const {
    return replaceable_ind;
}
void OAIBatteryIndication::setReplaceableInd(const bool &replaceable_ind) {
    this->replaceable_ind = replaceable_ind;
    this->m_replaceable_ind_isSet = true;
}

bool OAIBatteryIndication::is_replaceable_ind_Set() const{
    return m_replaceable_ind_isSet;
}

bool OAIBatteryIndication::is_replaceable_ind_Valid() const{
    return m_replaceable_ind_isValid;
}

bool OAIBatteryIndication::isRechargeableInd() const {
    return rechargeable_ind;
}
void OAIBatteryIndication::setRechargeableInd(const bool &rechargeable_ind) {
    this->rechargeable_ind = rechargeable_ind;
    this->m_rechargeable_ind_isSet = true;
}

bool OAIBatteryIndication::is_rechargeable_ind_Set() const{
    return m_rechargeable_ind_isSet;
}

bool OAIBatteryIndication::is_rechargeable_ind_Valid() const{
    return m_rechargeable_ind_isValid;
}

bool OAIBatteryIndication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_battery_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replaceable_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rechargeable_ind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatteryIndication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
