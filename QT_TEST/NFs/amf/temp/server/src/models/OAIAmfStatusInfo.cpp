/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmfStatusInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmfStatusInfo::OAIAmfStatusInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmfStatusInfo::OAIAmfStatusInfo() {
    this->initializeModel();
}

OAIAmfStatusInfo::~OAIAmfStatusInfo() {}

void OAIAmfStatusInfo::initializeModel() {

    m_guami_list_isSet = false;
    m_guami_list_isValid = false;

    m_status_change_isSet = false;
    m_status_change_isValid = false;

    m_target_amf_removal_isSet = false;
    m_target_amf_removal_isValid = false;

    m_target_amf_failure_isSet = false;
    m_target_amf_failure_isValid = false;
}

void OAIAmfStatusInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmfStatusInfo::fromJsonObject(QJsonObject json) {

    m_guami_list_isValid = ::OpenAPI::fromJsonValue(guami_list, json[QString("guamiList")]);
    m_guami_list_isSet = !json[QString("guamiList")].isNull() && m_guami_list_isValid;

    m_status_change_isValid = ::OpenAPI::fromJsonValue(status_change, json[QString("statusChange")]);
    m_status_change_isSet = !json[QString("statusChange")].isNull() && m_status_change_isValid;

    m_target_amf_removal_isValid = ::OpenAPI::fromJsonValue(target_amf_removal, json[QString("targetAmfRemoval")]);
    m_target_amf_removal_isSet = !json[QString("targetAmfRemoval")].isNull() && m_target_amf_removal_isValid;

    m_target_amf_failure_isValid = ::OpenAPI::fromJsonValue(target_amf_failure, json[QString("targetAmfFailure")]);
    m_target_amf_failure_isSet = !json[QString("targetAmfFailure")].isNull() && m_target_amf_failure_isValid;
}

QString OAIAmfStatusInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmfStatusInfo::asJsonObject() const {
    QJsonObject obj;
    if (guami_list.size() > 0) {
        obj.insert(QString("guamiList"), ::OpenAPI::toJsonValue(guami_list));
    }
    if (status_change.isSet()) {
        obj.insert(QString("statusChange"), ::OpenAPI::toJsonValue(status_change));
    }
    if (m_target_amf_removal_isSet) {
        obj.insert(QString("targetAmfRemoval"), ::OpenAPI::toJsonValue(target_amf_removal));
    }
    if (m_target_amf_failure_isSet) {
        obj.insert(QString("targetAmfFailure"), ::OpenAPI::toJsonValue(target_amf_failure));
    }
    return obj;
}

QList<OAIGuami> OAIAmfStatusInfo::getGuamiList() const {
    return guami_list;
}
void OAIAmfStatusInfo::setGuamiList(const QList<OAIGuami> &guami_list) {
    this->guami_list = guami_list;
    this->m_guami_list_isSet = true;
}

bool OAIAmfStatusInfo::is_guami_list_Set() const{
    return m_guami_list_isSet;
}

bool OAIAmfStatusInfo::is_guami_list_Valid() const{
    return m_guami_list_isValid;
}

OAIStatusChange OAIAmfStatusInfo::getStatusChange() const {
    return status_change;
}
void OAIAmfStatusInfo::setStatusChange(const OAIStatusChange &status_change) {
    this->status_change = status_change;
    this->m_status_change_isSet = true;
}

bool OAIAmfStatusInfo::is_status_change_Set() const{
    return m_status_change_isSet;
}

bool OAIAmfStatusInfo::is_status_change_Valid() const{
    return m_status_change_isValid;
}

QString OAIAmfStatusInfo::getTargetAmfRemoval() const {
    return target_amf_removal;
}
void OAIAmfStatusInfo::setTargetAmfRemoval(const QString &target_amf_removal) {
    this->target_amf_removal = target_amf_removal;
    this->m_target_amf_removal_isSet = true;
}

bool OAIAmfStatusInfo::is_target_amf_removal_Set() const{
    return m_target_amf_removal_isSet;
}

bool OAIAmfStatusInfo::is_target_amf_removal_Valid() const{
    return m_target_amf_removal_isValid;
}

QString OAIAmfStatusInfo::getTargetAmfFailure() const {
    return target_amf_failure;
}
void OAIAmfStatusInfo::setTargetAmfFailure(const QString &target_amf_failure) {
    this->target_amf_failure = target_amf_failure;
    this->m_target_amf_failure_isSet = true;
}

bool OAIAmfStatusInfo::is_target_amf_failure_Set() const{
    return m_target_amf_failure_isSet;
}

bool OAIAmfStatusInfo::is_target_amf_failure_Valid() const{
    return m_target_amf_failure_isValid;
}

bool OAIAmfStatusInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (guami_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (status_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_amf_removal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_amf_failure_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmfStatusInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_guami_list_isValid && m_status_change_isValid && true;
}

} // namespace OpenAPI
