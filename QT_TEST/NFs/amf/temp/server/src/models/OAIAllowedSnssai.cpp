/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllowedSnssai.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllowedSnssai::OAIAllowedSnssai(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllowedSnssai::OAIAllowedSnssai() {
    this->initializeModel();
}

OAIAllowedSnssai::~OAIAllowedSnssai() {}

void OAIAllowedSnssai::initializeModel() {

    m_allowed_snssai_isSet = false;
    m_allowed_snssai_isValid = false;

    m_nsi_information_list_isSet = false;
    m_nsi_information_list_isValid = false;

    m_mapped_home_snssai_isSet = false;
    m_mapped_home_snssai_isValid = false;
}

void OAIAllowedSnssai::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllowedSnssai::fromJsonObject(QJsonObject json) {

    m_allowed_snssai_isValid = ::OpenAPI::fromJsonValue(allowed_snssai, json[QString("allowedSnssai")]);
    m_allowed_snssai_isSet = !json[QString("allowedSnssai")].isNull() && m_allowed_snssai_isValid;

    m_nsi_information_list_isValid = ::OpenAPI::fromJsonValue(nsi_information_list, json[QString("nsiInformationList")]);
    m_nsi_information_list_isSet = !json[QString("nsiInformationList")].isNull() && m_nsi_information_list_isValid;

    m_mapped_home_snssai_isValid = ::OpenAPI::fromJsonValue(mapped_home_snssai, json[QString("mappedHomeSnssai")]);
    m_mapped_home_snssai_isSet = !json[QString("mappedHomeSnssai")].isNull() && m_mapped_home_snssai_isValid;
}

QString OAIAllowedSnssai::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllowedSnssai::asJsonObject() const {
    QJsonObject obj;
    if (allowed_snssai.isSet()) {
        obj.insert(QString("allowedSnssai"), ::OpenAPI::toJsonValue(allowed_snssai));
    }
    if (nsi_information_list.size() > 0) {
        obj.insert(QString("nsiInformationList"), ::OpenAPI::toJsonValue(nsi_information_list));
    }
    if (mapped_home_snssai.isSet()) {
        obj.insert(QString("mappedHomeSnssai"), ::OpenAPI::toJsonValue(mapped_home_snssai));
    }
    return obj;
}

OAISnssai OAIAllowedSnssai::getAllowedSnssai() const {
    return allowed_snssai;
}
void OAIAllowedSnssai::setAllowedSnssai(const OAISnssai &allowed_snssai) {
    this->allowed_snssai = allowed_snssai;
    this->m_allowed_snssai_isSet = true;
}

bool OAIAllowedSnssai::is_allowed_snssai_Set() const{
    return m_allowed_snssai_isSet;
}

bool OAIAllowedSnssai::is_allowed_snssai_Valid() const{
    return m_allowed_snssai_isValid;
}

QList<OAINsiInformation> OAIAllowedSnssai::getNsiInformationList() const {
    return nsi_information_list;
}
void OAIAllowedSnssai::setNsiInformationList(const QList<OAINsiInformation> &nsi_information_list) {
    this->nsi_information_list = nsi_information_list;
    this->m_nsi_information_list_isSet = true;
}

bool OAIAllowedSnssai::is_nsi_information_list_Set() const{
    return m_nsi_information_list_isSet;
}

bool OAIAllowedSnssai::is_nsi_information_list_Valid() const{
    return m_nsi_information_list_isValid;
}

OAISnssai OAIAllowedSnssai::getMappedHomeSnssai() const {
    return mapped_home_snssai;
}
void OAIAllowedSnssai::setMappedHomeSnssai(const OAISnssai &mapped_home_snssai) {
    this->mapped_home_snssai = mapped_home_snssai;
    this->m_mapped_home_snssai_isSet = true;
}

bool OAIAllowedSnssai::is_mapped_home_snssai_Set() const{
    return m_mapped_home_snssai_isSet;
}

bool OAIAllowedSnssai::is_mapped_home_snssai_Valid() const{
    return m_mapped_home_snssai_isValid;
}

bool OAIAllowedSnssai::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (allowed_snssai.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (nsi_information_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (mapped_home_snssai.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllowedSnssai::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allowed_snssai_isValid && true;
}

} // namespace OpenAPI
