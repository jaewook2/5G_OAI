/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeafData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeafData::OAISeafData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeafData::OAISeafData() {
    this->initializeModel();
}

OAISeafData::~OAISeafData() {}

void OAISeafData::initializeModel() {

    m_ng_ksi_isSet = false;
    m_ng_ksi_isValid = false;

    m_key_amf_isSet = false;
    m_key_amf_isValid = false;

    m_nh_isSet = false;
    m_nh_isValid = false;

    m_ncc_isSet = false;
    m_ncc_isValid = false;

    m_key_amf_change_ind_isSet = false;
    m_key_amf_change_ind_isValid = false;

    m_key_amf_h_derivation_ind_isSet = false;
    m_key_amf_h_derivation_ind_isValid = false;
}

void OAISeafData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeafData::fromJsonObject(QJsonObject json) {

    m_ng_ksi_isValid = ::OpenAPI::fromJsonValue(ng_ksi, json[QString("ngKsi")]);
    m_ng_ksi_isSet = !json[QString("ngKsi")].isNull() && m_ng_ksi_isValid;

    m_key_amf_isValid = ::OpenAPI::fromJsonValue(key_amf, json[QString("keyAmf")]);
    m_key_amf_isSet = !json[QString("keyAmf")].isNull() && m_key_amf_isValid;

    m_nh_isValid = ::OpenAPI::fromJsonValue(nh, json[QString("nh")]);
    m_nh_isSet = !json[QString("nh")].isNull() && m_nh_isValid;

    m_ncc_isValid = ::OpenAPI::fromJsonValue(ncc, json[QString("ncc")]);
    m_ncc_isSet = !json[QString("ncc")].isNull() && m_ncc_isValid;

    m_key_amf_change_ind_isValid = ::OpenAPI::fromJsonValue(key_amf_change_ind, json[QString("keyAmfChangeInd")]);
    m_key_amf_change_ind_isSet = !json[QString("keyAmfChangeInd")].isNull() && m_key_amf_change_ind_isValid;

    m_key_amf_h_derivation_ind_isValid = ::OpenAPI::fromJsonValue(key_amf_h_derivation_ind, json[QString("keyAmfHDerivationInd")]);
    m_key_amf_h_derivation_ind_isSet = !json[QString("keyAmfHDerivationInd")].isNull() && m_key_amf_h_derivation_ind_isValid;
}

QString OAISeafData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeafData::asJsonObject() const {
    QJsonObject obj;
    if (ng_ksi.isSet()) {
        obj.insert(QString("ngKsi"), ::OpenAPI::toJsonValue(ng_ksi));
    }
    if (key_amf.isSet()) {
        obj.insert(QString("keyAmf"), ::OpenAPI::toJsonValue(key_amf));
    }
    if (m_nh_isSet) {
        obj.insert(QString("nh"), ::OpenAPI::toJsonValue(nh));
    }
    if (m_ncc_isSet) {
        obj.insert(QString("ncc"), ::OpenAPI::toJsonValue(ncc));
    }
    if (m_key_amf_change_ind_isSet) {
        obj.insert(QString("keyAmfChangeInd"), ::OpenAPI::toJsonValue(key_amf_change_ind));
    }
    if (m_key_amf_h_derivation_ind_isSet) {
        obj.insert(QString("keyAmfHDerivationInd"), ::OpenAPI::toJsonValue(key_amf_h_derivation_ind));
    }
    return obj;
}

OAINgKsi OAISeafData::getNgKsi() const {
    return ng_ksi;
}
void OAISeafData::setNgKsi(const OAINgKsi &ng_ksi) {
    this->ng_ksi = ng_ksi;
    this->m_ng_ksi_isSet = true;
}

bool OAISeafData::is_ng_ksi_Set() const{
    return m_ng_ksi_isSet;
}

bool OAISeafData::is_ng_ksi_Valid() const{
    return m_ng_ksi_isValid;
}

OAIKeyAmf OAISeafData::getKeyAmf() const {
    return key_amf;
}
void OAISeafData::setKeyAmf(const OAIKeyAmf &key_amf) {
    this->key_amf = key_amf;
    this->m_key_amf_isSet = true;
}

bool OAISeafData::is_key_amf_Set() const{
    return m_key_amf_isSet;
}

bool OAISeafData::is_key_amf_Valid() const{
    return m_key_amf_isValid;
}

QString OAISeafData::getNh() const {
    return nh;
}
void OAISeafData::setNh(const QString &nh) {
    this->nh = nh;
    this->m_nh_isSet = true;
}

bool OAISeafData::is_nh_Set() const{
    return m_nh_isSet;
}

bool OAISeafData::is_nh_Valid() const{
    return m_nh_isValid;
}

qint32 OAISeafData::getNcc() const {
    return ncc;
}
void OAISeafData::setNcc(const qint32 &ncc) {
    this->ncc = ncc;
    this->m_ncc_isSet = true;
}

bool OAISeafData::is_ncc_Set() const{
    return m_ncc_isSet;
}

bool OAISeafData::is_ncc_Valid() const{
    return m_ncc_isValid;
}

bool OAISeafData::isKeyAmfChangeInd() const {
    return key_amf_change_ind;
}
void OAISeafData::setKeyAmfChangeInd(const bool &key_amf_change_ind) {
    this->key_amf_change_ind = key_amf_change_ind;
    this->m_key_amf_change_ind_isSet = true;
}

bool OAISeafData::is_key_amf_change_ind_Set() const{
    return m_key_amf_change_ind_isSet;
}

bool OAISeafData::is_key_amf_change_ind_Valid() const{
    return m_key_amf_change_ind_isValid;
}

bool OAISeafData::isKeyAmfHDerivationInd() const {
    return key_amf_h_derivation_ind;
}
void OAISeafData::setKeyAmfHDerivationInd(const bool &key_amf_h_derivation_ind) {
    this->key_amf_h_derivation_ind = key_amf_h_derivation_ind;
    this->m_key_amf_h_derivation_ind_isSet = true;
}

bool OAISeafData::is_key_amf_h_derivation_ind_Set() const{
    return m_key_amf_h_derivation_ind_isSet;
}

bool OAISeafData::is_key_amf_h_derivation_ind_Valid() const{
    return m_key_amf_h_derivation_ind_isValid;
}

bool OAISeafData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (ng_ksi.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (key_amf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ncc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_amf_change_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_amf_h_derivation_ind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeafData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ng_ksi_isValid && m_key_amf_isValid && true;
}

} // namespace OpenAPI
