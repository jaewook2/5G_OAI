/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmfEventArea.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmfEventArea::OAIAmfEventArea(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmfEventArea::OAIAmfEventArea() {
    this->initializeModel();
}

OAIAmfEventArea::~OAIAmfEventArea() {}

void OAIAmfEventArea::initializeModel() {

    m_presence_info_isSet = false;
    m_presence_info_isValid = false;

    m_ladn_info_isSet = false;
    m_ladn_info_isValid = false;

    m_s_nssai_isSet = false;
    m_s_nssai_isValid = false;

    m_nsi_id_isSet = false;
    m_nsi_id_isValid = false;
}

void OAIAmfEventArea::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmfEventArea::fromJsonObject(QJsonObject json) {

    m_presence_info_isValid = ::OpenAPI::fromJsonValue(presence_info, json[QString("presenceInfo")]);
    m_presence_info_isSet = !json[QString("presenceInfo")].isNull() && m_presence_info_isValid;

    m_ladn_info_isValid = ::OpenAPI::fromJsonValue(ladn_info, json[QString("ladnInfo")]);
    m_ladn_info_isSet = !json[QString("ladnInfo")].isNull() && m_ladn_info_isValid;

    m_s_nssai_isValid = ::OpenAPI::fromJsonValue(s_nssai, json[QString("sNssai")]);
    m_s_nssai_isSet = !json[QString("sNssai")].isNull() && m_s_nssai_isValid;

    m_nsi_id_isValid = ::OpenAPI::fromJsonValue(nsi_id, json[QString("nsiId")]);
    m_nsi_id_isSet = !json[QString("nsiId")].isNull() && m_nsi_id_isValid;
}

QString OAIAmfEventArea::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmfEventArea::asJsonObject() const {
    QJsonObject obj;
    if (presence_info.isSet()) {
        obj.insert(QString("presenceInfo"), ::OpenAPI::toJsonValue(presence_info));
    }
    if (ladn_info.isSet()) {
        obj.insert(QString("ladnInfo"), ::OpenAPI::toJsonValue(ladn_info));
    }
    if (s_nssai.isSet()) {
        obj.insert(QString("sNssai"), ::OpenAPI::toJsonValue(s_nssai));
    }
    if (m_nsi_id_isSet) {
        obj.insert(QString("nsiId"), ::OpenAPI::toJsonValue(nsi_id));
    }
    return obj;
}

OAIPresenceInfo OAIAmfEventArea::getPresenceInfo() const {
    return presence_info;
}
void OAIAmfEventArea::setPresenceInfo(const OAIPresenceInfo &presence_info) {
    this->presence_info = presence_info;
    this->m_presence_info_isSet = true;
}

bool OAIAmfEventArea::is_presence_info_Set() const{
    return m_presence_info_isSet;
}

bool OAIAmfEventArea::is_presence_info_Valid() const{
    return m_presence_info_isValid;
}

OAILadnInfo OAIAmfEventArea::getLadnInfo() const {
    return ladn_info;
}
void OAIAmfEventArea::setLadnInfo(const OAILadnInfo &ladn_info) {
    this->ladn_info = ladn_info;
    this->m_ladn_info_isSet = true;
}

bool OAIAmfEventArea::is_ladn_info_Set() const{
    return m_ladn_info_isSet;
}

bool OAIAmfEventArea::is_ladn_info_Valid() const{
    return m_ladn_info_isValid;
}

OAISnssai OAIAmfEventArea::getSNssai() const {
    return s_nssai;
}
void OAIAmfEventArea::setSNssai(const OAISnssai &s_nssai) {
    this->s_nssai = s_nssai;
    this->m_s_nssai_isSet = true;
}

bool OAIAmfEventArea::is_s_nssai_Set() const{
    return m_s_nssai_isSet;
}

bool OAIAmfEventArea::is_s_nssai_Valid() const{
    return m_s_nssai_isValid;
}

QString OAIAmfEventArea::getNsiId() const {
    return nsi_id;
}
void OAIAmfEventArea::setNsiId(const QString &nsi_id) {
    this->nsi_id = nsi_id;
    this->m_nsi_id_isSet = true;
}

bool OAIAmfEventArea::is_nsi_id_Set() const{
    return m_nsi_id_isSet;
}

bool OAIAmfEventArea::is_nsi_id_Valid() const{
    return m_nsi_id_isValid;
}

bool OAIAmfEventArea::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (presence_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (ladn_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (s_nssai.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsi_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmfEventArea::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
