/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMoExpDataCounter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMoExpDataCounter::OAIMoExpDataCounter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMoExpDataCounter::OAIMoExpDataCounter() {
    this->initializeModel();
}

OAIMoExpDataCounter::~OAIMoExpDataCounter() {}

void OAIMoExpDataCounter::initializeModel() {

    m_counter_isSet = false;
    m_counter_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;
}

void OAIMoExpDataCounter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMoExpDataCounter::fromJsonObject(QJsonObject json) {

    m_counter_isValid = ::OpenAPI::fromJsonValue(counter, json[QString("counter")]);
    m_counter_isSet = !json[QString("counter")].isNull() && m_counter_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(time_stamp, json[QString("timeStamp")]);
    m_time_stamp_isSet = !json[QString("timeStamp")].isNull() && m_time_stamp_isValid;
}

QString OAIMoExpDataCounter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMoExpDataCounter::asJsonObject() const {
    QJsonObject obj;
    if (m_counter_isSet) {
        obj.insert(QString("counter"), ::OpenAPI::toJsonValue(counter));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("timeStamp"), ::OpenAPI::toJsonValue(time_stamp));
    }
    return obj;
}

qint32 OAIMoExpDataCounter::getCounter() const {
    return counter;
}
void OAIMoExpDataCounter::setCounter(const qint32 &counter) {
    this->counter = counter;
    this->m_counter_isSet = true;
}

bool OAIMoExpDataCounter::is_counter_Set() const{
    return m_counter_isSet;
}

bool OAIMoExpDataCounter::is_counter_Valid() const{
    return m_counter_isValid;
}

QDateTime OAIMoExpDataCounter::getTimeStamp() const {
    return time_stamp;
}
void OAIMoExpDataCounter::setTimeStamp(const QDateTime &time_stamp) {
    this->time_stamp = time_stamp;
    this->m_time_stamp_isSet = true;
}

bool OAIMoExpDataCounter::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIMoExpDataCounter::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

bool OAIMoExpDataCounter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMoExpDataCounter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_counter_isValid && true;
}

} // namespace OpenAPI
