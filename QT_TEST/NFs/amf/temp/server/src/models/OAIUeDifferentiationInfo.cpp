/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUeDifferentiationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUeDifferentiationInfo::OAIUeDifferentiationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUeDifferentiationInfo::OAIUeDifferentiationInfo() {
    this->initializeModel();
}

OAIUeDifferentiationInfo::~OAIUeDifferentiationInfo() {}

void OAIUeDifferentiationInfo::initializeModel() {

    m_periodic_com_ind_isSet = false;
    m_periodic_com_ind_isValid = false;

    m_periodic_time_isSet = false;
    m_periodic_time_isValid = false;

    m_scheduled_com_time_isSet = false;
    m_scheduled_com_time_isValid = false;

    m_stationary_ind_isSet = false;
    m_stationary_ind_isValid = false;

    m_traffic_profile_isSet = false;
    m_traffic_profile_isValid = false;

    m_battery_ind_isSet = false;
    m_battery_ind_isValid = false;

    m_validity_time_isSet = false;
    m_validity_time_isValid = false;
}

void OAIUeDifferentiationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUeDifferentiationInfo::fromJsonObject(QJsonObject json) {

    m_periodic_com_ind_isValid = ::OpenAPI::fromJsonValue(periodic_com_ind, json[QString("periodicComInd")]);
    m_periodic_com_ind_isSet = !json[QString("periodicComInd")].isNull() && m_periodic_com_ind_isValid;

    m_periodic_time_isValid = ::OpenAPI::fromJsonValue(periodic_time, json[QString("periodicTime")]);
    m_periodic_time_isSet = !json[QString("periodicTime")].isNull() && m_periodic_time_isValid;

    m_scheduled_com_time_isValid = ::OpenAPI::fromJsonValue(scheduled_com_time, json[QString("scheduledComTime")]);
    m_scheduled_com_time_isSet = !json[QString("scheduledComTime")].isNull() && m_scheduled_com_time_isValid;

    m_stationary_ind_isValid = ::OpenAPI::fromJsonValue(stationary_ind, json[QString("stationaryInd")]);
    m_stationary_ind_isSet = !json[QString("stationaryInd")].isNull() && m_stationary_ind_isValid;

    m_traffic_profile_isValid = ::OpenAPI::fromJsonValue(traffic_profile, json[QString("trafficProfile")]);
    m_traffic_profile_isSet = !json[QString("trafficProfile")].isNull() && m_traffic_profile_isValid;

    m_battery_ind_isValid = ::OpenAPI::fromJsonValue(battery_ind, json[QString("batteryInd")]);
    m_battery_ind_isSet = !json[QString("batteryInd")].isNull() && m_battery_ind_isValid;

    m_validity_time_isValid = ::OpenAPI::fromJsonValue(validity_time, json[QString("validityTime")]);
    m_validity_time_isSet = !json[QString("validityTime")].isNull() && m_validity_time_isValid;
}

QString OAIUeDifferentiationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUeDifferentiationInfo::asJsonObject() const {
    QJsonObject obj;
    if (periodic_com_ind.isSet()) {
        obj.insert(QString("periodicComInd"), ::OpenAPI::toJsonValue(periodic_com_ind));
    }
    if (m_periodic_time_isSet) {
        obj.insert(QString("periodicTime"), ::OpenAPI::toJsonValue(periodic_time));
    }
    if (scheduled_com_time.isSet()) {
        obj.insert(QString("scheduledComTime"), ::OpenAPI::toJsonValue(scheduled_com_time));
    }
    if (stationary_ind.isSet()) {
        obj.insert(QString("stationaryInd"), ::OpenAPI::toJsonValue(stationary_ind));
    }
    if (traffic_profile.isSet()) {
        obj.insert(QString("trafficProfile"), ::OpenAPI::toJsonValue(traffic_profile));
    }
    if (battery_ind.isSet()) {
        obj.insert(QString("batteryInd"), ::OpenAPI::toJsonValue(battery_ind));
    }
    if (m_validity_time_isSet) {
        obj.insert(QString("validityTime"), ::OpenAPI::toJsonValue(validity_time));
    }
    return obj;
}

OAIPeriodicCommunicationIndicator OAIUeDifferentiationInfo::getPeriodicComInd() const {
    return periodic_com_ind;
}
void OAIUeDifferentiationInfo::setPeriodicComInd(const OAIPeriodicCommunicationIndicator &periodic_com_ind) {
    this->periodic_com_ind = periodic_com_ind;
    this->m_periodic_com_ind_isSet = true;
}

bool OAIUeDifferentiationInfo::is_periodic_com_ind_Set() const{
    return m_periodic_com_ind_isSet;
}

bool OAIUeDifferentiationInfo::is_periodic_com_ind_Valid() const{
    return m_periodic_com_ind_isValid;
}

qint32 OAIUeDifferentiationInfo::getPeriodicTime() const {
    return periodic_time;
}
void OAIUeDifferentiationInfo::setPeriodicTime(const qint32 &periodic_time) {
    this->periodic_time = periodic_time;
    this->m_periodic_time_isSet = true;
}

bool OAIUeDifferentiationInfo::is_periodic_time_Set() const{
    return m_periodic_time_isSet;
}

bool OAIUeDifferentiationInfo::is_periodic_time_Valid() const{
    return m_periodic_time_isValid;
}

OAIScheduledCommunicationTime OAIUeDifferentiationInfo::getScheduledComTime() const {
    return scheduled_com_time;
}
void OAIUeDifferentiationInfo::setScheduledComTime(const OAIScheduledCommunicationTime &scheduled_com_time) {
    this->scheduled_com_time = scheduled_com_time;
    this->m_scheduled_com_time_isSet = true;
}

bool OAIUeDifferentiationInfo::is_scheduled_com_time_Set() const{
    return m_scheduled_com_time_isSet;
}

bool OAIUeDifferentiationInfo::is_scheduled_com_time_Valid() const{
    return m_scheduled_com_time_isValid;
}

OAIStationaryIndication OAIUeDifferentiationInfo::getStationaryInd() const {
    return stationary_ind;
}
void OAIUeDifferentiationInfo::setStationaryInd(const OAIStationaryIndication &stationary_ind) {
    this->stationary_ind = stationary_ind;
    this->m_stationary_ind_isSet = true;
}

bool OAIUeDifferentiationInfo::is_stationary_ind_Set() const{
    return m_stationary_ind_isSet;
}

bool OAIUeDifferentiationInfo::is_stationary_ind_Valid() const{
    return m_stationary_ind_isValid;
}

OAITrafficProfile OAIUeDifferentiationInfo::getTrafficProfile() const {
    return traffic_profile;
}
void OAIUeDifferentiationInfo::setTrafficProfile(const OAITrafficProfile &traffic_profile) {
    this->traffic_profile = traffic_profile;
    this->m_traffic_profile_isSet = true;
}

bool OAIUeDifferentiationInfo::is_traffic_profile_Set() const{
    return m_traffic_profile_isSet;
}

bool OAIUeDifferentiationInfo::is_traffic_profile_Valid() const{
    return m_traffic_profile_isValid;
}

OAIBatteryIndication OAIUeDifferentiationInfo::getBatteryInd() const {
    return battery_ind;
}
void OAIUeDifferentiationInfo::setBatteryInd(const OAIBatteryIndication &battery_ind) {
    this->battery_ind = battery_ind;
    this->m_battery_ind_isSet = true;
}

bool OAIUeDifferentiationInfo::is_battery_ind_Set() const{
    return m_battery_ind_isSet;
}

bool OAIUeDifferentiationInfo::is_battery_ind_Valid() const{
    return m_battery_ind_isValid;
}

QDateTime OAIUeDifferentiationInfo::getValidityTime() const {
    return validity_time;
}
void OAIUeDifferentiationInfo::setValidityTime(const QDateTime &validity_time) {
    this->validity_time = validity_time;
    this->m_validity_time_isSet = true;
}

bool OAIUeDifferentiationInfo::is_validity_time_Set() const{
    return m_validity_time_isSet;
}

bool OAIUeDifferentiationInfo::is_validity_time_Valid() const{
    return m_validity_time_isValid;
}

bool OAIUeDifferentiationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (periodic_com_ind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_periodic_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (scheduled_com_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (stationary_ind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (traffic_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (battery_ind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUeDifferentiationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
