/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIN2InformationTransferReqData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIN2InformationTransferReqData::OAIN2InformationTransferReqData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIN2InformationTransferReqData::OAIN2InformationTransferReqData() {
    this->initializeModel();
}

OAIN2InformationTransferReqData::~OAIN2InformationTransferReqData() {}

void OAIN2InformationTransferReqData::initializeModel() {

    m_tai_list_isSet = false;
    m_tai_list_isValid = false;

    m_rat_selector_isSet = false;
    m_rat_selector_isValid = false;

    m_global_ran_node_list_isSet = false;
    m_global_ran_node_list_isValid = false;

    m_n2_information_isSet = false;
    m_n2_information_isValid = false;

    m_supported_features_isSet = false;
    m_supported_features_isValid = false;
}

void OAIN2InformationTransferReqData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIN2InformationTransferReqData::fromJsonObject(QJsonObject json) {

    m_tai_list_isValid = ::OpenAPI::fromJsonValue(tai_list, json[QString("taiList")]);
    m_tai_list_isSet = !json[QString("taiList")].isNull() && m_tai_list_isValid;

    m_rat_selector_isValid = ::OpenAPI::fromJsonValue(rat_selector, json[QString("ratSelector")]);
    m_rat_selector_isSet = !json[QString("ratSelector")].isNull() && m_rat_selector_isValid;

    m_global_ran_node_list_isValid = ::OpenAPI::fromJsonValue(global_ran_node_list, json[QString("globalRanNodeList")]);
    m_global_ran_node_list_isSet = !json[QString("globalRanNodeList")].isNull() && m_global_ran_node_list_isValid;

    m_n2_information_isValid = ::OpenAPI::fromJsonValue(n2_information, json[QString("n2Information")]);
    m_n2_information_isSet = !json[QString("n2Information")].isNull() && m_n2_information_isValid;

    m_supported_features_isValid = ::OpenAPI::fromJsonValue(supported_features, json[QString("supportedFeatures")]);
    m_supported_features_isSet = !json[QString("supportedFeatures")].isNull() && m_supported_features_isValid;
}

QString OAIN2InformationTransferReqData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIN2InformationTransferReqData::asJsonObject() const {
    QJsonObject obj;
    if (tai_list.size() > 0) {
        obj.insert(QString("taiList"), ::OpenAPI::toJsonValue(tai_list));
    }
    if (rat_selector.isSet()) {
        obj.insert(QString("ratSelector"), ::OpenAPI::toJsonValue(rat_selector));
    }
    if (global_ran_node_list.size() > 0) {
        obj.insert(QString("globalRanNodeList"), ::OpenAPI::toJsonValue(global_ran_node_list));
    }
    if (n2_information.isSet()) {
        obj.insert(QString("n2Information"), ::OpenAPI::toJsonValue(n2_information));
    }
    if (m_supported_features_isSet) {
        obj.insert(QString("supportedFeatures"), ::OpenAPI::toJsonValue(supported_features));
    }
    return obj;
}

QList<OAITai> OAIN2InformationTransferReqData::getTaiList() const {
    return tai_list;
}
void OAIN2InformationTransferReqData::setTaiList(const QList<OAITai> &tai_list) {
    this->tai_list = tai_list;
    this->m_tai_list_isSet = true;
}

bool OAIN2InformationTransferReqData::is_tai_list_Set() const{
    return m_tai_list_isSet;
}

bool OAIN2InformationTransferReqData::is_tai_list_Valid() const{
    return m_tai_list_isValid;
}

OAIRatSelector OAIN2InformationTransferReqData::getRatSelector() const {
    return rat_selector;
}
void OAIN2InformationTransferReqData::setRatSelector(const OAIRatSelector &rat_selector) {
    this->rat_selector = rat_selector;
    this->m_rat_selector_isSet = true;
}

bool OAIN2InformationTransferReqData::is_rat_selector_Set() const{
    return m_rat_selector_isSet;
}

bool OAIN2InformationTransferReqData::is_rat_selector_Valid() const{
    return m_rat_selector_isValid;
}

QList<OAIGlobalRanNodeId> OAIN2InformationTransferReqData::getGlobalRanNodeList() const {
    return global_ran_node_list;
}
void OAIN2InformationTransferReqData::setGlobalRanNodeList(const QList<OAIGlobalRanNodeId> &global_ran_node_list) {
    this->global_ran_node_list = global_ran_node_list;
    this->m_global_ran_node_list_isSet = true;
}

bool OAIN2InformationTransferReqData::is_global_ran_node_list_Set() const{
    return m_global_ran_node_list_isSet;
}

bool OAIN2InformationTransferReqData::is_global_ran_node_list_Valid() const{
    return m_global_ran_node_list_isValid;
}

OAIN2InfoContainer OAIN2InformationTransferReqData::getN2Information() const {
    return n2_information;
}
void OAIN2InformationTransferReqData::setN2Information(const OAIN2InfoContainer &n2_information) {
    this->n2_information = n2_information;
    this->m_n2_information_isSet = true;
}

bool OAIN2InformationTransferReqData::is_n2_information_Set() const{
    return m_n2_information_isSet;
}

bool OAIN2InformationTransferReqData::is_n2_information_Valid() const{
    return m_n2_information_isValid;
}

QString OAIN2InformationTransferReqData::getSupportedFeatures() const {
    return supported_features;
}
void OAIN2InformationTransferReqData::setSupportedFeatures(const QString &supported_features) {
    this->supported_features = supported_features;
    this->m_supported_features_isSet = true;
}

bool OAIN2InformationTransferReqData::is_supported_features_Set() const{
    return m_supported_features_isSet;
}

bool OAIN2InformationTransferReqData::is_supported_features_Valid() const{
    return m_supported_features_isValid;
}

bool OAIN2InformationTransferReqData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (tai_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (rat_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (global_ran_node_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (n2_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_features_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIN2InformationTransferReqData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_n2_information_isValid && true;
}

} // namespace OpenAPI
