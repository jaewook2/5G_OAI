/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEcRestrictionDataWb.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEcRestrictionDataWb::OAIEcRestrictionDataWb(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEcRestrictionDataWb::OAIEcRestrictionDataWb() {
    this->initializeModel();
}

OAIEcRestrictionDataWb::~OAIEcRestrictionDataWb() {}

void OAIEcRestrictionDataWb::initializeModel() {

    m_ec_mode_a_restricted_isSet = false;
    m_ec_mode_a_restricted_isValid = false;

    m_ec_mode_b_restricted_isSet = false;
    m_ec_mode_b_restricted_isValid = false;
}

void OAIEcRestrictionDataWb::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEcRestrictionDataWb::fromJsonObject(QJsonObject json) {

    m_ec_mode_a_restricted_isValid = ::OpenAPI::fromJsonValue(ec_mode_a_restricted, json[QString("ecModeARestricted")]);
    m_ec_mode_a_restricted_isSet = !json[QString("ecModeARestricted")].isNull() && m_ec_mode_a_restricted_isValid;

    m_ec_mode_b_restricted_isValid = ::OpenAPI::fromJsonValue(ec_mode_b_restricted, json[QString("ecModeBRestricted")]);
    m_ec_mode_b_restricted_isSet = !json[QString("ecModeBRestricted")].isNull() && m_ec_mode_b_restricted_isValid;
}

QString OAIEcRestrictionDataWb::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEcRestrictionDataWb::asJsonObject() const {
    QJsonObject obj;
    if (m_ec_mode_a_restricted_isSet) {
        obj.insert(QString("ecModeARestricted"), ::OpenAPI::toJsonValue(ec_mode_a_restricted));
    }
    if (m_ec_mode_b_restricted_isSet) {
        obj.insert(QString("ecModeBRestricted"), ::OpenAPI::toJsonValue(ec_mode_b_restricted));
    }
    return obj;
}

bool OAIEcRestrictionDataWb::isEcModeARestricted() const {
    return ec_mode_a_restricted;
}
void OAIEcRestrictionDataWb::setEcModeARestricted(const bool &ec_mode_a_restricted) {
    this->ec_mode_a_restricted = ec_mode_a_restricted;
    this->m_ec_mode_a_restricted_isSet = true;
}

bool OAIEcRestrictionDataWb::is_ec_mode_a_restricted_Set() const{
    return m_ec_mode_a_restricted_isSet;
}

bool OAIEcRestrictionDataWb::is_ec_mode_a_restricted_Valid() const{
    return m_ec_mode_a_restricted_isValid;
}

bool OAIEcRestrictionDataWb::isEcModeBRestricted() const {
    return ec_mode_b_restricted;
}
void OAIEcRestrictionDataWb::setEcModeBRestricted(const bool &ec_mode_b_restricted) {
    this->ec_mode_b_restricted = ec_mode_b_restricted;
    this->m_ec_mode_b_restricted_isSet = true;
}

bool OAIEcRestrictionDataWb::is_ec_mode_b_restricted_Set() const{
    return m_ec_mode_b_restricted_isSet;
}

bool OAIEcRestrictionDataWb::is_ec_mode_b_restricted_Valid() const{
    return m_ec_mode_b_restricted_isValid;
}

bool OAIEcRestrictionDataWb::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ec_mode_a_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec_mode_b_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEcRestrictionDataWb::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ec_mode_b_restricted_isValid && true;
}

} // namespace OpenAPI
