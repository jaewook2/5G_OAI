/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPduSessionContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPduSessionContext::OAIPduSessionContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPduSessionContext::OAIPduSessionContext() {
    this->initializeModel();
}

OAIPduSessionContext::~OAIPduSessionContext() {}

void OAIPduSessionContext::initializeModel() {

    m_pdu_session_id_isSet = false;
    m_pdu_session_id_isValid = false;

    m_sm_context_ref_isSet = false;
    m_sm_context_ref_isValid = false;

    m_s_nssai_isSet = false;
    m_s_nssai_isValid = false;

    m_dnn_isSet = false;
    m_dnn_isValid = false;

    m_selected_dnn_isSet = false;
    m_selected_dnn_isValid = false;

    m_access_type_isSet = false;
    m_access_type_isValid = false;

    m_additional_access_type_isSet = false;
    m_additional_access_type_isValid = false;

    m_allocated_ebi_list_isSet = false;
    m_allocated_ebi_list_isValid = false;

    m_hsmf_id_isSet = false;
    m_hsmf_id_isValid = false;

    m_hsmf_set_id_isSet = false;
    m_hsmf_set_id_isValid = false;

    m_hsmf_service_set_id_isSet = false;
    m_hsmf_service_set_id_isValid = false;

    m_smf_binding_isSet = false;
    m_smf_binding_isValid = false;

    m_vsmf_id_isSet = false;
    m_vsmf_id_isValid = false;

    m_vsmf_set_id_isSet = false;
    m_vsmf_set_id_isValid = false;

    m_vsmf_service_set_id_isSet = false;
    m_vsmf_service_set_id_isValid = false;

    m_vsmf_binding_isSet = false;
    m_vsmf_binding_isValid = false;

    m_ismf_id_isSet = false;
    m_ismf_id_isValid = false;

    m_ismf_set_id_isSet = false;
    m_ismf_set_id_isValid = false;

    m_ismf_service_set_id_isSet = false;
    m_ismf_service_set_id_isValid = false;

    m_ismf_binding_isSet = false;
    m_ismf_binding_isValid = false;

    m_ns_instance_isSet = false;
    m_ns_instance_isValid = false;

    m_smf_service_instance_id_isSet = false;
    m_smf_service_instance_id_isValid = false;

    m_ma_pdu_session_isSet = false;
    m_ma_pdu_session_isValid = false;

    m_cn_assisted_ran_para_isSet = false;
    m_cn_assisted_ran_para_isValid = false;
}

void OAIPduSessionContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPduSessionContext::fromJsonObject(QJsonObject json) {

    m_pdu_session_id_isValid = ::OpenAPI::fromJsonValue(pdu_session_id, json[QString("pduSessionId")]);
    m_pdu_session_id_isSet = !json[QString("pduSessionId")].isNull() && m_pdu_session_id_isValid;

    m_sm_context_ref_isValid = ::OpenAPI::fromJsonValue(sm_context_ref, json[QString("smContextRef")]);
    m_sm_context_ref_isSet = !json[QString("smContextRef")].isNull() && m_sm_context_ref_isValid;

    m_s_nssai_isValid = ::OpenAPI::fromJsonValue(s_nssai, json[QString("sNssai")]);
    m_s_nssai_isSet = !json[QString("sNssai")].isNull() && m_s_nssai_isValid;

    m_dnn_isValid = ::OpenAPI::fromJsonValue(dnn, json[QString("dnn")]);
    m_dnn_isSet = !json[QString("dnn")].isNull() && m_dnn_isValid;

    m_selected_dnn_isValid = ::OpenAPI::fromJsonValue(selected_dnn, json[QString("selectedDnn")]);
    m_selected_dnn_isSet = !json[QString("selectedDnn")].isNull() && m_selected_dnn_isValid;

    m_access_type_isValid = ::OpenAPI::fromJsonValue(access_type, json[QString("accessType")]);
    m_access_type_isSet = !json[QString("accessType")].isNull() && m_access_type_isValid;

    m_additional_access_type_isValid = ::OpenAPI::fromJsonValue(additional_access_type, json[QString("additionalAccessType")]);
    m_additional_access_type_isSet = !json[QString("additionalAccessType")].isNull() && m_additional_access_type_isValid;

    m_allocated_ebi_list_isValid = ::OpenAPI::fromJsonValue(allocated_ebi_list, json[QString("allocatedEbiList")]);
    m_allocated_ebi_list_isSet = !json[QString("allocatedEbiList")].isNull() && m_allocated_ebi_list_isValid;

    m_hsmf_id_isValid = ::OpenAPI::fromJsonValue(hsmf_id, json[QString("hsmfId")]);
    m_hsmf_id_isSet = !json[QString("hsmfId")].isNull() && m_hsmf_id_isValid;

    m_hsmf_set_id_isValid = ::OpenAPI::fromJsonValue(hsmf_set_id, json[QString("hsmfSetId")]);
    m_hsmf_set_id_isSet = !json[QString("hsmfSetId")].isNull() && m_hsmf_set_id_isValid;

    m_hsmf_service_set_id_isValid = ::OpenAPI::fromJsonValue(hsmf_service_set_id, json[QString("hsmfServiceSetId")]);
    m_hsmf_service_set_id_isSet = !json[QString("hsmfServiceSetId")].isNull() && m_hsmf_service_set_id_isValid;

    m_smf_binding_isValid = ::OpenAPI::fromJsonValue(smf_binding, json[QString("smfBinding")]);
    m_smf_binding_isSet = !json[QString("smfBinding")].isNull() && m_smf_binding_isValid;

    m_vsmf_id_isValid = ::OpenAPI::fromJsonValue(vsmf_id, json[QString("vsmfId")]);
    m_vsmf_id_isSet = !json[QString("vsmfId")].isNull() && m_vsmf_id_isValid;

    m_vsmf_set_id_isValid = ::OpenAPI::fromJsonValue(vsmf_set_id, json[QString("vsmfSetId")]);
    m_vsmf_set_id_isSet = !json[QString("vsmfSetId")].isNull() && m_vsmf_set_id_isValid;

    m_vsmf_service_set_id_isValid = ::OpenAPI::fromJsonValue(vsmf_service_set_id, json[QString("vsmfServiceSetId")]);
    m_vsmf_service_set_id_isSet = !json[QString("vsmfServiceSetId")].isNull() && m_vsmf_service_set_id_isValid;

    m_vsmf_binding_isValid = ::OpenAPI::fromJsonValue(vsmf_binding, json[QString("vsmfBinding")]);
    m_vsmf_binding_isSet = !json[QString("vsmfBinding")].isNull() && m_vsmf_binding_isValid;

    m_ismf_id_isValid = ::OpenAPI::fromJsonValue(ismf_id, json[QString("ismfId")]);
    m_ismf_id_isSet = !json[QString("ismfId")].isNull() && m_ismf_id_isValid;

    m_ismf_set_id_isValid = ::OpenAPI::fromJsonValue(ismf_set_id, json[QString("ismfSetId")]);
    m_ismf_set_id_isSet = !json[QString("ismfSetId")].isNull() && m_ismf_set_id_isValid;

    m_ismf_service_set_id_isValid = ::OpenAPI::fromJsonValue(ismf_service_set_id, json[QString("ismfServiceSetId")]);
    m_ismf_service_set_id_isSet = !json[QString("ismfServiceSetId")].isNull() && m_ismf_service_set_id_isValid;

    m_ismf_binding_isValid = ::OpenAPI::fromJsonValue(ismf_binding, json[QString("ismfBinding")]);
    m_ismf_binding_isSet = !json[QString("ismfBinding")].isNull() && m_ismf_binding_isValid;

    m_ns_instance_isValid = ::OpenAPI::fromJsonValue(ns_instance, json[QString("nsInstance")]);
    m_ns_instance_isSet = !json[QString("nsInstance")].isNull() && m_ns_instance_isValid;

    m_smf_service_instance_id_isValid = ::OpenAPI::fromJsonValue(smf_service_instance_id, json[QString("smfServiceInstanceId")]);
    m_smf_service_instance_id_isSet = !json[QString("smfServiceInstanceId")].isNull() && m_smf_service_instance_id_isValid;

    m_ma_pdu_session_isValid = ::OpenAPI::fromJsonValue(ma_pdu_session, json[QString("maPduSession")]);
    m_ma_pdu_session_isSet = !json[QString("maPduSession")].isNull() && m_ma_pdu_session_isValid;

    m_cn_assisted_ran_para_isValid = ::OpenAPI::fromJsonValue(cn_assisted_ran_para, json[QString("cnAssistedRanPara")]);
    m_cn_assisted_ran_para_isSet = !json[QString("cnAssistedRanPara")].isNull() && m_cn_assisted_ran_para_isValid;
}

QString OAIPduSessionContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPduSessionContext::asJsonObject() const {
    QJsonObject obj;
    if (m_pdu_session_id_isSet) {
        obj.insert(QString("pduSessionId"), ::OpenAPI::toJsonValue(pdu_session_id));
    }
    if (m_sm_context_ref_isSet) {
        obj.insert(QString("smContextRef"), ::OpenAPI::toJsonValue(sm_context_ref));
    }
    if (s_nssai.isSet()) {
        obj.insert(QString("sNssai"), ::OpenAPI::toJsonValue(s_nssai));
    }
    if (m_dnn_isSet) {
        obj.insert(QString("dnn"), ::OpenAPI::toJsonValue(dnn));
    }
    if (m_selected_dnn_isSet) {
        obj.insert(QString("selectedDnn"), ::OpenAPI::toJsonValue(selected_dnn));
    }
    if (access_type.isSet()) {
        obj.insert(QString("accessType"), ::OpenAPI::toJsonValue(access_type));
    }
    if (additional_access_type.isSet()) {
        obj.insert(QString("additionalAccessType"), ::OpenAPI::toJsonValue(additional_access_type));
    }
    if (allocated_ebi_list.size() > 0) {
        obj.insert(QString("allocatedEbiList"), ::OpenAPI::toJsonValue(allocated_ebi_list));
    }
    if (m_hsmf_id_isSet) {
        obj.insert(QString("hsmfId"), ::OpenAPI::toJsonValue(hsmf_id));
    }
    if (m_hsmf_set_id_isSet) {
        obj.insert(QString("hsmfSetId"), ::OpenAPI::toJsonValue(hsmf_set_id));
    }
    if (m_hsmf_service_set_id_isSet) {
        obj.insert(QString("hsmfServiceSetId"), ::OpenAPI::toJsonValue(hsmf_service_set_id));
    }
    if (smf_binding.isSet()) {
        obj.insert(QString("smfBinding"), ::OpenAPI::toJsonValue(smf_binding));
    }
    if (m_vsmf_id_isSet) {
        obj.insert(QString("vsmfId"), ::OpenAPI::toJsonValue(vsmf_id));
    }
    if (m_vsmf_set_id_isSet) {
        obj.insert(QString("vsmfSetId"), ::OpenAPI::toJsonValue(vsmf_set_id));
    }
    if (m_vsmf_service_set_id_isSet) {
        obj.insert(QString("vsmfServiceSetId"), ::OpenAPI::toJsonValue(vsmf_service_set_id));
    }
    if (vsmf_binding.isSet()) {
        obj.insert(QString("vsmfBinding"), ::OpenAPI::toJsonValue(vsmf_binding));
    }
    if (m_ismf_id_isSet) {
        obj.insert(QString("ismfId"), ::OpenAPI::toJsonValue(ismf_id));
    }
    if (m_ismf_set_id_isSet) {
        obj.insert(QString("ismfSetId"), ::OpenAPI::toJsonValue(ismf_set_id));
    }
    if (m_ismf_service_set_id_isSet) {
        obj.insert(QString("ismfServiceSetId"), ::OpenAPI::toJsonValue(ismf_service_set_id));
    }
    if (ismf_binding.isSet()) {
        obj.insert(QString("ismfBinding"), ::OpenAPI::toJsonValue(ismf_binding));
    }
    if (m_ns_instance_isSet) {
        obj.insert(QString("nsInstance"), ::OpenAPI::toJsonValue(ns_instance));
    }
    if (m_smf_service_instance_id_isSet) {
        obj.insert(QString("smfServiceInstanceId"), ::OpenAPI::toJsonValue(smf_service_instance_id));
    }
    if (m_ma_pdu_session_isSet) {
        obj.insert(QString("maPduSession"), ::OpenAPI::toJsonValue(ma_pdu_session));
    }
    if (cn_assisted_ran_para.isSet()) {
        obj.insert(QString("cnAssistedRanPara"), ::OpenAPI::toJsonValue(cn_assisted_ran_para));
    }
    return obj;
}

qint32 OAIPduSessionContext::getPduSessionId() const {
    return pdu_session_id;
}
void OAIPduSessionContext::setPduSessionId(const qint32 &pdu_session_id) {
    this->pdu_session_id = pdu_session_id;
    this->m_pdu_session_id_isSet = true;
}

bool OAIPduSessionContext::is_pdu_session_id_Set() const{
    return m_pdu_session_id_isSet;
}

bool OAIPduSessionContext::is_pdu_session_id_Valid() const{
    return m_pdu_session_id_isValid;
}

QString OAIPduSessionContext::getSmContextRef() const {
    return sm_context_ref;
}
void OAIPduSessionContext::setSmContextRef(const QString &sm_context_ref) {
    this->sm_context_ref = sm_context_ref;
    this->m_sm_context_ref_isSet = true;
}

bool OAIPduSessionContext::is_sm_context_ref_Set() const{
    return m_sm_context_ref_isSet;
}

bool OAIPduSessionContext::is_sm_context_ref_Valid() const{
    return m_sm_context_ref_isValid;
}

OAISnssai OAIPduSessionContext::getSNssai() const {
    return s_nssai;
}
void OAIPduSessionContext::setSNssai(const OAISnssai &s_nssai) {
    this->s_nssai = s_nssai;
    this->m_s_nssai_isSet = true;
}

bool OAIPduSessionContext::is_s_nssai_Set() const{
    return m_s_nssai_isSet;
}

bool OAIPduSessionContext::is_s_nssai_Valid() const{
    return m_s_nssai_isValid;
}

QString OAIPduSessionContext::getDnn() const {
    return dnn;
}
void OAIPduSessionContext::setDnn(const QString &dnn) {
    this->dnn = dnn;
    this->m_dnn_isSet = true;
}

bool OAIPduSessionContext::is_dnn_Set() const{
    return m_dnn_isSet;
}

bool OAIPduSessionContext::is_dnn_Valid() const{
    return m_dnn_isValid;
}

QString OAIPduSessionContext::getSelectedDnn() const {
    return selected_dnn;
}
void OAIPduSessionContext::setSelectedDnn(const QString &selected_dnn) {
    this->selected_dnn = selected_dnn;
    this->m_selected_dnn_isSet = true;
}

bool OAIPduSessionContext::is_selected_dnn_Set() const{
    return m_selected_dnn_isSet;
}

bool OAIPduSessionContext::is_selected_dnn_Valid() const{
    return m_selected_dnn_isValid;
}

OAIAccessType OAIPduSessionContext::getAccessType() const {
    return access_type;
}
void OAIPduSessionContext::setAccessType(const OAIAccessType &access_type) {
    this->access_type = access_type;
    this->m_access_type_isSet = true;
}

bool OAIPduSessionContext::is_access_type_Set() const{
    return m_access_type_isSet;
}

bool OAIPduSessionContext::is_access_type_Valid() const{
    return m_access_type_isValid;
}

OAIAccessType OAIPduSessionContext::getAdditionalAccessType() const {
    return additional_access_type;
}
void OAIPduSessionContext::setAdditionalAccessType(const OAIAccessType &additional_access_type) {
    this->additional_access_type = additional_access_type;
    this->m_additional_access_type_isSet = true;
}

bool OAIPduSessionContext::is_additional_access_type_Set() const{
    return m_additional_access_type_isSet;
}

bool OAIPduSessionContext::is_additional_access_type_Valid() const{
    return m_additional_access_type_isValid;
}

QList<OAIEbiArpMapping> OAIPduSessionContext::getAllocatedEbiList() const {
    return allocated_ebi_list;
}
void OAIPduSessionContext::setAllocatedEbiList(const QList<OAIEbiArpMapping> &allocated_ebi_list) {
    this->allocated_ebi_list = allocated_ebi_list;
    this->m_allocated_ebi_list_isSet = true;
}

bool OAIPduSessionContext::is_allocated_ebi_list_Set() const{
    return m_allocated_ebi_list_isSet;
}

bool OAIPduSessionContext::is_allocated_ebi_list_Valid() const{
    return m_allocated_ebi_list_isValid;
}

QString OAIPduSessionContext::getHsmfId() const {
    return hsmf_id;
}
void OAIPduSessionContext::setHsmfId(const QString &hsmf_id) {
    this->hsmf_id = hsmf_id;
    this->m_hsmf_id_isSet = true;
}

bool OAIPduSessionContext::is_hsmf_id_Set() const{
    return m_hsmf_id_isSet;
}

bool OAIPduSessionContext::is_hsmf_id_Valid() const{
    return m_hsmf_id_isValid;
}

QString OAIPduSessionContext::getHsmfSetId() const {
    return hsmf_set_id;
}
void OAIPduSessionContext::setHsmfSetId(const QString &hsmf_set_id) {
    this->hsmf_set_id = hsmf_set_id;
    this->m_hsmf_set_id_isSet = true;
}

bool OAIPduSessionContext::is_hsmf_set_id_Set() const{
    return m_hsmf_set_id_isSet;
}

bool OAIPduSessionContext::is_hsmf_set_id_Valid() const{
    return m_hsmf_set_id_isValid;
}

QString OAIPduSessionContext::getHsmfServiceSetId() const {
    return hsmf_service_set_id;
}
void OAIPduSessionContext::setHsmfServiceSetId(const QString &hsmf_service_set_id) {
    this->hsmf_service_set_id = hsmf_service_set_id;
    this->m_hsmf_service_set_id_isSet = true;
}

bool OAIPduSessionContext::is_hsmf_service_set_id_Set() const{
    return m_hsmf_service_set_id_isSet;
}

bool OAIPduSessionContext::is_hsmf_service_set_id_Valid() const{
    return m_hsmf_service_set_id_isValid;
}

OAISbiBindingLevel OAIPduSessionContext::getSmfBinding() const {
    return smf_binding;
}
void OAIPduSessionContext::setSmfBinding(const OAISbiBindingLevel &smf_binding) {
    this->smf_binding = smf_binding;
    this->m_smf_binding_isSet = true;
}

bool OAIPduSessionContext::is_smf_binding_Set() const{
    return m_smf_binding_isSet;
}

bool OAIPduSessionContext::is_smf_binding_Valid() const{
    return m_smf_binding_isValid;
}

QString OAIPduSessionContext::getVsmfId() const {
    return vsmf_id;
}
void OAIPduSessionContext::setVsmfId(const QString &vsmf_id) {
    this->vsmf_id = vsmf_id;
    this->m_vsmf_id_isSet = true;
}

bool OAIPduSessionContext::is_vsmf_id_Set() const{
    return m_vsmf_id_isSet;
}

bool OAIPduSessionContext::is_vsmf_id_Valid() const{
    return m_vsmf_id_isValid;
}

QString OAIPduSessionContext::getVsmfSetId() const {
    return vsmf_set_id;
}
void OAIPduSessionContext::setVsmfSetId(const QString &vsmf_set_id) {
    this->vsmf_set_id = vsmf_set_id;
    this->m_vsmf_set_id_isSet = true;
}

bool OAIPduSessionContext::is_vsmf_set_id_Set() const{
    return m_vsmf_set_id_isSet;
}

bool OAIPduSessionContext::is_vsmf_set_id_Valid() const{
    return m_vsmf_set_id_isValid;
}

QString OAIPduSessionContext::getVsmfServiceSetId() const {
    return vsmf_service_set_id;
}
void OAIPduSessionContext::setVsmfServiceSetId(const QString &vsmf_service_set_id) {
    this->vsmf_service_set_id = vsmf_service_set_id;
    this->m_vsmf_service_set_id_isSet = true;
}

bool OAIPduSessionContext::is_vsmf_service_set_id_Set() const{
    return m_vsmf_service_set_id_isSet;
}

bool OAIPduSessionContext::is_vsmf_service_set_id_Valid() const{
    return m_vsmf_service_set_id_isValid;
}

OAISbiBindingLevel OAIPduSessionContext::getVsmfBinding() const {
    return vsmf_binding;
}
void OAIPduSessionContext::setVsmfBinding(const OAISbiBindingLevel &vsmf_binding) {
    this->vsmf_binding = vsmf_binding;
    this->m_vsmf_binding_isSet = true;
}

bool OAIPduSessionContext::is_vsmf_binding_Set() const{
    return m_vsmf_binding_isSet;
}

bool OAIPduSessionContext::is_vsmf_binding_Valid() const{
    return m_vsmf_binding_isValid;
}

QString OAIPduSessionContext::getIsmfId() const {
    return ismf_id;
}
void OAIPduSessionContext::setIsmfId(const QString &ismf_id) {
    this->ismf_id = ismf_id;
    this->m_ismf_id_isSet = true;
}

bool OAIPduSessionContext::is_ismf_id_Set() const{
    return m_ismf_id_isSet;
}

bool OAIPduSessionContext::is_ismf_id_Valid() const{
    return m_ismf_id_isValid;
}

QString OAIPduSessionContext::getIsmfSetId() const {
    return ismf_set_id;
}
void OAIPduSessionContext::setIsmfSetId(const QString &ismf_set_id) {
    this->ismf_set_id = ismf_set_id;
    this->m_ismf_set_id_isSet = true;
}

bool OAIPduSessionContext::is_ismf_set_id_Set() const{
    return m_ismf_set_id_isSet;
}

bool OAIPduSessionContext::is_ismf_set_id_Valid() const{
    return m_ismf_set_id_isValid;
}

QString OAIPduSessionContext::getIsmfServiceSetId() const {
    return ismf_service_set_id;
}
void OAIPduSessionContext::setIsmfServiceSetId(const QString &ismf_service_set_id) {
    this->ismf_service_set_id = ismf_service_set_id;
    this->m_ismf_service_set_id_isSet = true;
}

bool OAIPduSessionContext::is_ismf_service_set_id_Set() const{
    return m_ismf_service_set_id_isSet;
}

bool OAIPduSessionContext::is_ismf_service_set_id_Valid() const{
    return m_ismf_service_set_id_isValid;
}

OAISbiBindingLevel OAIPduSessionContext::getIsmfBinding() const {
    return ismf_binding;
}
void OAIPduSessionContext::setIsmfBinding(const OAISbiBindingLevel &ismf_binding) {
    this->ismf_binding = ismf_binding;
    this->m_ismf_binding_isSet = true;
}

bool OAIPduSessionContext::is_ismf_binding_Set() const{
    return m_ismf_binding_isSet;
}

bool OAIPduSessionContext::is_ismf_binding_Valid() const{
    return m_ismf_binding_isValid;
}

QString OAIPduSessionContext::getNsInstance() const {
    return ns_instance;
}
void OAIPduSessionContext::setNsInstance(const QString &ns_instance) {
    this->ns_instance = ns_instance;
    this->m_ns_instance_isSet = true;
}

bool OAIPduSessionContext::is_ns_instance_Set() const{
    return m_ns_instance_isSet;
}

bool OAIPduSessionContext::is_ns_instance_Valid() const{
    return m_ns_instance_isValid;
}

QString OAIPduSessionContext::getSmfServiceInstanceId() const {
    return smf_service_instance_id;
}
void OAIPduSessionContext::setSmfServiceInstanceId(const QString &smf_service_instance_id) {
    this->smf_service_instance_id = smf_service_instance_id;
    this->m_smf_service_instance_id_isSet = true;
}

bool OAIPduSessionContext::is_smf_service_instance_id_Set() const{
    return m_smf_service_instance_id_isSet;
}

bool OAIPduSessionContext::is_smf_service_instance_id_Valid() const{
    return m_smf_service_instance_id_isValid;
}

bool OAIPduSessionContext::isMaPduSession() const {
    return ma_pdu_session;
}
void OAIPduSessionContext::setMaPduSession(const bool &ma_pdu_session) {
    this->ma_pdu_session = ma_pdu_session;
    this->m_ma_pdu_session_isSet = true;
}

bool OAIPduSessionContext::is_ma_pdu_session_Set() const{
    return m_ma_pdu_session_isSet;
}

bool OAIPduSessionContext::is_ma_pdu_session_Valid() const{
    return m_ma_pdu_session_isValid;
}

OAICnAssistedRanPara OAIPduSessionContext::getCnAssistedRanPara() const {
    return cn_assisted_ran_para;
}
void OAIPduSessionContext::setCnAssistedRanPara(const OAICnAssistedRanPara &cn_assisted_ran_para) {
    this->cn_assisted_ran_para = cn_assisted_ran_para;
    this->m_cn_assisted_ran_para_isSet = true;
}

bool OAIPduSessionContext::is_cn_assisted_ran_para_Set() const{
    return m_cn_assisted_ran_para_isSet;
}

bool OAIPduSessionContext::is_cn_assisted_ran_para_Valid() const{
    return m_cn_assisted_ran_para_isValid;
}

bool OAIPduSessionContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pdu_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sm_context_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (s_nssai.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dnn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_dnn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (access_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (additional_access_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (allocated_ebi_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsmf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsmf_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsmf_service_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (smf_binding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vsmf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vsmf_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vsmf_service_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (vsmf_binding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ismf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ismf_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ismf_service_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (ismf_binding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ns_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smf_service_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ma_pdu_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (cn_assisted_ran_para.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPduSessionContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pdu_session_id_isValid && m_sm_context_ref_isValid && m_s_nssai_isValid && m_dnn_isValid && m_access_type_isValid && true;
}

} // namespace OpenAPI
