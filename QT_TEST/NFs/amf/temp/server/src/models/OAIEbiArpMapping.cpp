/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEbiArpMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEbiArpMapping::OAIEbiArpMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEbiArpMapping::OAIEbiArpMapping() {
    this->initializeModel();
}

OAIEbiArpMapping::~OAIEbiArpMapping() {}

void OAIEbiArpMapping::initializeModel() {

    m_eps_bearer_id_isSet = false;
    m_eps_bearer_id_isValid = false;

    m_arp_isSet = false;
    m_arp_isValid = false;
}

void OAIEbiArpMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEbiArpMapping::fromJsonObject(QJsonObject json) {

    m_eps_bearer_id_isValid = ::OpenAPI::fromJsonValue(eps_bearer_id, json[QString("epsBearerId")]);
    m_eps_bearer_id_isSet = !json[QString("epsBearerId")].isNull() && m_eps_bearer_id_isValid;

    m_arp_isValid = ::OpenAPI::fromJsonValue(arp, json[QString("arp")]);
    m_arp_isSet = !json[QString("arp")].isNull() && m_arp_isValid;
}

QString OAIEbiArpMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEbiArpMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_eps_bearer_id_isSet) {
        obj.insert(QString("epsBearerId"), ::OpenAPI::toJsonValue(eps_bearer_id));
    }
    if (arp.isSet()) {
        obj.insert(QString("arp"), ::OpenAPI::toJsonValue(arp));
    }
    return obj;
}

qint32 OAIEbiArpMapping::getEpsBearerId() const {
    return eps_bearer_id;
}
void OAIEbiArpMapping::setEpsBearerId(const qint32 &eps_bearer_id) {
    this->eps_bearer_id = eps_bearer_id;
    this->m_eps_bearer_id_isSet = true;
}

bool OAIEbiArpMapping::is_eps_bearer_id_Set() const{
    return m_eps_bearer_id_isSet;
}

bool OAIEbiArpMapping::is_eps_bearer_id_Valid() const{
    return m_eps_bearer_id_isValid;
}

OAIArp OAIEbiArpMapping::getArp() const {
    return arp;
}
void OAIEbiArpMapping::setArp(const OAIArp &arp) {
    this->arp = arp;
    this->m_arp_isSet = true;
}

bool OAIEbiArpMapping::is_arp_Set() const{
    return m_arp_isSet;
}

bool OAIEbiArpMapping::is_arp_Valid() const{
    return m_arp_isValid;
}

bool OAIEbiArpMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eps_bearer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (arp.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEbiArpMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_eps_bearer_id_isValid && m_arp_isValid && true;
}

} // namespace OpenAPI
