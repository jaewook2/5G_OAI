/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArp::OAIArp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArp::OAIArp() {
    this->initializeModel();
}

OAIArp::~OAIArp() {}

void OAIArp::initializeModel() {

    m_priority_level_isSet = false;
    m_priority_level_isValid = false;

    m_preempt_cap_isSet = false;
    m_preempt_cap_isValid = false;

    m_preempt_vuln_isSet = false;
    m_preempt_vuln_isValid = false;
}

void OAIArp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArp::fromJsonObject(QJsonObject json) {

    m_priority_level_isValid = ::OpenAPI::fromJsonValue(priority_level, json[QString("priorityLevel")]);
    m_priority_level_isSet = !json[QString("priorityLevel")].isNull() && m_priority_level_isValid;

    m_preempt_cap_isValid = ::OpenAPI::fromJsonValue(preempt_cap, json[QString("preemptCap")]);
    m_preempt_cap_isSet = !json[QString("preemptCap")].isNull() && m_preempt_cap_isValid;

    m_preempt_vuln_isValid = ::OpenAPI::fromJsonValue(preempt_vuln, json[QString("preemptVuln")]);
    m_preempt_vuln_isSet = !json[QString("preemptVuln")].isNull() && m_preempt_vuln_isValid;
}

QString OAIArp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArp::asJsonObject() const {
    QJsonObject obj;
    if (m_priority_level_isSet) {
        obj.insert(QString("priorityLevel"), ::OpenAPI::toJsonValue(priority_level));
    }
    if (preempt_cap.isSet()) {
        obj.insert(QString("preemptCap"), ::OpenAPI::toJsonValue(preempt_cap));
    }
    if (preempt_vuln.isSet()) {
        obj.insert(QString("preemptVuln"), ::OpenAPI::toJsonValue(preempt_vuln));
    }
    return obj;
}

qint32 OAIArp::getPriorityLevel() const {
    return priority_level;
}
void OAIArp::setPriorityLevel(const qint32 &priority_level) {
    this->priority_level = priority_level;
    this->m_priority_level_isSet = true;
}

bool OAIArp::is_priority_level_Set() const{
    return m_priority_level_isSet;
}

bool OAIArp::is_priority_level_Valid() const{
    return m_priority_level_isValid;
}

OAIPreemptionCapability OAIArp::getPreemptCap() const {
    return preempt_cap;
}
void OAIArp::setPreemptCap(const OAIPreemptionCapability &preempt_cap) {
    this->preempt_cap = preempt_cap;
    this->m_preempt_cap_isSet = true;
}

bool OAIArp::is_preempt_cap_Set() const{
    return m_preempt_cap_isSet;
}

bool OAIArp::is_preempt_cap_Valid() const{
    return m_preempt_cap_isValid;
}

OAIPreemptionVulnerability OAIArp::getPreemptVuln() const {
    return preempt_vuln;
}
void OAIArp::setPreemptVuln(const OAIPreemptionVulnerability &preempt_vuln) {
    this->preempt_vuln = preempt_vuln;
    this->m_preempt_vuln_isSet = true;
}

bool OAIArp::is_preempt_vuln_Set() const{
    return m_preempt_vuln_isSet;
}

bool OAIArp::is_preempt_vuln_Valid() const{
    return m_preempt_vuln_isValid;
}

bool OAIArp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_priority_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (preempt_cap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (preempt_vuln.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_priority_level_isValid && m_preempt_cap_isValid && m_preempt_vuln_isValid && true;
}

} // namespace OpenAPI
