/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrationContextContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrationContextContainer::OAIRegistrationContextContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrationContextContainer::OAIRegistrationContextContainer() {
    this->initializeModel();
}

OAIRegistrationContextContainer::~OAIRegistrationContextContainer() {}

void OAIRegistrationContextContainer::initializeModel() {

    m_ue_context_isSet = false;
    m_ue_context_isValid = false;

    m_local_time_zone_isSet = false;
    m_local_time_zone_isValid = false;

    m_an_type_isSet = false;
    m_an_type_isValid = false;

    m_an_n2_ap_id_isSet = false;
    m_an_n2_ap_id_isValid = false;

    m_ran_node_id_isSet = false;
    m_ran_node_id_isValid = false;

    m_initial_amf_name_isSet = false;
    m_initial_amf_name_isValid = false;

    m_user_location_isSet = false;
    m_user_location_isValid = false;

    m_rrc_est_cause_isSet = false;
    m_rrc_est_cause_isValid = false;

    m_ue_context_request_isSet = false;
    m_ue_context_request_isValid = false;

    m_initial_amf_n2_ap_id_isSet = false;
    m_initial_amf_n2_ap_id_isValid = false;

    m_an_n2_ipv4_addr_isSet = false;
    m_an_n2_ipv4_addr_isValid = false;

    m_an_n2_ipv6_addr_isSet = false;
    m_an_n2_ipv6_addr_isValid = false;

    m_allowed_nssai_isSet = false;
    m_allowed_nssai_isValid = false;

    m_configured_nssai_isSet = false;
    m_configured_nssai_isValid = false;

    m_rejected_nssai_in_plmn_isSet = false;
    m_rejected_nssai_in_plmn_isValid = false;

    m_rejected_nssai_in_ta_isSet = false;
    m_rejected_nssai_in_ta_isValid = false;

    m_selected_plmn_id_isSet = false;
    m_selected_plmn_id_isValid = false;

    m_iab_node_ind_isSet = false;
    m_iab_node_ind_isValid = false;

    m_ce_mode_b_ind_isSet = false;
    m_ce_mode_b_ind_isValid = false;

    m_lte_m_ind_isSet = false;
    m_lte_m_ind_isValid = false;

    m_authenticated_ind_isSet = false;
    m_authenticated_ind_isValid = false;

    m_npn_access_info_isSet = false;
    m_npn_access_info_isValid = false;
}

void OAIRegistrationContextContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrationContextContainer::fromJsonObject(QJsonObject json) {

    m_ue_context_isValid = ::OpenAPI::fromJsonValue(ue_context, json[QString("ueContext")]);
    m_ue_context_isSet = !json[QString("ueContext")].isNull() && m_ue_context_isValid;

    m_local_time_zone_isValid = ::OpenAPI::fromJsonValue(local_time_zone, json[QString("localTimeZone")]);
    m_local_time_zone_isSet = !json[QString("localTimeZone")].isNull() && m_local_time_zone_isValid;

    m_an_type_isValid = ::OpenAPI::fromJsonValue(an_type, json[QString("anType")]);
    m_an_type_isSet = !json[QString("anType")].isNull() && m_an_type_isValid;

    m_an_n2_ap_id_isValid = ::OpenAPI::fromJsonValue(an_n2_ap_id, json[QString("anN2ApId")]);
    m_an_n2_ap_id_isSet = !json[QString("anN2ApId")].isNull() && m_an_n2_ap_id_isValid;

    m_ran_node_id_isValid = ::OpenAPI::fromJsonValue(ran_node_id, json[QString("ranNodeId")]);
    m_ran_node_id_isSet = !json[QString("ranNodeId")].isNull() && m_ran_node_id_isValid;

    m_initial_amf_name_isValid = ::OpenAPI::fromJsonValue(initial_amf_name, json[QString("initialAmfName")]);
    m_initial_amf_name_isSet = !json[QString("initialAmfName")].isNull() && m_initial_amf_name_isValid;

    m_user_location_isValid = ::OpenAPI::fromJsonValue(user_location, json[QString("userLocation")]);
    m_user_location_isSet = !json[QString("userLocation")].isNull() && m_user_location_isValid;

    m_rrc_est_cause_isValid = ::OpenAPI::fromJsonValue(rrc_est_cause, json[QString("rrcEstCause")]);
    m_rrc_est_cause_isSet = !json[QString("rrcEstCause")].isNull() && m_rrc_est_cause_isValid;

    m_ue_context_request_isValid = ::OpenAPI::fromJsonValue(ue_context_request, json[QString("ueContextRequest")]);
    m_ue_context_request_isSet = !json[QString("ueContextRequest")].isNull() && m_ue_context_request_isValid;

    m_initial_amf_n2_ap_id_isValid = ::OpenAPI::fromJsonValue(initial_amf_n2_ap_id, json[QString("initialAmfN2ApId")]);
    m_initial_amf_n2_ap_id_isSet = !json[QString("initialAmfN2ApId")].isNull() && m_initial_amf_n2_ap_id_isValid;

    m_an_n2_ipv4_addr_isValid = ::OpenAPI::fromJsonValue(an_n2_ipv4_addr, json[QString("anN2IPv4Addr")]);
    m_an_n2_ipv4_addr_isSet = !json[QString("anN2IPv4Addr")].isNull() && m_an_n2_ipv4_addr_isValid;

    m_an_n2_ipv6_addr_isValid = ::OpenAPI::fromJsonValue(an_n2_ipv6_addr, json[QString("anN2IPv6Addr")]);
    m_an_n2_ipv6_addr_isSet = !json[QString("anN2IPv6Addr")].isNull() && m_an_n2_ipv6_addr_isValid;

    m_allowed_nssai_isValid = ::OpenAPI::fromJsonValue(allowed_nssai, json[QString("allowedNssai")]);
    m_allowed_nssai_isSet = !json[QString("allowedNssai")].isNull() && m_allowed_nssai_isValid;

    m_configured_nssai_isValid = ::OpenAPI::fromJsonValue(configured_nssai, json[QString("configuredNssai")]);
    m_configured_nssai_isSet = !json[QString("configuredNssai")].isNull() && m_configured_nssai_isValid;

    m_rejected_nssai_in_plmn_isValid = ::OpenAPI::fromJsonValue(rejected_nssai_in_plmn, json[QString("rejectedNssaiInPlmn")]);
    m_rejected_nssai_in_plmn_isSet = !json[QString("rejectedNssaiInPlmn")].isNull() && m_rejected_nssai_in_plmn_isValid;

    m_rejected_nssai_in_ta_isValid = ::OpenAPI::fromJsonValue(rejected_nssai_in_ta, json[QString("rejectedNssaiInTa")]);
    m_rejected_nssai_in_ta_isSet = !json[QString("rejectedNssaiInTa")].isNull() && m_rejected_nssai_in_ta_isValid;

    m_selected_plmn_id_isValid = ::OpenAPI::fromJsonValue(selected_plmn_id, json[QString("selectedPlmnId")]);
    m_selected_plmn_id_isSet = !json[QString("selectedPlmnId")].isNull() && m_selected_plmn_id_isValid;

    m_iab_node_ind_isValid = ::OpenAPI::fromJsonValue(iab_node_ind, json[QString("iabNodeInd")]);
    m_iab_node_ind_isSet = !json[QString("iabNodeInd")].isNull() && m_iab_node_ind_isValid;

    m_ce_mode_b_ind_isValid = ::OpenAPI::fromJsonValue(ce_mode_b_ind, json[QString("ceModeBInd")]);
    m_ce_mode_b_ind_isSet = !json[QString("ceModeBInd")].isNull() && m_ce_mode_b_ind_isValid;

    m_lte_m_ind_isValid = ::OpenAPI::fromJsonValue(lte_m_ind, json[QString("lteMInd")]);
    m_lte_m_ind_isSet = !json[QString("lteMInd")].isNull() && m_lte_m_ind_isValid;

    m_authenticated_ind_isValid = ::OpenAPI::fromJsonValue(authenticated_ind, json[QString("authenticatedInd")]);
    m_authenticated_ind_isSet = !json[QString("authenticatedInd")].isNull() && m_authenticated_ind_isValid;

    m_npn_access_info_isValid = ::OpenAPI::fromJsonValue(npn_access_info, json[QString("npnAccessInfo")]);
    m_npn_access_info_isSet = !json[QString("npnAccessInfo")].isNull() && m_npn_access_info_isValid;
}

QString OAIRegistrationContextContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrationContextContainer::asJsonObject() const {
    QJsonObject obj;
    if (ue_context.isSet()) {
        obj.insert(QString("ueContext"), ::OpenAPI::toJsonValue(ue_context));
    }
    if (m_local_time_zone_isSet) {
        obj.insert(QString("localTimeZone"), ::OpenAPI::toJsonValue(local_time_zone));
    }
    if (an_type.isSet()) {
        obj.insert(QString("anType"), ::OpenAPI::toJsonValue(an_type));
    }
    if (m_an_n2_ap_id_isSet) {
        obj.insert(QString("anN2ApId"), ::OpenAPI::toJsonValue(an_n2_ap_id));
    }
    if (ran_node_id.isSet()) {
        obj.insert(QString("ranNodeId"), ::OpenAPI::toJsonValue(ran_node_id));
    }
    if (m_initial_amf_name_isSet) {
        obj.insert(QString("initialAmfName"), ::OpenAPI::toJsonValue(initial_amf_name));
    }
    if (user_location.isSet()) {
        obj.insert(QString("userLocation"), ::OpenAPI::toJsonValue(user_location));
    }
    if (m_rrc_est_cause_isSet) {
        obj.insert(QString("rrcEstCause"), ::OpenAPI::toJsonValue(rrc_est_cause));
    }
    if (m_ue_context_request_isSet) {
        obj.insert(QString("ueContextRequest"), ::OpenAPI::toJsonValue(ue_context_request));
    }
    if (m_initial_amf_n2_ap_id_isSet) {
        obj.insert(QString("initialAmfN2ApId"), ::OpenAPI::toJsonValue(initial_amf_n2_ap_id));
    }
    if (m_an_n2_ipv4_addr_isSet) {
        obj.insert(QString("anN2IPv4Addr"), ::OpenAPI::toJsonValue(an_n2_ipv4_addr));
    }
    if (an_n2_ipv6_addr.isSet()) {
        obj.insert(QString("anN2IPv6Addr"), ::OpenAPI::toJsonValue(an_n2_ipv6_addr));
    }
    if (allowed_nssai.isSet()) {
        obj.insert(QString("allowedNssai"), ::OpenAPI::toJsonValue(allowed_nssai));
    }
    if (configured_nssai.size() > 0) {
        obj.insert(QString("configuredNssai"), ::OpenAPI::toJsonValue(configured_nssai));
    }
    if (rejected_nssai_in_plmn.size() > 0) {
        obj.insert(QString("rejectedNssaiInPlmn"), ::OpenAPI::toJsonValue(rejected_nssai_in_plmn));
    }
    if (rejected_nssai_in_ta.size() > 0) {
        obj.insert(QString("rejectedNssaiInTa"), ::OpenAPI::toJsonValue(rejected_nssai_in_ta));
    }
    if (selected_plmn_id.isSet()) {
        obj.insert(QString("selectedPlmnId"), ::OpenAPI::toJsonValue(selected_plmn_id));
    }
    if (m_iab_node_ind_isSet) {
        obj.insert(QString("iabNodeInd"), ::OpenAPI::toJsonValue(iab_node_ind));
    }
    if (ce_mode_b_ind.isSet()) {
        obj.insert(QString("ceModeBInd"), ::OpenAPI::toJsonValue(ce_mode_b_ind));
    }
    if (lte_m_ind.isSet()) {
        obj.insert(QString("lteMInd"), ::OpenAPI::toJsonValue(lte_m_ind));
    }
    if (m_authenticated_ind_isSet) {
        obj.insert(QString("authenticatedInd"), ::OpenAPI::toJsonValue(authenticated_ind));
    }
    if (npn_access_info.isSet()) {
        obj.insert(QString("npnAccessInfo"), ::OpenAPI::toJsonValue(npn_access_info));
    }
    return obj;
}

OAIUeContext OAIRegistrationContextContainer::getUeContext() const {
    return ue_context;
}
void OAIRegistrationContextContainer::setUeContext(const OAIUeContext &ue_context) {
    this->ue_context = ue_context;
    this->m_ue_context_isSet = true;
}

bool OAIRegistrationContextContainer::is_ue_context_Set() const{
    return m_ue_context_isSet;
}

bool OAIRegistrationContextContainer::is_ue_context_Valid() const{
    return m_ue_context_isValid;
}

QString OAIRegistrationContextContainer::getLocalTimeZone() const {
    return local_time_zone;
}
void OAIRegistrationContextContainer::setLocalTimeZone(const QString &local_time_zone) {
    this->local_time_zone = local_time_zone;
    this->m_local_time_zone_isSet = true;
}

bool OAIRegistrationContextContainer::is_local_time_zone_Set() const{
    return m_local_time_zone_isSet;
}

bool OAIRegistrationContextContainer::is_local_time_zone_Valid() const{
    return m_local_time_zone_isValid;
}

OAIAccessType OAIRegistrationContextContainer::getAnType() const {
    return an_type;
}
void OAIRegistrationContextContainer::setAnType(const OAIAccessType &an_type) {
    this->an_type = an_type;
    this->m_an_type_isSet = true;
}

bool OAIRegistrationContextContainer::is_an_type_Set() const{
    return m_an_type_isSet;
}

bool OAIRegistrationContextContainer::is_an_type_Valid() const{
    return m_an_type_isValid;
}

qint32 OAIRegistrationContextContainer::getAnN2ApId() const {
    return an_n2_ap_id;
}
void OAIRegistrationContextContainer::setAnN2ApId(const qint32 &an_n2_ap_id) {
    this->an_n2_ap_id = an_n2_ap_id;
    this->m_an_n2_ap_id_isSet = true;
}

bool OAIRegistrationContextContainer::is_an_n2_ap_id_Set() const{
    return m_an_n2_ap_id_isSet;
}

bool OAIRegistrationContextContainer::is_an_n2_ap_id_Valid() const{
    return m_an_n2_ap_id_isValid;
}

OAIGlobalRanNodeId OAIRegistrationContextContainer::getRanNodeId() const {
    return ran_node_id;
}
void OAIRegistrationContextContainer::setRanNodeId(const OAIGlobalRanNodeId &ran_node_id) {
    this->ran_node_id = ran_node_id;
    this->m_ran_node_id_isSet = true;
}

bool OAIRegistrationContextContainer::is_ran_node_id_Set() const{
    return m_ran_node_id_isSet;
}

bool OAIRegistrationContextContainer::is_ran_node_id_Valid() const{
    return m_ran_node_id_isValid;
}

QString OAIRegistrationContextContainer::getInitialAmfName() const {
    return initial_amf_name;
}
void OAIRegistrationContextContainer::setInitialAmfName(const QString &initial_amf_name) {
    this->initial_amf_name = initial_amf_name;
    this->m_initial_amf_name_isSet = true;
}

bool OAIRegistrationContextContainer::is_initial_amf_name_Set() const{
    return m_initial_amf_name_isSet;
}

bool OAIRegistrationContextContainer::is_initial_amf_name_Valid() const{
    return m_initial_amf_name_isValid;
}

OAIUserLocation OAIRegistrationContextContainer::getUserLocation() const {
    return user_location;
}
void OAIRegistrationContextContainer::setUserLocation(const OAIUserLocation &user_location) {
    this->user_location = user_location;
    this->m_user_location_isSet = true;
}

bool OAIRegistrationContextContainer::is_user_location_Set() const{
    return m_user_location_isSet;
}

bool OAIRegistrationContextContainer::is_user_location_Valid() const{
    return m_user_location_isValid;
}

QString OAIRegistrationContextContainer::getRrcEstCause() const {
    return rrc_est_cause;
}
void OAIRegistrationContextContainer::setRrcEstCause(const QString &rrc_est_cause) {
    this->rrc_est_cause = rrc_est_cause;
    this->m_rrc_est_cause_isSet = true;
}

bool OAIRegistrationContextContainer::is_rrc_est_cause_Set() const{
    return m_rrc_est_cause_isSet;
}

bool OAIRegistrationContextContainer::is_rrc_est_cause_Valid() const{
    return m_rrc_est_cause_isValid;
}

bool OAIRegistrationContextContainer::isUeContextRequest() const {
    return ue_context_request;
}
void OAIRegistrationContextContainer::setUeContextRequest(const bool &ue_context_request) {
    this->ue_context_request = ue_context_request;
    this->m_ue_context_request_isSet = true;
}

bool OAIRegistrationContextContainer::is_ue_context_request_Set() const{
    return m_ue_context_request_isSet;
}

bool OAIRegistrationContextContainer::is_ue_context_request_Valid() const{
    return m_ue_context_request_isValid;
}

qint32 OAIRegistrationContextContainer::getInitialAmfN2ApId() const {
    return initial_amf_n2_ap_id;
}
void OAIRegistrationContextContainer::setInitialAmfN2ApId(const qint32 &initial_amf_n2_ap_id) {
    this->initial_amf_n2_ap_id = initial_amf_n2_ap_id;
    this->m_initial_amf_n2_ap_id_isSet = true;
}

bool OAIRegistrationContextContainer::is_initial_amf_n2_ap_id_Set() const{
    return m_initial_amf_n2_ap_id_isSet;
}

bool OAIRegistrationContextContainer::is_initial_amf_n2_ap_id_Valid() const{
    return m_initial_amf_n2_ap_id_isValid;
}

QString OAIRegistrationContextContainer::getAnN2Ipv4Addr() const {
    return an_n2_ipv4_addr;
}
void OAIRegistrationContextContainer::setAnN2Ipv4Addr(const QString &an_n2_ipv4_addr) {
    this->an_n2_ipv4_addr = an_n2_ipv4_addr;
    this->m_an_n2_ipv4_addr_isSet = true;
}

bool OAIRegistrationContextContainer::is_an_n2_ipv4_addr_Set() const{
    return m_an_n2_ipv4_addr_isSet;
}

bool OAIRegistrationContextContainer::is_an_n2_ipv4_addr_Valid() const{
    return m_an_n2_ipv4_addr_isValid;
}

OAIIpv6Addr OAIRegistrationContextContainer::getAnN2Ipv6Addr() const {
    return an_n2_ipv6_addr;
}
void OAIRegistrationContextContainer::setAnN2Ipv6Addr(const OAIIpv6Addr &an_n2_ipv6_addr) {
    this->an_n2_ipv6_addr = an_n2_ipv6_addr;
    this->m_an_n2_ipv6_addr_isSet = true;
}

bool OAIRegistrationContextContainer::is_an_n2_ipv6_addr_Set() const{
    return m_an_n2_ipv6_addr_isSet;
}

bool OAIRegistrationContextContainer::is_an_n2_ipv6_addr_Valid() const{
    return m_an_n2_ipv6_addr_isValid;
}

OAIAllowedNssai OAIRegistrationContextContainer::getAllowedNssai() const {
    return allowed_nssai;
}
void OAIRegistrationContextContainer::setAllowedNssai(const OAIAllowedNssai &allowed_nssai) {
    this->allowed_nssai = allowed_nssai;
    this->m_allowed_nssai_isSet = true;
}

bool OAIRegistrationContextContainer::is_allowed_nssai_Set() const{
    return m_allowed_nssai_isSet;
}

bool OAIRegistrationContextContainer::is_allowed_nssai_Valid() const{
    return m_allowed_nssai_isValid;
}

QList<OAIConfiguredSnssai> OAIRegistrationContextContainer::getConfiguredNssai() const {
    return configured_nssai;
}
void OAIRegistrationContextContainer::setConfiguredNssai(const QList<OAIConfiguredSnssai> &configured_nssai) {
    this->configured_nssai = configured_nssai;
    this->m_configured_nssai_isSet = true;
}

bool OAIRegistrationContextContainer::is_configured_nssai_Set() const{
    return m_configured_nssai_isSet;
}

bool OAIRegistrationContextContainer::is_configured_nssai_Valid() const{
    return m_configured_nssai_isValid;
}

QList<OAISnssai> OAIRegistrationContextContainer::getRejectedNssaiInPlmn() const {
    return rejected_nssai_in_plmn;
}
void OAIRegistrationContextContainer::setRejectedNssaiInPlmn(const QList<OAISnssai> &rejected_nssai_in_plmn) {
    this->rejected_nssai_in_plmn = rejected_nssai_in_plmn;
    this->m_rejected_nssai_in_plmn_isSet = true;
}

bool OAIRegistrationContextContainer::is_rejected_nssai_in_plmn_Set() const{
    return m_rejected_nssai_in_plmn_isSet;
}

bool OAIRegistrationContextContainer::is_rejected_nssai_in_plmn_Valid() const{
    return m_rejected_nssai_in_plmn_isValid;
}

QList<OAISnssai> OAIRegistrationContextContainer::getRejectedNssaiInTa() const {
    return rejected_nssai_in_ta;
}
void OAIRegistrationContextContainer::setRejectedNssaiInTa(const QList<OAISnssai> &rejected_nssai_in_ta) {
    this->rejected_nssai_in_ta = rejected_nssai_in_ta;
    this->m_rejected_nssai_in_ta_isSet = true;
}

bool OAIRegistrationContextContainer::is_rejected_nssai_in_ta_Set() const{
    return m_rejected_nssai_in_ta_isSet;
}

bool OAIRegistrationContextContainer::is_rejected_nssai_in_ta_Valid() const{
    return m_rejected_nssai_in_ta_isValid;
}

OAIPlmnId OAIRegistrationContextContainer::getSelectedPlmnId() const {
    return selected_plmn_id;
}
void OAIRegistrationContextContainer::setSelectedPlmnId(const OAIPlmnId &selected_plmn_id) {
    this->selected_plmn_id = selected_plmn_id;
    this->m_selected_plmn_id_isSet = true;
}

bool OAIRegistrationContextContainer::is_selected_plmn_id_Set() const{
    return m_selected_plmn_id_isSet;
}

bool OAIRegistrationContextContainer::is_selected_plmn_id_Valid() const{
    return m_selected_plmn_id_isValid;
}

bool OAIRegistrationContextContainer::isIabNodeInd() const {
    return iab_node_ind;
}
void OAIRegistrationContextContainer::setIabNodeInd(const bool &iab_node_ind) {
    this->iab_node_ind = iab_node_ind;
    this->m_iab_node_ind_isSet = true;
}

bool OAIRegistrationContextContainer::is_iab_node_ind_Set() const{
    return m_iab_node_ind_isSet;
}

bool OAIRegistrationContextContainer::is_iab_node_ind_Valid() const{
    return m_iab_node_ind_isValid;
}

OAICeModeBInd OAIRegistrationContextContainer::getCeModeBInd() const {
    return ce_mode_b_ind;
}
void OAIRegistrationContextContainer::setCeModeBInd(const OAICeModeBInd &ce_mode_b_ind) {
    this->ce_mode_b_ind = ce_mode_b_ind;
    this->m_ce_mode_b_ind_isSet = true;
}

bool OAIRegistrationContextContainer::is_ce_mode_b_ind_Set() const{
    return m_ce_mode_b_ind_isSet;
}

bool OAIRegistrationContextContainer::is_ce_mode_b_ind_Valid() const{
    return m_ce_mode_b_ind_isValid;
}

OAILteMInd OAIRegistrationContextContainer::getLteMInd() const {
    return lte_m_ind;
}
void OAIRegistrationContextContainer::setLteMInd(const OAILteMInd &lte_m_ind) {
    this->lte_m_ind = lte_m_ind;
    this->m_lte_m_ind_isSet = true;
}

bool OAIRegistrationContextContainer::is_lte_m_ind_Set() const{
    return m_lte_m_ind_isSet;
}

bool OAIRegistrationContextContainer::is_lte_m_ind_Valid() const{
    return m_lte_m_ind_isValid;
}

bool OAIRegistrationContextContainer::isAuthenticatedInd() const {
    return authenticated_ind;
}
void OAIRegistrationContextContainer::setAuthenticatedInd(const bool &authenticated_ind) {
    this->authenticated_ind = authenticated_ind;
    this->m_authenticated_ind_isSet = true;
}

bool OAIRegistrationContextContainer::is_authenticated_ind_Set() const{
    return m_authenticated_ind_isSet;
}

bool OAIRegistrationContextContainer::is_authenticated_ind_Valid() const{
    return m_authenticated_ind_isValid;
}

OAINpnAccessInfo OAIRegistrationContextContainer::getNpnAccessInfo() const {
    return npn_access_info;
}
void OAIRegistrationContextContainer::setNpnAccessInfo(const OAINpnAccessInfo &npn_access_info) {
    this->npn_access_info = npn_access_info;
    this->m_npn_access_info_isSet = true;
}

bool OAIRegistrationContextContainer::is_npn_access_info_Set() const{
    return m_npn_access_info_isSet;
}

bool OAIRegistrationContextContainer::is_npn_access_info_Valid() const{
    return m_npn_access_info_isValid;
}

bool OAIRegistrationContextContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (ue_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (an_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_an_n2_ap_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (ran_node_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_amf_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (user_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rrc_est_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ue_context_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_amf_n2_ap_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_an_n2_ipv4_addr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (an_n2_ipv6_addr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (allowed_nssai.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (configured_nssai.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (rejected_nssai_in_plmn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (rejected_nssai_in_ta.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (selected_plmn_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iab_node_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (ce_mode_b_ind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (lte_m_ind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authenticated_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (npn_access_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrationContextContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ue_context_isValid && m_an_type_isValid && m_an_n2_ap_id_isValid && m_ran_node_id_isValid && m_initial_amf_name_isValid && m_user_location_isValid && true;
}

} // namespace OpenAPI
