/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIN3gaLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIN3gaLocation::OAIN3gaLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIN3gaLocation::OAIN3gaLocation() {
    this->initializeModel();
}

OAIN3gaLocation::~OAIN3gaLocation() {}

void OAIN3gaLocation::initializeModel() {

    m_n3gpp_tai_isSet = false;
    m_n3gpp_tai_isValid = false;

    m_n3_iwf_id_isSet = false;
    m_n3_iwf_id_isValid = false;

    m_ue_ipv4_addr_isSet = false;
    m_ue_ipv4_addr_isValid = false;

    m_ue_ipv6_addr_isSet = false;
    m_ue_ipv6_addr_isValid = false;

    m_port_number_isSet = false;
    m_port_number_isValid = false;

    m_tnap_id_isSet = false;
    m_tnap_id_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_twap_id_isSet = false;
    m_twap_id_isValid = false;

    m_hfc_node_id_isSet = false;
    m_hfc_node_id_isValid = false;

    m_gli_isSet = false;
    m_gli_isValid = false;

    m_w5gban_line_type_isSet = false;
    m_w5gban_line_type_isValid = false;

    m_gci_isSet = false;
    m_gci_isValid = false;
}

void OAIN3gaLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIN3gaLocation::fromJsonObject(QJsonObject json) {

    m_n3gpp_tai_isValid = ::OpenAPI::fromJsonValue(n3gpp_tai, json[QString("n3gppTai")]);
    m_n3gpp_tai_isSet = !json[QString("n3gppTai")].isNull() && m_n3gpp_tai_isValid;

    m_n3_iwf_id_isValid = ::OpenAPI::fromJsonValue(n3_iwf_id, json[QString("n3IwfId")]);
    m_n3_iwf_id_isSet = !json[QString("n3IwfId")].isNull() && m_n3_iwf_id_isValid;

    m_ue_ipv4_addr_isValid = ::OpenAPI::fromJsonValue(ue_ipv4_addr, json[QString("ueIpv4Addr")]);
    m_ue_ipv4_addr_isSet = !json[QString("ueIpv4Addr")].isNull() && m_ue_ipv4_addr_isValid;

    m_ue_ipv6_addr_isValid = ::OpenAPI::fromJsonValue(ue_ipv6_addr, json[QString("ueIpv6Addr")]);
    m_ue_ipv6_addr_isSet = !json[QString("ueIpv6Addr")].isNull() && m_ue_ipv6_addr_isValid;

    m_port_number_isValid = ::OpenAPI::fromJsonValue(port_number, json[QString("portNumber")]);
    m_port_number_isSet = !json[QString("portNumber")].isNull() && m_port_number_isValid;

    m_tnap_id_isValid = ::OpenAPI::fromJsonValue(tnap_id, json[QString("tnapId")]);
    m_tnap_id_isSet = !json[QString("tnapId")].isNull() && m_tnap_id_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_twap_id_isValid = ::OpenAPI::fromJsonValue(twap_id, json[QString("twapId")]);
    m_twap_id_isSet = !json[QString("twapId")].isNull() && m_twap_id_isValid;

    m_hfc_node_id_isValid = ::OpenAPI::fromJsonValue(hfc_node_id, json[QString("hfcNodeId")]);
    m_hfc_node_id_isSet = !json[QString("hfcNodeId")].isNull() && m_hfc_node_id_isValid;

    m_gli_isValid = ::OpenAPI::fromJsonValue(gli, json[QString("gli")]);
    m_gli_isSet = !json[QString("gli")].isNull() && m_gli_isValid;

    m_w5gban_line_type_isValid = ::OpenAPI::fromJsonValue(w5gban_line_type, json[QString("w5gbanLineType")]);
    m_w5gban_line_type_isSet = !json[QString("w5gbanLineType")].isNull() && m_w5gban_line_type_isValid;

    m_gci_isValid = ::OpenAPI::fromJsonValue(gci, json[QString("gci")]);
    m_gci_isSet = !json[QString("gci")].isNull() && m_gci_isValid;
}

QString OAIN3gaLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIN3gaLocation::asJsonObject() const {
    QJsonObject obj;
    if (n3gpp_tai.isSet()) {
        obj.insert(QString("n3gppTai"), ::OpenAPI::toJsonValue(n3gpp_tai));
    }
    if (m_n3_iwf_id_isSet) {
        obj.insert(QString("n3IwfId"), ::OpenAPI::toJsonValue(n3_iwf_id));
    }
    if (m_ue_ipv4_addr_isSet) {
        obj.insert(QString("ueIpv4Addr"), ::OpenAPI::toJsonValue(ue_ipv4_addr));
    }
    if (ue_ipv6_addr.isSet()) {
        obj.insert(QString("ueIpv6Addr"), ::OpenAPI::toJsonValue(ue_ipv6_addr));
    }
    if (m_port_number_isSet) {
        obj.insert(QString("portNumber"), ::OpenAPI::toJsonValue(port_number));
    }
    if (tnap_id.isSet()) {
        obj.insert(QString("tnapId"), ::OpenAPI::toJsonValue(tnap_id));
    }
    if (protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(protocol));
    }
    if (twap_id.isSet()) {
        obj.insert(QString("twapId"), ::OpenAPI::toJsonValue(twap_id));
    }
    if (hfc_node_id.isSet()) {
        obj.insert(QString("hfcNodeId"), ::OpenAPI::toJsonValue(hfc_node_id));
    }
    if (m_gli_isSet) {
        obj.insert(QString("gli"), ::OpenAPI::toJsonValue(gli));
    }
    if (w5gban_line_type.isSet()) {
        obj.insert(QString("w5gbanLineType"), ::OpenAPI::toJsonValue(w5gban_line_type));
    }
    if (m_gci_isSet) {
        obj.insert(QString("gci"), ::OpenAPI::toJsonValue(gci));
    }
    return obj;
}

OAITai OAIN3gaLocation::getN3gppTai() const {
    return n3gpp_tai;
}
void OAIN3gaLocation::setN3gppTai(const OAITai &n3gpp_tai) {
    this->n3gpp_tai = n3gpp_tai;
    this->m_n3gpp_tai_isSet = true;
}

bool OAIN3gaLocation::is_n3gpp_tai_Set() const{
    return m_n3gpp_tai_isSet;
}

bool OAIN3gaLocation::is_n3gpp_tai_Valid() const{
    return m_n3gpp_tai_isValid;
}

QString OAIN3gaLocation::getN3IwfId() const {
    return n3_iwf_id;
}
void OAIN3gaLocation::setN3IwfId(const QString &n3_iwf_id) {
    this->n3_iwf_id = n3_iwf_id;
    this->m_n3_iwf_id_isSet = true;
}

bool OAIN3gaLocation::is_n3_iwf_id_Set() const{
    return m_n3_iwf_id_isSet;
}

bool OAIN3gaLocation::is_n3_iwf_id_Valid() const{
    return m_n3_iwf_id_isValid;
}

QString OAIN3gaLocation::getUeIpv4Addr() const {
    return ue_ipv4_addr;
}
void OAIN3gaLocation::setUeIpv4Addr(const QString &ue_ipv4_addr) {
    this->ue_ipv4_addr = ue_ipv4_addr;
    this->m_ue_ipv4_addr_isSet = true;
}

bool OAIN3gaLocation::is_ue_ipv4_addr_Set() const{
    return m_ue_ipv4_addr_isSet;
}

bool OAIN3gaLocation::is_ue_ipv4_addr_Valid() const{
    return m_ue_ipv4_addr_isValid;
}

OAIIpv6Addr OAIN3gaLocation::getUeIpv6Addr() const {
    return ue_ipv6_addr;
}
void OAIN3gaLocation::setUeIpv6Addr(const OAIIpv6Addr &ue_ipv6_addr) {
    this->ue_ipv6_addr = ue_ipv6_addr;
    this->m_ue_ipv6_addr_isSet = true;
}

bool OAIN3gaLocation::is_ue_ipv6_addr_Set() const{
    return m_ue_ipv6_addr_isSet;
}

bool OAIN3gaLocation::is_ue_ipv6_addr_Valid() const{
    return m_ue_ipv6_addr_isValid;
}

qint32 OAIN3gaLocation::getPortNumber() const {
    return port_number;
}
void OAIN3gaLocation::setPortNumber(const qint32 &port_number) {
    this->port_number = port_number;
    this->m_port_number_isSet = true;
}

bool OAIN3gaLocation::is_port_number_Set() const{
    return m_port_number_isSet;
}

bool OAIN3gaLocation::is_port_number_Valid() const{
    return m_port_number_isValid;
}

OAITnapId OAIN3gaLocation::getTnapId() const {
    return tnap_id;
}
void OAIN3gaLocation::setTnapId(const OAITnapId &tnap_id) {
    this->tnap_id = tnap_id;
    this->m_tnap_id_isSet = true;
}

bool OAIN3gaLocation::is_tnap_id_Set() const{
    return m_tnap_id_isSet;
}

bool OAIN3gaLocation::is_tnap_id_Valid() const{
    return m_tnap_id_isValid;
}

OAITransportProtocol OAIN3gaLocation::getProtocol() const {
    return protocol;
}
void OAIN3gaLocation::setProtocol(const OAITransportProtocol &protocol) {
    this->protocol = protocol;
    this->m_protocol_isSet = true;
}

bool OAIN3gaLocation::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIN3gaLocation::is_protocol_Valid() const{
    return m_protocol_isValid;
}

OAITwapId OAIN3gaLocation::getTwapId() const {
    return twap_id;
}
void OAIN3gaLocation::setTwapId(const OAITwapId &twap_id) {
    this->twap_id = twap_id;
    this->m_twap_id_isSet = true;
}

bool OAIN3gaLocation::is_twap_id_Set() const{
    return m_twap_id_isSet;
}

bool OAIN3gaLocation::is_twap_id_Valid() const{
    return m_twap_id_isValid;
}

OAIHfcNodeId OAIN3gaLocation::getHfcNodeId() const {
    return hfc_node_id;
}
void OAIN3gaLocation::setHfcNodeId(const OAIHfcNodeId &hfc_node_id) {
    this->hfc_node_id = hfc_node_id;
    this->m_hfc_node_id_isSet = true;
}

bool OAIN3gaLocation::is_hfc_node_id_Set() const{
    return m_hfc_node_id_isSet;
}

bool OAIN3gaLocation::is_hfc_node_id_Valid() const{
    return m_hfc_node_id_isValid;
}

QByteArray OAIN3gaLocation::getGli() const {
    return gli;
}
void OAIN3gaLocation::setGli(const QByteArray &gli) {
    this->gli = gli;
    this->m_gli_isSet = true;
}

bool OAIN3gaLocation::is_gli_Set() const{
    return m_gli_isSet;
}

bool OAIN3gaLocation::is_gli_Valid() const{
    return m_gli_isValid;
}

OAILineType OAIN3gaLocation::getW5gbanLineType() const {
    return w5gban_line_type;
}
void OAIN3gaLocation::setW5gbanLineType(const OAILineType &w5gban_line_type) {
    this->w5gban_line_type = w5gban_line_type;
    this->m_w5gban_line_type_isSet = true;
}

bool OAIN3gaLocation::is_w5gban_line_type_Set() const{
    return m_w5gban_line_type_isSet;
}

bool OAIN3gaLocation::is_w5gban_line_type_Valid() const{
    return m_w5gban_line_type_isValid;
}

QString OAIN3gaLocation::getGci() const {
    return gci;
}
void OAIN3gaLocation::setGci(const QString &gci) {
    this->gci = gci;
    this->m_gci_isSet = true;
}

bool OAIN3gaLocation::is_gci_Set() const{
    return m_gci_isSet;
}

bool OAIN3gaLocation::is_gci_Valid() const{
    return m_gci_isValid;
}

bool OAIN3gaLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (n3gpp_tai.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_n3_iwf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ue_ipv4_addr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (ue_ipv6_addr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (tnap_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (twap_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (hfc_node_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gli_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (w5gban_line_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gci_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIN3gaLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
