/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV2xContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV2xContext::OAIV2xContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV2xContext::OAIV2xContext() {
    this->initializeModel();
}

OAIV2xContext::~OAIV2xContext() {}

void OAIV2xContext::initializeModel() {

    m_nr_v2x_services_auth_isSet = false;
    m_nr_v2x_services_auth_isValid = false;

    m_lte_v2x_services_auth_isSet = false;
    m_lte_v2x_services_auth_isValid = false;

    m_nr_ue_sidelink_ambr_isSet = false;
    m_nr_ue_sidelink_ambr_isValid = false;

    m_lte_ue_sidelink_ambr_isSet = false;
    m_lte_ue_sidelink_ambr_isValid = false;

    m_pc5_qo_s_para_isSet = false;
    m_pc5_qo_s_para_isValid = false;
}

void OAIV2xContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV2xContext::fromJsonObject(QJsonObject json) {

    m_nr_v2x_services_auth_isValid = ::OpenAPI::fromJsonValue(nr_v2x_services_auth, json[QString("nrV2xServicesAuth")]);
    m_nr_v2x_services_auth_isSet = !json[QString("nrV2xServicesAuth")].isNull() && m_nr_v2x_services_auth_isValid;

    m_lte_v2x_services_auth_isValid = ::OpenAPI::fromJsonValue(lte_v2x_services_auth, json[QString("lteV2xServicesAuth")]);
    m_lte_v2x_services_auth_isSet = !json[QString("lteV2xServicesAuth")].isNull() && m_lte_v2x_services_auth_isValid;

    m_nr_ue_sidelink_ambr_isValid = ::OpenAPI::fromJsonValue(nr_ue_sidelink_ambr, json[QString("nrUeSidelinkAmbr")]);
    m_nr_ue_sidelink_ambr_isSet = !json[QString("nrUeSidelinkAmbr")].isNull() && m_nr_ue_sidelink_ambr_isValid;

    m_lte_ue_sidelink_ambr_isValid = ::OpenAPI::fromJsonValue(lte_ue_sidelink_ambr, json[QString("lteUeSidelinkAmbr")]);
    m_lte_ue_sidelink_ambr_isSet = !json[QString("lteUeSidelinkAmbr")].isNull() && m_lte_ue_sidelink_ambr_isValid;

    m_pc5_qo_s_para_isValid = ::OpenAPI::fromJsonValue(pc5_qo_s_para, json[QString("Pc5QoSPara")]);
    m_pc5_qo_s_para_isSet = !json[QString("Pc5QoSPara")].isNull() && m_pc5_qo_s_para_isValid;
}

QString OAIV2xContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV2xContext::asJsonObject() const {
    QJsonObject obj;
    if (nr_v2x_services_auth.isSet()) {
        obj.insert(QString("nrV2xServicesAuth"), ::OpenAPI::toJsonValue(nr_v2x_services_auth));
    }
    if (lte_v2x_services_auth.isSet()) {
        obj.insert(QString("lteV2xServicesAuth"), ::OpenAPI::toJsonValue(lte_v2x_services_auth));
    }
    if (m_nr_ue_sidelink_ambr_isSet) {
        obj.insert(QString("nrUeSidelinkAmbr"), ::OpenAPI::toJsonValue(nr_ue_sidelink_ambr));
    }
    if (m_lte_ue_sidelink_ambr_isSet) {
        obj.insert(QString("lteUeSidelinkAmbr"), ::OpenAPI::toJsonValue(lte_ue_sidelink_ambr));
    }
    if (pc5_qo_s_para.isSet()) {
        obj.insert(QString("Pc5QoSPara"), ::OpenAPI::toJsonValue(pc5_qo_s_para));
    }
    return obj;
}

OAINrV2xAuth OAIV2xContext::getNrV2xServicesAuth() const {
    return nr_v2x_services_auth;
}
void OAIV2xContext::setNrV2xServicesAuth(const OAINrV2xAuth &nr_v2x_services_auth) {
    this->nr_v2x_services_auth = nr_v2x_services_auth;
    this->m_nr_v2x_services_auth_isSet = true;
}

bool OAIV2xContext::is_nr_v2x_services_auth_Set() const{
    return m_nr_v2x_services_auth_isSet;
}

bool OAIV2xContext::is_nr_v2x_services_auth_Valid() const{
    return m_nr_v2x_services_auth_isValid;
}

OAILteV2xAuth OAIV2xContext::getLteV2xServicesAuth() const {
    return lte_v2x_services_auth;
}
void OAIV2xContext::setLteV2xServicesAuth(const OAILteV2xAuth &lte_v2x_services_auth) {
    this->lte_v2x_services_auth = lte_v2x_services_auth;
    this->m_lte_v2x_services_auth_isSet = true;
}

bool OAIV2xContext::is_lte_v2x_services_auth_Set() const{
    return m_lte_v2x_services_auth_isSet;
}

bool OAIV2xContext::is_lte_v2x_services_auth_Valid() const{
    return m_lte_v2x_services_auth_isValid;
}

QString OAIV2xContext::getNrUeSidelinkAmbr() const {
    return nr_ue_sidelink_ambr;
}
void OAIV2xContext::setNrUeSidelinkAmbr(const QString &nr_ue_sidelink_ambr) {
    this->nr_ue_sidelink_ambr = nr_ue_sidelink_ambr;
    this->m_nr_ue_sidelink_ambr_isSet = true;
}

bool OAIV2xContext::is_nr_ue_sidelink_ambr_Set() const{
    return m_nr_ue_sidelink_ambr_isSet;
}

bool OAIV2xContext::is_nr_ue_sidelink_ambr_Valid() const{
    return m_nr_ue_sidelink_ambr_isValid;
}

QString OAIV2xContext::getLteUeSidelinkAmbr() const {
    return lte_ue_sidelink_ambr;
}
void OAIV2xContext::setLteUeSidelinkAmbr(const QString &lte_ue_sidelink_ambr) {
    this->lte_ue_sidelink_ambr = lte_ue_sidelink_ambr;
    this->m_lte_ue_sidelink_ambr_isSet = true;
}

bool OAIV2xContext::is_lte_ue_sidelink_ambr_Set() const{
    return m_lte_ue_sidelink_ambr_isSet;
}

bool OAIV2xContext::is_lte_ue_sidelink_ambr_Valid() const{
    return m_lte_ue_sidelink_ambr_isValid;
}

OAIPc5QoSPara OAIV2xContext::getPc5QoSPara() const {
    return pc5_qo_s_para;
}
void OAIV2xContext::setPc5QoSPara(const OAIPc5QoSPara &pc5_qo_s_para) {
    this->pc5_qo_s_para = pc5_qo_s_para;
    this->m_pc5_qo_s_para_isSet = true;
}

bool OAIV2xContext::is_pc5_qo_s_para_Set() const{
    return m_pc5_qo_s_para_isSet;
}

bool OAIV2xContext::is_pc5_qo_s_para_Valid() const{
    return m_pc5_qo_s_para_isValid;
}

bool OAIV2xContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (nr_v2x_services_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (lte_v2x_services_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nr_ue_sidelink_ambr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lte_ue_sidelink_ambr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (pc5_qo_s_para.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV2xContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
