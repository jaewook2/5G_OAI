/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMmContext.h
 *
 * 
 */

#ifndef OAIMmContext_H
#define OAIMmContext_H

#include <QJsonObject>

#include "OAIAccessType.h"
#include "OAIEpsNasSecurityMode.h"
#include "OAIExpectedUeBehavior.h"
#include "OAIGlobalRanNodeId.h"
#include "OAINasSecurityMode.h"
#include "OAINssaaStatus.h"
#include "OAINssaiMapping.h"
#include "OAISnssai.h"
#include "OAIUeDifferentiationInfo.h"
#include <QByteArray>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMmContext : public OAIObject {
public:
    OAIMmContext();
    OAIMmContext(QString json);
    ~OAIMmContext() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAccessType getAccessType() const;
    void setAccessType(const OAIAccessType &access_type);
    bool is_access_type_Set() const;
    bool is_access_type_Valid() const;

    OAINasSecurityMode getNasSecurityMode() const;
    void setNasSecurityMode(const OAINasSecurityMode &nas_security_mode);
    bool is_nas_security_mode_Set() const;
    bool is_nas_security_mode_Valid() const;

    OAIEpsNasSecurityMode getEpsNasSecurityMode() const;
    void setEpsNasSecurityMode(const OAIEpsNasSecurityMode &eps_nas_security_mode);
    bool is_eps_nas_security_mode_Set() const;
    bool is_eps_nas_security_mode_Valid() const;

    qint32 getNasDownlinkCount() const;
    void setNasDownlinkCount(const qint32 &nas_downlink_count);
    bool is_nas_downlink_count_Set() const;
    bool is_nas_downlink_count_Valid() const;

    qint32 getNasUplinkCount() const;
    void setNasUplinkCount(const qint32 &nas_uplink_count);
    bool is_nas_uplink_count_Set() const;
    bool is_nas_uplink_count_Valid() const;

    QByteArray getUeSecurityCapability() const;
    void setUeSecurityCapability(const QByteArray &ue_security_capability);
    bool is_ue_security_capability_Set() const;
    bool is_ue_security_capability_Valid() const;

    QByteArray getS1UeNetworkCapability() const;
    void setS1UeNetworkCapability(const QByteArray &s1_ue_network_capability);
    bool is_s1_ue_network_capability_Set() const;
    bool is_s1_ue_network_capability_Valid() const;

    QList<OAISnssai> getAllowedNssai() const;
    void setAllowedNssai(const QList<OAISnssai> &allowed_nssai);
    bool is_allowed_nssai_Set() const;
    bool is_allowed_nssai_Valid() const;

    QList<OAINssaiMapping> getNssaiMappingList() const;
    void setNssaiMappingList(const QList<OAINssaiMapping> &nssai_mapping_list);
    bool is_nssai_mapping_list_Set() const;
    bool is_nssai_mapping_list_Valid() const;

    QList<OAISnssai> getAllowedHomeNssai() const;
    void setAllowedHomeNssai(const QList<OAISnssai> &allowed_home_nssai);
    bool is_allowed_home_nssai_Set() const;
    bool is_allowed_home_nssai_Valid() const;

    QList<QString> getNsInstanceList() const;
    void setNsInstanceList(const QList<QString> &ns_instance_list);
    bool is_ns_instance_list_Set() const;
    bool is_ns_instance_list_Valid() const;

    OAIExpectedUeBehavior getExpectedUEbehavior() const;
    void setExpectedUEbehavior(const OAIExpectedUeBehavior &expected_u_ebehavior);
    bool is_expected_u_ebehavior_Set() const;
    bool is_expected_u_ebehavior_Valid() const;

    OAIUeDifferentiationInfo getUeDifferentiationInfo() const;
    void setUeDifferentiationInfo(const OAIUeDifferentiationInfo &ue_differentiation_info);
    bool is_ue_differentiation_info_Set() const;
    bool is_ue_differentiation_info_Valid() const;

    QByteArray getPlmnAssiUeRadioCapId() const;
    void setPlmnAssiUeRadioCapId(const QByteArray &plmn_assi_ue_radio_cap_id);
    bool is_plmn_assi_ue_radio_cap_id_Set() const;
    bool is_plmn_assi_ue_radio_cap_id_Valid() const;

    QByteArray getManAssiUeRadioCapId() const;
    void setManAssiUeRadioCapId(const QByteArray &man_assi_ue_radio_cap_id);
    bool is_man_assi_ue_radio_cap_id_Set() const;
    bool is_man_assi_ue_radio_cap_id_Valid() const;

    QString getUcmfDicEntryId() const;
    void setUcmfDicEntryId(const QString &ucmf_dic_entry_id);
    bool is_ucmf_dic_entry_id_Set() const;
    bool is_ucmf_dic_entry_id_Valid() const;

    OAIGlobalRanNodeId getN3IwfId() const;
    void setN3IwfId(const OAIGlobalRanNodeId &n3_iwf_id);
    bool is_n3_iwf_id_Set() const;
    bool is_n3_iwf_id_Valid() const;

    OAIGlobalRanNodeId getWagfId() const;
    void setWagfId(const OAIGlobalRanNodeId &wagf_id);
    bool is_wagf_id_Set() const;
    bool is_wagf_id_Valid() const;

    OAIGlobalRanNodeId getTngfId() const;
    void setTngfId(const OAIGlobalRanNodeId &tngf_id);
    bool is_tngf_id_Set() const;
    bool is_tngf_id_Valid() const;

    qint32 getAnN2ApId() const;
    void setAnN2ApId(const qint32 &an_n2_ap_id);
    bool is_an_n2_ap_id_Set() const;
    bool is_an_n2_ap_id_Valid() const;

    QList<OAINssaaStatus> getNssaaStatusList() const;
    void setNssaaStatusList(const QList<OAINssaaStatus> &nssaa_status_list);
    bool is_nssaa_status_list_Set() const;
    bool is_nssaa_status_list_Valid() const;

    QList<OAINssaiMapping> getPendingNssaiMappingList() const;
    void setPendingNssaiMappingList(const QList<OAINssaiMapping> &pending_nssai_mapping_list);
    bool is_pending_nssai_mapping_list_Set() const;
    bool is_pending_nssai_mapping_list_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAccessType access_type;
    bool m_access_type_isSet;
    bool m_access_type_isValid;

    OAINasSecurityMode nas_security_mode;
    bool m_nas_security_mode_isSet;
    bool m_nas_security_mode_isValid;

    OAIEpsNasSecurityMode eps_nas_security_mode;
    bool m_eps_nas_security_mode_isSet;
    bool m_eps_nas_security_mode_isValid;

    qint32 nas_downlink_count;
    bool m_nas_downlink_count_isSet;
    bool m_nas_downlink_count_isValid;

    qint32 nas_uplink_count;
    bool m_nas_uplink_count_isSet;
    bool m_nas_uplink_count_isValid;

    QByteArray ue_security_capability;
    bool m_ue_security_capability_isSet;
    bool m_ue_security_capability_isValid;

    QByteArray s1_ue_network_capability;
    bool m_s1_ue_network_capability_isSet;
    bool m_s1_ue_network_capability_isValid;

    QList<OAISnssai> allowed_nssai;
    bool m_allowed_nssai_isSet;
    bool m_allowed_nssai_isValid;

    QList<OAINssaiMapping> nssai_mapping_list;
    bool m_nssai_mapping_list_isSet;
    bool m_nssai_mapping_list_isValid;

    QList<OAISnssai> allowed_home_nssai;
    bool m_allowed_home_nssai_isSet;
    bool m_allowed_home_nssai_isValid;

    QList<QString> ns_instance_list;
    bool m_ns_instance_list_isSet;
    bool m_ns_instance_list_isValid;

    OAIExpectedUeBehavior expected_u_ebehavior;
    bool m_expected_u_ebehavior_isSet;
    bool m_expected_u_ebehavior_isValid;

    OAIUeDifferentiationInfo ue_differentiation_info;
    bool m_ue_differentiation_info_isSet;
    bool m_ue_differentiation_info_isValid;

    QByteArray plmn_assi_ue_radio_cap_id;
    bool m_plmn_assi_ue_radio_cap_id_isSet;
    bool m_plmn_assi_ue_radio_cap_id_isValid;

    QByteArray man_assi_ue_radio_cap_id;
    bool m_man_assi_ue_radio_cap_id_isSet;
    bool m_man_assi_ue_radio_cap_id_isValid;

    QString ucmf_dic_entry_id;
    bool m_ucmf_dic_entry_id_isSet;
    bool m_ucmf_dic_entry_id_isValid;

    OAIGlobalRanNodeId n3_iwf_id;
    bool m_n3_iwf_id_isSet;
    bool m_n3_iwf_id_isValid;

    OAIGlobalRanNodeId wagf_id;
    bool m_wagf_id_isSet;
    bool m_wagf_id_isValid;

    OAIGlobalRanNodeId tngf_id;
    bool m_tngf_id_isSet;
    bool m_tngf_id_isValid;

    qint32 an_n2_ap_id;
    bool m_an_n2_ap_id_isSet;
    bool m_an_n2_ap_id_isValid;

    QList<OAINssaaStatus> nssaa_status_list;
    bool m_nssaa_status_list_isSet;
    bool m_nssaa_status_list_isValid;

    QList<OAINssaiMapping> pending_nssai_mapping_list;
    bool m_pending_nssai_mapping_list_isSet;
    bool m_pending_nssai_mapping_list_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMmContext)

#endif // OAIMmContext_H
