/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionData::OAISubscriptionData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionData::OAISubscriptionData() {
    this->initializeModel();
}

OAISubscriptionData::~OAISubscriptionData() {}

void OAISubscriptionData::initializeModel() {

    m_amf_status_uri_isSet = false;
    m_amf_status_uri_isValid = false;

    m_guami_list_isSet = false;
    m_guami_list_isValid = false;
}

void OAISubscriptionData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionData::fromJsonObject(QJsonObject json) {

    m_amf_status_uri_isValid = ::OpenAPI::fromJsonValue(amf_status_uri, json[QString("amfStatusUri")]);
    m_amf_status_uri_isSet = !json[QString("amfStatusUri")].isNull() && m_amf_status_uri_isValid;

    m_guami_list_isValid = ::OpenAPI::fromJsonValue(guami_list, json[QString("guamiList")]);
    m_guami_list_isSet = !json[QString("guamiList")].isNull() && m_guami_list_isValid;
}

QString OAISubscriptionData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionData::asJsonObject() const {
    QJsonObject obj;
    if (m_amf_status_uri_isSet) {
        obj.insert(QString("amfStatusUri"), ::OpenAPI::toJsonValue(amf_status_uri));
    }
    if (guami_list.size() > 0) {
        obj.insert(QString("guamiList"), ::OpenAPI::toJsonValue(guami_list));
    }
    return obj;
}

QString OAISubscriptionData::getAmfStatusUri() const {
    return amf_status_uri;
}
void OAISubscriptionData::setAmfStatusUri(const QString &amf_status_uri) {
    this->amf_status_uri = amf_status_uri;
    this->m_amf_status_uri_isSet = true;
}

bool OAISubscriptionData::is_amf_status_uri_Set() const{
    return m_amf_status_uri_isSet;
}

bool OAISubscriptionData::is_amf_status_uri_Valid() const{
    return m_amf_status_uri_isValid;
}

QList<OAIGuami> OAISubscriptionData::getGuamiList() const {
    return guami_list;
}
void OAISubscriptionData::setGuamiList(const QList<OAIGuami> &guami_list) {
    this->guami_list = guami_list;
    this->m_guami_list_isSet = true;
}

bool OAISubscriptionData::is_guami_list_Set() const{
    return m_guami_list_isSet;
}

bool OAISubscriptionData::is_guami_list_Valid() const{
    return m_guami_list_isValid;
}

bool OAISubscriptionData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amf_status_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (guami_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amf_status_uri_isValid && true;
}

} // namespace OpenAPI
