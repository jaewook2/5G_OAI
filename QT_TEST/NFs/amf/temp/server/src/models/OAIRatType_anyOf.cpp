/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRatType_anyOf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRatType_anyOf::OAIRatType_anyOf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRatType_anyOf::OAIRatType_anyOf() {
    this->initializeModel();
}

OAIRatType_anyOf::~OAIRatType_anyOf() {}

void OAIRatType_anyOf::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRatType_anyOf::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRatType_anyOf::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::NR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EUTRA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::EUTRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WLAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::WLAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VIRTUAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::VIRTUAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NBIOT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::NBIOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WIRELINE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::WIRELINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WIRELINE_CABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::WIRELINE_CABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WIRELINE_BBF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::WIRELINE_BBF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LTE-M", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::LTE_M;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NR_U", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::NR_U;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EUTRA_U", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::EUTRA_U;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRUSTED_N3GA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::TRUSTED_N3GA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRUSTED_WLAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::TRUSTED_WLAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UTRA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::UTRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GERA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatType_anyOf::GERA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRatType_anyOf::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRatType_anyOf::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRatType_anyOf::NR:
            val = "NR";
            break;
        case eOAIRatType_anyOf::EUTRA:
            val = "EUTRA";
            break;
        case eOAIRatType_anyOf::WLAN:
            val = "WLAN";
            break;
        case eOAIRatType_anyOf::VIRTUAL:
            val = "VIRTUAL";
            break;
        case eOAIRatType_anyOf::NBIOT:
            val = "NBIOT";
            break;
        case eOAIRatType_anyOf::WIRELINE:
            val = "WIRELINE";
            break;
        case eOAIRatType_anyOf::WIRELINE_CABLE:
            val = "WIRELINE_CABLE";
            break;
        case eOAIRatType_anyOf::WIRELINE_BBF:
            val = "WIRELINE_BBF";
            break;
        case eOAIRatType_anyOf::LTE_M:
            val = "LTE-M";
            break;
        case eOAIRatType_anyOf::NR_U:
            val = "NR_U";
            break;
        case eOAIRatType_anyOf::EUTRA_U:
            val = "EUTRA_U";
            break;
        case eOAIRatType_anyOf::TRUSTED_N3GA:
            val = "TRUSTED_N3GA";
            break;
        case eOAIRatType_anyOf::TRUSTED_WLAN:
            val = "TRUSTED_WLAN";
            break;
        case eOAIRatType_anyOf::UTRA:
            val = "UTRA";
            break;
        case eOAIRatType_anyOf::GERA:
            val = "GERA";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRatType_anyOf::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRatType_anyOf::eOAIRatType_anyOf OAIRatType_anyOf::getValue() const {
    return m_value;
}

void OAIRatType_anyOf::setValue(const OAIRatType_anyOf::eOAIRatType_anyOf& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRatType_anyOf::isSet() const {
    
    return m_value_isSet;
}

bool OAIRatType_anyOf::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
