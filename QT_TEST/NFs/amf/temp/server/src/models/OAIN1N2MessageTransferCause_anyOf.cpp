/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIN1N2MessageTransferCause_anyOf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIN1N2MessageTransferCause_anyOf::OAIN1N2MessageTransferCause_anyOf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIN1N2MessageTransferCause_anyOf::OAIN1N2MessageTransferCause_anyOf() {
    this->initializeModel();
}

OAIN1N2MessageTransferCause_anyOf::~OAIN1N2MessageTransferCause_anyOf() {}

void OAIN1N2MessageTransferCause_anyOf::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIN1N2MessageTransferCause_anyOf::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIN1N2MessageTransferCause_anyOf::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ATTEMPTING_TO_REACH_UE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIN1N2MessageTransferCause_anyOf::ATTEMPTING_TO_REACH_UE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("N1_N2_TRANSFER_INITIATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIN1N2MessageTransferCause_anyOf::N1_N2_TRANSFER_INITIATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING_FOR_ASYNCHRONOUS_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIN1N2MessageTransferCause_anyOf::WAITING_FOR_ASYNCHRONOUS_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UE_NOT_RESPONDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIN1N2MessageTransferCause_anyOf::UE_NOT_RESPONDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("N1_MSG_NOT_TRANSFERRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIN1N2MessageTransferCause_anyOf::N1_MSG_NOT_TRANSFERRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UE_NOT_REACHABLE_FOR_SESSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIN1N2MessageTransferCause_anyOf::UE_NOT_REACHABLE_FOR_SESSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEMPORARY_REJECT_REGISTRATION_ONGOING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIN1N2MessageTransferCause_anyOf::TEMPORARY_REJECT_REGISTRATION_ONGOING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEMPORARY_REJECT_HANDOVER_ONGOING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIN1N2MessageTransferCause_anyOf::TEMPORARY_REJECT_HANDOVER_ONGOING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIN1N2MessageTransferCause_anyOf::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIN1N2MessageTransferCause_anyOf::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIN1N2MessageTransferCause_anyOf::ATTEMPTING_TO_REACH_UE:
            val = "ATTEMPTING_TO_REACH_UE";
            break;
        case eOAIN1N2MessageTransferCause_anyOf::N1_N2_TRANSFER_INITIATED:
            val = "N1_N2_TRANSFER_INITIATED";
            break;
        case eOAIN1N2MessageTransferCause_anyOf::WAITING_FOR_ASYNCHRONOUS_TRANSFER:
            val = "WAITING_FOR_ASYNCHRONOUS_TRANSFER";
            break;
        case eOAIN1N2MessageTransferCause_anyOf::UE_NOT_RESPONDING:
            val = "UE_NOT_RESPONDING";
            break;
        case eOAIN1N2MessageTransferCause_anyOf::N1_MSG_NOT_TRANSFERRED:
            val = "N1_MSG_NOT_TRANSFERRED";
            break;
        case eOAIN1N2MessageTransferCause_anyOf::UE_NOT_REACHABLE_FOR_SESSION:
            val = "UE_NOT_REACHABLE_FOR_SESSION";
            break;
        case eOAIN1N2MessageTransferCause_anyOf::TEMPORARY_REJECT_REGISTRATION_ONGOING:
            val = "TEMPORARY_REJECT_REGISTRATION_ONGOING";
            break;
        case eOAIN1N2MessageTransferCause_anyOf::TEMPORARY_REJECT_HANDOVER_ONGOING:
            val = "TEMPORARY_REJECT_HANDOVER_ONGOING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIN1N2MessageTransferCause_anyOf::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIN1N2MessageTransferCause_anyOf::eOAIN1N2MessageTransferCause_anyOf OAIN1N2MessageTransferCause_anyOf::getValue() const {
    return m_value;
}

void OAIN1N2MessageTransferCause_anyOf::setValue(const OAIN1N2MessageTransferCause_anyOf::eOAIN1N2MessageTransferCause_anyOf& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIN1N2MessageTransferCause_anyOf::isSet() const {
    
    return m_value_isSet;
}

bool OAIN1N2MessageTransferCause_anyOf::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
