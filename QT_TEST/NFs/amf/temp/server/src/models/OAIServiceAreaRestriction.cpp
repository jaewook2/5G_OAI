/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceAreaRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceAreaRestriction::OAIServiceAreaRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceAreaRestriction::OAIServiceAreaRestriction() {
    this->initializeModel();
}

OAIServiceAreaRestriction::~OAIServiceAreaRestriction() {}

void OAIServiceAreaRestriction::initializeModel() {

    m_restriction_type_isSet = false;
    m_restriction_type_isValid = false;

    m_areas_isSet = false;
    m_areas_isValid = false;

    m_max_num_of_tas_isSet = false;
    m_max_num_of_tas_isValid = false;

    m_max_num_of_tas_for_not_allowed_areas_isSet = false;
    m_max_num_of_tas_for_not_allowed_areas_isValid = false;
}

void OAIServiceAreaRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceAreaRestriction::fromJsonObject(QJsonObject json) {

    m_restriction_type_isValid = ::OpenAPI::fromJsonValue(restriction_type, json[QString("restrictionType")]);
    m_restriction_type_isSet = !json[QString("restrictionType")].isNull() && m_restriction_type_isValid;

    m_areas_isValid = ::OpenAPI::fromJsonValue(areas, json[QString("areas")]);
    m_areas_isSet = !json[QString("areas")].isNull() && m_areas_isValid;

    m_max_num_of_tas_isValid = ::OpenAPI::fromJsonValue(max_num_of_tas, json[QString("maxNumOfTAs")]);
    m_max_num_of_tas_isSet = !json[QString("maxNumOfTAs")].isNull() && m_max_num_of_tas_isValid;

    m_max_num_of_tas_for_not_allowed_areas_isValid = ::OpenAPI::fromJsonValue(max_num_of_tas_for_not_allowed_areas, json[QString("maxNumOfTAsForNotAllowedAreas")]);
    m_max_num_of_tas_for_not_allowed_areas_isSet = !json[QString("maxNumOfTAsForNotAllowedAreas")].isNull() && m_max_num_of_tas_for_not_allowed_areas_isValid;
}

QString OAIServiceAreaRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceAreaRestriction::asJsonObject() const {
    QJsonObject obj;
    if (restriction_type.isSet()) {
        obj.insert(QString("restrictionType"), ::OpenAPI::toJsonValue(restriction_type));
    }
    if (areas.size() > 0) {
        obj.insert(QString("areas"), ::OpenAPI::toJsonValue(areas));
    }
    if (m_max_num_of_tas_isSet) {
        obj.insert(QString("maxNumOfTAs"), ::OpenAPI::toJsonValue(max_num_of_tas));
    }
    if (m_max_num_of_tas_for_not_allowed_areas_isSet) {
        obj.insert(QString("maxNumOfTAsForNotAllowedAreas"), ::OpenAPI::toJsonValue(max_num_of_tas_for_not_allowed_areas));
    }
    return obj;
}

OAIRestrictionType OAIServiceAreaRestriction::getRestrictionType() const {
    return restriction_type;
}
void OAIServiceAreaRestriction::setRestrictionType(const OAIRestrictionType &restriction_type) {
    this->restriction_type = restriction_type;
    this->m_restriction_type_isSet = true;
}

bool OAIServiceAreaRestriction::is_restriction_type_Set() const{
    return m_restriction_type_isSet;
}

bool OAIServiceAreaRestriction::is_restriction_type_Valid() const{
    return m_restriction_type_isValid;
}

QList<OAIArea> OAIServiceAreaRestriction::getAreas() const {
    return areas;
}
void OAIServiceAreaRestriction::setAreas(const QList<OAIArea> &areas) {
    this->areas = areas;
    this->m_areas_isSet = true;
}

bool OAIServiceAreaRestriction::is_areas_Set() const{
    return m_areas_isSet;
}

bool OAIServiceAreaRestriction::is_areas_Valid() const{
    return m_areas_isValid;
}

qint32 OAIServiceAreaRestriction::getMaxNumOfTas() const {
    return max_num_of_tas;
}
void OAIServiceAreaRestriction::setMaxNumOfTas(const qint32 &max_num_of_tas) {
    this->max_num_of_tas = max_num_of_tas;
    this->m_max_num_of_tas_isSet = true;
}

bool OAIServiceAreaRestriction::is_max_num_of_tas_Set() const{
    return m_max_num_of_tas_isSet;
}

bool OAIServiceAreaRestriction::is_max_num_of_tas_Valid() const{
    return m_max_num_of_tas_isValid;
}

qint32 OAIServiceAreaRestriction::getMaxNumOfTasForNotAllowedAreas() const {
    return max_num_of_tas_for_not_allowed_areas;
}
void OAIServiceAreaRestriction::setMaxNumOfTasForNotAllowedAreas(const qint32 &max_num_of_tas_for_not_allowed_areas) {
    this->max_num_of_tas_for_not_allowed_areas = max_num_of_tas_for_not_allowed_areas;
    this->m_max_num_of_tas_for_not_allowed_areas_isSet = true;
}

bool OAIServiceAreaRestriction::is_max_num_of_tas_for_not_allowed_areas_Set() const{
    return m_max_num_of_tas_for_not_allowed_areas_isSet;
}

bool OAIServiceAreaRestriction::is_max_num_of_tas_for_not_allowed_areas_Valid() const{
    return m_max_num_of_tas_for_not_allowed_areas_isValid;
}

bool OAIServiceAreaRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (restriction_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (areas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_num_of_tas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_num_of_tas_for_not_allowed_areas_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceAreaRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
