/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmfEventSubscriptionAddInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmfEventSubscriptionAddInfo::OAIAmfEventSubscriptionAddInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmfEventSubscriptionAddInfo::OAIAmfEventSubscriptionAddInfo() {
    this->initializeModel();
}

OAIAmfEventSubscriptionAddInfo::~OAIAmfEventSubscriptionAddInfo() {}

void OAIAmfEventSubscriptionAddInfo::initializeModel() {

    m_binding_info_isSet = false;
    m_binding_info_isValid = false;

    m_subscribing_nf_type_isSet = false;
    m_subscribing_nf_type_isValid = false;
}

void OAIAmfEventSubscriptionAddInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmfEventSubscriptionAddInfo::fromJsonObject(QJsonObject json) {

    m_binding_info_isValid = ::OpenAPI::fromJsonValue(binding_info, json[QString("bindingInfo")]);
    m_binding_info_isSet = !json[QString("bindingInfo")].isNull() && m_binding_info_isValid;

    m_subscribing_nf_type_isValid = ::OpenAPI::fromJsonValue(subscribing_nf_type, json[QString("subscribingNfType")]);
    m_subscribing_nf_type_isSet = !json[QString("subscribingNfType")].isNull() && m_subscribing_nf_type_isValid;
}

QString OAIAmfEventSubscriptionAddInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmfEventSubscriptionAddInfo::asJsonObject() const {
    QJsonObject obj;
    if (binding_info.size() > 0) {
        obj.insert(QString("bindingInfo"), ::OpenAPI::toJsonValue(binding_info));
    }
    if (subscribing_nf_type.isSet()) {
        obj.insert(QString("subscribingNfType"), ::OpenAPI::toJsonValue(subscribing_nf_type));
    }
    return obj;
}

QList<QString> OAIAmfEventSubscriptionAddInfo::getBindingInfo() const {
    return binding_info;
}
void OAIAmfEventSubscriptionAddInfo::setBindingInfo(const QList<QString> &binding_info) {
    this->binding_info = binding_info;
    this->m_binding_info_isSet = true;
}

bool OAIAmfEventSubscriptionAddInfo::is_binding_info_Set() const{
    return m_binding_info_isSet;
}

bool OAIAmfEventSubscriptionAddInfo::is_binding_info_Valid() const{
    return m_binding_info_isValid;
}

OAINFType OAIAmfEventSubscriptionAddInfo::getSubscribingNfType() const {
    return subscribing_nf_type;
}
void OAIAmfEventSubscriptionAddInfo::setSubscribingNfType(const OAINFType &subscribing_nf_type) {
    this->subscribing_nf_type = subscribing_nf_type;
    this->m_subscribing_nf_type_isSet = true;
}

bool OAIAmfEventSubscriptionAddInfo::is_subscribing_nf_type_Set() const{
    return m_subscribing_nf_type_isSet;
}

bool OAIAmfEventSubscriptionAddInfo::is_subscribing_nf_type_Valid() const{
    return m_subscribing_nf_type_isValid;
}

bool OAIAmfEventSubscriptionAddInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (binding_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (subscribing_nf_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmfEventSubscriptionAddInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
