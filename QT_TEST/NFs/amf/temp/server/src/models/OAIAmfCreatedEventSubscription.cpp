/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmfCreatedEventSubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmfCreatedEventSubscription::OAIAmfCreatedEventSubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmfCreatedEventSubscription::OAIAmfCreatedEventSubscription() {
    this->initializeModel();
}

OAIAmfCreatedEventSubscription::~OAIAmfCreatedEventSubscription() {}

void OAIAmfCreatedEventSubscription::initializeModel() {

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_report_list_isSet = false;
    m_report_list_isValid = false;

    m_supported_features_isSet = false;
    m_supported_features_isValid = false;
}

void OAIAmfCreatedEventSubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmfCreatedEventSubscription::fromJsonObject(QJsonObject json) {

    m_subscription_isValid = ::OpenAPI::fromJsonValue(subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_report_list_isValid = ::OpenAPI::fromJsonValue(report_list, json[QString("reportList")]);
    m_report_list_isSet = !json[QString("reportList")].isNull() && m_report_list_isValid;

    m_supported_features_isValid = ::OpenAPI::fromJsonValue(supported_features, json[QString("supportedFeatures")]);
    m_supported_features_isSet = !json[QString("supportedFeatures")].isNull() && m_supported_features_isValid;
}

QString OAIAmfCreatedEventSubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmfCreatedEventSubscription::asJsonObject() const {
    QJsonObject obj;
    if (subscription.isSet()) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(subscription));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(subscription_id));
    }
    if (report_list.size() > 0) {
        obj.insert(QString("reportList"), ::OpenAPI::toJsonValue(report_list));
    }
    if (m_supported_features_isSet) {
        obj.insert(QString("supportedFeatures"), ::OpenAPI::toJsonValue(supported_features));
    }
    return obj;
}

OAIAmfEventSubscription OAIAmfCreatedEventSubscription::getSubscription() const {
    return subscription;
}
void OAIAmfCreatedEventSubscription::setSubscription(const OAIAmfEventSubscription &subscription) {
    this->subscription = subscription;
    this->m_subscription_isSet = true;
}

bool OAIAmfCreatedEventSubscription::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIAmfCreatedEventSubscription::is_subscription_Valid() const{
    return m_subscription_isValid;
}

QString OAIAmfCreatedEventSubscription::getSubscriptionId() const {
    return subscription_id;
}
void OAIAmfCreatedEventSubscription::setSubscriptionId(const QString &subscription_id) {
    this->subscription_id = subscription_id;
    this->m_subscription_id_isSet = true;
}

bool OAIAmfCreatedEventSubscription::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIAmfCreatedEventSubscription::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QList<OAIAmfEventReport> OAIAmfCreatedEventSubscription::getReportList() const {
    return report_list;
}
void OAIAmfCreatedEventSubscription::setReportList(const QList<OAIAmfEventReport> &report_list) {
    this->report_list = report_list;
    this->m_report_list_isSet = true;
}

bool OAIAmfCreatedEventSubscription::is_report_list_Set() const{
    return m_report_list_isSet;
}

bool OAIAmfCreatedEventSubscription::is_report_list_Valid() const{
    return m_report_list_isValid;
}

QString OAIAmfCreatedEventSubscription::getSupportedFeatures() const {
    return supported_features;
}
void OAIAmfCreatedEventSubscription::setSupportedFeatures(const QString &supported_features) {
    this->supported_features = supported_features;
    this->m_supported_features_isSet = true;
}

bool OAIAmfCreatedEventSubscription::is_supported_features_Set() const{
    return m_supported_features_isSet;
}

bool OAIAmfCreatedEventSubscription::is_supported_features_Valid() const{
    return m_supported_features_isValid;
}

bool OAIAmfCreatedEventSubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (report_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_features_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmfCreatedEventSubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subscription_isValid && m_subscription_id_isValid && true;
}

} // namespace OpenAPI
