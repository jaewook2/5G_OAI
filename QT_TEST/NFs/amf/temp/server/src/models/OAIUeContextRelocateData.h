/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUeContextRelocateData.h
 *
 * 
 */

#ifndef OAIUeContextRelocateData_H
#define OAIUeContextRelocateData_H

#include <QJsonObject>

#include "OAIN2InfoContent.h"
#include "OAIN2SmInformation.h"
#include "OAINgApCause.h"
#include "OAINgRanTargetId.h"
#include "OAIRefToBinaryData.h"
#include "OAIUeContext.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUeContextRelocateData : public OAIObject {
public:
    OAIUeContextRelocateData();
    OAIUeContextRelocateData(QString json);
    ~OAIUeContextRelocateData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIUeContext getUeContext() const;
    void setUeContext(const OAIUeContext &ue_context);
    bool is_ue_context_Set() const;
    bool is_ue_context_Valid() const;

    OAINgRanTargetId getTargetId() const;
    void setTargetId(const OAINgRanTargetId &target_id);
    bool is_target_id_Set() const;
    bool is_target_id_Valid() const;

    OAIN2InfoContent getSourceToTargetData() const;
    void setSourceToTargetData(const OAIN2InfoContent &source_to_target_data);
    bool is_source_to_target_data_Set() const;
    bool is_source_to_target_data_Valid() const;

    OAIRefToBinaryData getForwardRelocationRequest() const;
    void setForwardRelocationRequest(const OAIRefToBinaryData &forward_relocation_request);
    bool is_forward_relocation_request_Set() const;
    bool is_forward_relocation_request_Valid() const;

    QList<OAIN2SmInformation> getPduSessionList() const;
    void setPduSessionList(const QList<OAIN2SmInformation> &pdu_session_list);
    bool is_pdu_session_list_Set() const;
    bool is_pdu_session_list_Valid() const;

    OAIN2InfoContent getUeRadioCapability() const;
    void setUeRadioCapability(const OAIN2InfoContent &ue_radio_capability);
    bool is_ue_radio_capability_Set() const;
    bool is_ue_radio_capability_Valid() const;

    OAINgApCause getNgapCause() const;
    void setNgapCause(const OAINgApCause &ngap_cause);
    bool is_ngap_cause_Set() const;
    bool is_ngap_cause_Valid() const;

    QString getSupportedFeatures() const;
    void setSupportedFeatures(const QString &supported_features);
    bool is_supported_features_Set() const;
    bool is_supported_features_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIUeContext ue_context;
    bool m_ue_context_isSet;
    bool m_ue_context_isValid;

    OAINgRanTargetId target_id;
    bool m_target_id_isSet;
    bool m_target_id_isValid;

    OAIN2InfoContent source_to_target_data;
    bool m_source_to_target_data_isSet;
    bool m_source_to_target_data_isValid;

    OAIRefToBinaryData forward_relocation_request;
    bool m_forward_relocation_request_isSet;
    bool m_forward_relocation_request_isValid;

    QList<OAIN2SmInformation> pdu_session_list;
    bool m_pdu_session_list_isSet;
    bool m_pdu_session_list_isValid;

    OAIN2InfoContent ue_radio_capability;
    bool m_ue_radio_capability_isSet;
    bool m_ue_radio_capability_isValid;

    OAINgApCause ngap_cause;
    bool m_ngap_cause_isSet;
    bool m_ngap_cause_isValid;

    QString supported_features;
    bool m_supported_features_isSet;
    bool m_supported_features_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUeContextRelocateData)

#endif // OAIUeContextRelocateData_H
