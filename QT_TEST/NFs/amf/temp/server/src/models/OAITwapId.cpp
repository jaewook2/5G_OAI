/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITwapId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITwapId::OAITwapId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITwapId::OAITwapId() {
    this->initializeModel();
}

OAITwapId::~OAITwapId() {}

void OAITwapId::initializeModel() {

    m_ss_id_isSet = false;
    m_ss_id_isValid = false;

    m_bss_id_isSet = false;
    m_bss_id_isValid = false;

    m_civic_address_isSet = false;
    m_civic_address_isValid = false;
}

void OAITwapId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITwapId::fromJsonObject(QJsonObject json) {

    m_ss_id_isValid = ::OpenAPI::fromJsonValue(ss_id, json[QString("ssId")]);
    m_ss_id_isSet = !json[QString("ssId")].isNull() && m_ss_id_isValid;

    m_bss_id_isValid = ::OpenAPI::fromJsonValue(bss_id, json[QString("bssId")]);
    m_bss_id_isSet = !json[QString("bssId")].isNull() && m_bss_id_isValid;

    m_civic_address_isValid = ::OpenAPI::fromJsonValue(civic_address, json[QString("civicAddress")]);
    m_civic_address_isSet = !json[QString("civicAddress")].isNull() && m_civic_address_isValid;
}

QString OAITwapId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITwapId::asJsonObject() const {
    QJsonObject obj;
    if (m_ss_id_isSet) {
        obj.insert(QString("ssId"), ::OpenAPI::toJsonValue(ss_id));
    }
    if (m_bss_id_isSet) {
        obj.insert(QString("bssId"), ::OpenAPI::toJsonValue(bss_id));
    }
    if (m_civic_address_isSet) {
        obj.insert(QString("civicAddress"), ::OpenAPI::toJsonValue(civic_address));
    }
    return obj;
}

QString OAITwapId::getSsId() const {
    return ss_id;
}
void OAITwapId::setSsId(const QString &ss_id) {
    this->ss_id = ss_id;
    this->m_ss_id_isSet = true;
}

bool OAITwapId::is_ss_id_Set() const{
    return m_ss_id_isSet;
}

bool OAITwapId::is_ss_id_Valid() const{
    return m_ss_id_isValid;
}

QString OAITwapId::getBssId() const {
    return bss_id;
}
void OAITwapId::setBssId(const QString &bss_id) {
    this->bss_id = bss_id;
    this->m_bss_id_isSet = true;
}

bool OAITwapId::is_bss_id_Set() const{
    return m_bss_id_isSet;
}

bool OAITwapId::is_bss_id_Valid() const{
    return m_bss_id_isValid;
}

QByteArray OAITwapId::getCivicAddress() const {
    return civic_address;
}
void OAITwapId::setCivicAddress(const QByteArray &civic_address) {
    this->civic_address = civic_address;
    this->m_civic_address_isSet = true;
}

bool OAITwapId::is_civic_address_Set() const{
    return m_civic_address_isSet;
}

bool OAITwapId::is_civic_address_Valid() const{
    return m_civic_address_isValid;
}

bool OAITwapId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ss_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bss_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_civic_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITwapId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ss_id_isValid && true;
}

} // namespace OpenAPI
