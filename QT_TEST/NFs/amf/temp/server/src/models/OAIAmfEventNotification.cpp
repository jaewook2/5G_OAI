/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmfEventNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmfEventNotification::OAIAmfEventNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmfEventNotification::OAIAmfEventNotification() {
    this->initializeModel();
}

OAIAmfEventNotification::~OAIAmfEventNotification() {}

void OAIAmfEventNotification::initializeModel() {

    m_notify_correlation_id_isSet = false;
    m_notify_correlation_id_isValid = false;

    m_subs_change_notify_correlation_id_isSet = false;
    m_subs_change_notify_correlation_id_isValid = false;

    m_report_list_isSet = false;
    m_report_list_isValid = false;

    m_event_subs_sync_info_isSet = false;
    m_event_subs_sync_info_isValid = false;
}

void OAIAmfEventNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmfEventNotification::fromJsonObject(QJsonObject json) {

    m_notify_correlation_id_isValid = ::OpenAPI::fromJsonValue(notify_correlation_id, json[QString("notifyCorrelationId")]);
    m_notify_correlation_id_isSet = !json[QString("notifyCorrelationId")].isNull() && m_notify_correlation_id_isValid;

    m_subs_change_notify_correlation_id_isValid = ::OpenAPI::fromJsonValue(subs_change_notify_correlation_id, json[QString("subsChangeNotifyCorrelationId")]);
    m_subs_change_notify_correlation_id_isSet = !json[QString("subsChangeNotifyCorrelationId")].isNull() && m_subs_change_notify_correlation_id_isValid;

    m_report_list_isValid = ::OpenAPI::fromJsonValue(report_list, json[QString("reportList")]);
    m_report_list_isSet = !json[QString("reportList")].isNull() && m_report_list_isValid;

    m_event_subs_sync_info_isValid = ::OpenAPI::fromJsonValue(event_subs_sync_info, json[QString("eventSubsSyncInfo")]);
    m_event_subs_sync_info_isSet = !json[QString("eventSubsSyncInfo")].isNull() && m_event_subs_sync_info_isValid;
}

QString OAIAmfEventNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmfEventNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_notify_correlation_id_isSet) {
        obj.insert(QString("notifyCorrelationId"), ::OpenAPI::toJsonValue(notify_correlation_id));
    }
    if (m_subs_change_notify_correlation_id_isSet) {
        obj.insert(QString("subsChangeNotifyCorrelationId"), ::OpenAPI::toJsonValue(subs_change_notify_correlation_id));
    }
    if (report_list.size() > 0) {
        obj.insert(QString("reportList"), ::OpenAPI::toJsonValue(report_list));
    }
    if (event_subs_sync_info.isSet()) {
        obj.insert(QString("eventSubsSyncInfo"), ::OpenAPI::toJsonValue(event_subs_sync_info));
    }
    return obj;
}

QString OAIAmfEventNotification::getNotifyCorrelationId() const {
    return notify_correlation_id;
}
void OAIAmfEventNotification::setNotifyCorrelationId(const QString &notify_correlation_id) {
    this->notify_correlation_id = notify_correlation_id;
    this->m_notify_correlation_id_isSet = true;
}

bool OAIAmfEventNotification::is_notify_correlation_id_Set() const{
    return m_notify_correlation_id_isSet;
}

bool OAIAmfEventNotification::is_notify_correlation_id_Valid() const{
    return m_notify_correlation_id_isValid;
}

QString OAIAmfEventNotification::getSubsChangeNotifyCorrelationId() const {
    return subs_change_notify_correlation_id;
}
void OAIAmfEventNotification::setSubsChangeNotifyCorrelationId(const QString &subs_change_notify_correlation_id) {
    this->subs_change_notify_correlation_id = subs_change_notify_correlation_id;
    this->m_subs_change_notify_correlation_id_isSet = true;
}

bool OAIAmfEventNotification::is_subs_change_notify_correlation_id_Set() const{
    return m_subs_change_notify_correlation_id_isSet;
}

bool OAIAmfEventNotification::is_subs_change_notify_correlation_id_Valid() const{
    return m_subs_change_notify_correlation_id_isValid;
}

QList<OAIAmfEventReport> OAIAmfEventNotification::getReportList() const {
    return report_list;
}
void OAIAmfEventNotification::setReportList(const QList<OAIAmfEventReport> &report_list) {
    this->report_list = report_list;
    this->m_report_list_isSet = true;
}

bool OAIAmfEventNotification::is_report_list_Set() const{
    return m_report_list_isSet;
}

bool OAIAmfEventNotification::is_report_list_Valid() const{
    return m_report_list_isValid;
}

OAIAmfEventSubsSyncInfo OAIAmfEventNotification::getEventSubsSyncInfo() const {
    return event_subs_sync_info;
}
void OAIAmfEventNotification::setEventSubsSyncInfo(const OAIAmfEventSubsSyncInfo &event_subs_sync_info) {
    this->event_subs_sync_info = event_subs_sync_info;
    this->m_event_subs_sync_info_isSet = true;
}

bool OAIAmfEventNotification::is_event_subs_sync_info_Set() const{
    return m_event_subs_sync_info_isSet;
}

bool OAIAmfEventNotification::is_event_subs_sync_info_Valid() const{
    return m_event_subs_sync_info_isValid;
}

bool OAIAmfEventNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notify_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subs_change_notify_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (report_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (event_subs_sync_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmfEventNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
