/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmfEventSubscriptionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmfEventSubscriptionInfo::OAIAmfEventSubscriptionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmfEventSubscriptionInfo::OAIAmfEventSubscriptionInfo() {
    this->initializeModel();
}

OAIAmfEventSubscriptionInfo::~OAIAmfEventSubscriptionInfo() {}

void OAIAmfEventSubscriptionInfo::initializeModel() {

    m_sub_id_isSet = false;
    m_sub_id_isValid = false;

    m_notify_correlation_id_isSet = false;
    m_notify_correlation_id_isValid = false;

    m_ref_id_list_isSet = false;
    m_ref_id_list_isValid = false;

    m_old_sub_id_isSet = false;
    m_old_sub_id_isValid = false;
}

void OAIAmfEventSubscriptionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmfEventSubscriptionInfo::fromJsonObject(QJsonObject json) {

    m_sub_id_isValid = ::OpenAPI::fromJsonValue(sub_id, json[QString("subId")]);
    m_sub_id_isSet = !json[QString("subId")].isNull() && m_sub_id_isValid;

    m_notify_correlation_id_isValid = ::OpenAPI::fromJsonValue(notify_correlation_id, json[QString("notifyCorrelationId")]);
    m_notify_correlation_id_isSet = !json[QString("notifyCorrelationId")].isNull() && m_notify_correlation_id_isValid;

    m_ref_id_list_isValid = ::OpenAPI::fromJsonValue(ref_id_list, json[QString("refIdList")]);
    m_ref_id_list_isSet = !json[QString("refIdList")].isNull() && m_ref_id_list_isValid;

    m_old_sub_id_isValid = ::OpenAPI::fromJsonValue(old_sub_id, json[QString("oldSubId")]);
    m_old_sub_id_isSet = !json[QString("oldSubId")].isNull() && m_old_sub_id_isValid;
}

QString OAIAmfEventSubscriptionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmfEventSubscriptionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_sub_id_isSet) {
        obj.insert(QString("subId"), ::OpenAPI::toJsonValue(sub_id));
    }
    if (m_notify_correlation_id_isSet) {
        obj.insert(QString("notifyCorrelationId"), ::OpenAPI::toJsonValue(notify_correlation_id));
    }
    if (ref_id_list.size() > 0) {
        obj.insert(QString("refIdList"), ::OpenAPI::toJsonValue(ref_id_list));
    }
    if (m_old_sub_id_isSet) {
        obj.insert(QString("oldSubId"), ::OpenAPI::toJsonValue(old_sub_id));
    }
    return obj;
}

QString OAIAmfEventSubscriptionInfo::getSubId() const {
    return sub_id;
}
void OAIAmfEventSubscriptionInfo::setSubId(const QString &sub_id) {
    this->sub_id = sub_id;
    this->m_sub_id_isSet = true;
}

bool OAIAmfEventSubscriptionInfo::is_sub_id_Set() const{
    return m_sub_id_isSet;
}

bool OAIAmfEventSubscriptionInfo::is_sub_id_Valid() const{
    return m_sub_id_isValid;
}

QString OAIAmfEventSubscriptionInfo::getNotifyCorrelationId() const {
    return notify_correlation_id;
}
void OAIAmfEventSubscriptionInfo::setNotifyCorrelationId(const QString &notify_correlation_id) {
    this->notify_correlation_id = notify_correlation_id;
    this->m_notify_correlation_id_isSet = true;
}

bool OAIAmfEventSubscriptionInfo::is_notify_correlation_id_Set() const{
    return m_notify_correlation_id_isSet;
}

bool OAIAmfEventSubscriptionInfo::is_notify_correlation_id_Valid() const{
    return m_notify_correlation_id_isValid;
}

QList<qint32> OAIAmfEventSubscriptionInfo::getRefIdList() const {
    return ref_id_list;
}
void OAIAmfEventSubscriptionInfo::setRefIdList(const QList<qint32> &ref_id_list) {
    this->ref_id_list = ref_id_list;
    this->m_ref_id_list_isSet = true;
}

bool OAIAmfEventSubscriptionInfo::is_ref_id_list_Set() const{
    return m_ref_id_list_isSet;
}

bool OAIAmfEventSubscriptionInfo::is_ref_id_list_Valid() const{
    return m_ref_id_list_isValid;
}

QString OAIAmfEventSubscriptionInfo::getOldSubId() const {
    return old_sub_id;
}
void OAIAmfEventSubscriptionInfo::setOldSubId(const QString &old_sub_id) {
    this->old_sub_id = old_sub_id;
    this->m_old_sub_id_isSet = true;
}

bool OAIAmfEventSubscriptionInfo::is_old_sub_id_Set() const{
    return m_old_sub_id_isSet;
}

bool OAIAmfEventSubscriptionInfo::is_old_sub_id_Valid() const{
    return m_old_sub_id_isValid;
}

bool OAIAmfEventSubscriptionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (ref_id_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmfEventSubscriptionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sub_id_isValid && m_ref_id_list_isValid && true;
}

} // namespace OpenAPI
