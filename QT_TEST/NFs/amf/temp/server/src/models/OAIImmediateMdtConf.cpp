/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImmediateMdtConf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImmediateMdtConf::OAIImmediateMdtConf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImmediateMdtConf::OAIImmediateMdtConf() {
    this->initializeModel();
}

OAIImmediateMdtConf::~OAIImmediateMdtConf() {}

void OAIImmediateMdtConf::initializeModel() {

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_measurement_lte_list_isSet = false;
    m_measurement_lte_list_isValid = false;

    m_measurement_nr_list_isSet = false;
    m_measurement_nr_list_isValid = false;

    m_reporting_trigger_list_isSet = false;
    m_reporting_trigger_list_isValid = false;

    m_report_interval_isSet = false;
    m_report_interval_isValid = false;

    m_report_interval_nr_isSet = false;
    m_report_interval_nr_isValid = false;

    m_report_amount_isSet = false;
    m_report_amount_isValid = false;

    m_event_threshold_rsrp_isSet = false;
    m_event_threshold_rsrp_isValid = false;

    m_event_threshold_rsrq_isSet = false;
    m_event_threshold_rsrq_isValid = false;

    m_event_threshold_rsrp_nr_isSet = false;
    m_event_threshold_rsrp_nr_isValid = false;

    m_event_threshold_rsrq_nr_isSet = false;
    m_event_threshold_rsrq_nr_isValid = false;

    m_collection_period_rmm_lte_isSet = false;
    m_collection_period_rmm_lte_isValid = false;

    m_collection_period_rmm_nr_isSet = false;
    m_collection_period_rmm_nr_isValid = false;

    m_measurement_period_lte_isSet = false;
    m_measurement_period_lte_isValid = false;

    m_area_scope_isSet = false;
    m_area_scope_isValid = false;

    m_positioning_method_isSet = false;
    m_positioning_method_isValid = false;

    m_add_positioning_method_list_isSet = false;
    m_add_positioning_method_list_isValid = false;

    m_mdt_allowed_plmn_id_list_isSet = false;
    m_mdt_allowed_plmn_id_list_isValid = false;

    m_sensor_measurement_list_isSet = false;
    m_sensor_measurement_list_isValid = false;
}

void OAIImmediateMdtConf::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImmediateMdtConf::fromJsonObject(QJsonObject json) {

    m_job_type_isValid = ::OpenAPI::fromJsonValue(job_type, json[QString("jobType")]);
    m_job_type_isSet = !json[QString("jobType")].isNull() && m_job_type_isValid;

    m_measurement_lte_list_isValid = ::OpenAPI::fromJsonValue(measurement_lte_list, json[QString("measurementLteList")]);
    m_measurement_lte_list_isSet = !json[QString("measurementLteList")].isNull() && m_measurement_lte_list_isValid;

    m_measurement_nr_list_isValid = ::OpenAPI::fromJsonValue(measurement_nr_list, json[QString("measurementNrList")]);
    m_measurement_nr_list_isSet = !json[QString("measurementNrList")].isNull() && m_measurement_nr_list_isValid;

    m_reporting_trigger_list_isValid = ::OpenAPI::fromJsonValue(reporting_trigger_list, json[QString("reportingTriggerList")]);
    m_reporting_trigger_list_isSet = !json[QString("reportingTriggerList")].isNull() && m_reporting_trigger_list_isValid;

    m_report_interval_isValid = ::OpenAPI::fromJsonValue(report_interval, json[QString("reportInterval")]);
    m_report_interval_isSet = !json[QString("reportInterval")].isNull() && m_report_interval_isValid;

    m_report_interval_nr_isValid = ::OpenAPI::fromJsonValue(report_interval_nr, json[QString("reportIntervalNr")]);
    m_report_interval_nr_isSet = !json[QString("reportIntervalNr")].isNull() && m_report_interval_nr_isValid;

    m_report_amount_isValid = ::OpenAPI::fromJsonValue(report_amount, json[QString("reportAmount")]);
    m_report_amount_isSet = !json[QString("reportAmount")].isNull() && m_report_amount_isValid;

    m_event_threshold_rsrp_isValid = ::OpenAPI::fromJsonValue(event_threshold_rsrp, json[QString("eventThresholdRsrp")]);
    m_event_threshold_rsrp_isSet = !json[QString("eventThresholdRsrp")].isNull() && m_event_threshold_rsrp_isValid;

    m_event_threshold_rsrq_isValid = ::OpenAPI::fromJsonValue(event_threshold_rsrq, json[QString("eventThresholdRsrq")]);
    m_event_threshold_rsrq_isSet = !json[QString("eventThresholdRsrq")].isNull() && m_event_threshold_rsrq_isValid;

    m_event_threshold_rsrp_nr_isValid = ::OpenAPI::fromJsonValue(event_threshold_rsrp_nr, json[QString("eventThresholdRsrpNr")]);
    m_event_threshold_rsrp_nr_isSet = !json[QString("eventThresholdRsrpNr")].isNull() && m_event_threshold_rsrp_nr_isValid;

    m_event_threshold_rsrq_nr_isValid = ::OpenAPI::fromJsonValue(event_threshold_rsrq_nr, json[QString("eventThresholdRsrqNr")]);
    m_event_threshold_rsrq_nr_isSet = !json[QString("eventThresholdRsrqNr")].isNull() && m_event_threshold_rsrq_nr_isValid;

    m_collection_period_rmm_lte_isValid = ::OpenAPI::fromJsonValue(collection_period_rmm_lte, json[QString("collectionPeriodRmmLte")]);
    m_collection_period_rmm_lte_isSet = !json[QString("collectionPeriodRmmLte")].isNull() && m_collection_period_rmm_lte_isValid;

    m_collection_period_rmm_nr_isValid = ::OpenAPI::fromJsonValue(collection_period_rmm_nr, json[QString("collectionPeriodRmmNr")]);
    m_collection_period_rmm_nr_isSet = !json[QString("collectionPeriodRmmNr")].isNull() && m_collection_period_rmm_nr_isValid;

    m_measurement_period_lte_isValid = ::OpenAPI::fromJsonValue(measurement_period_lte, json[QString("measurementPeriodLte")]);
    m_measurement_period_lte_isSet = !json[QString("measurementPeriodLte")].isNull() && m_measurement_period_lte_isValid;

    m_area_scope_isValid = ::OpenAPI::fromJsonValue(area_scope, json[QString("areaScope")]);
    m_area_scope_isSet = !json[QString("areaScope")].isNull() && m_area_scope_isValid;

    m_positioning_method_isValid = ::OpenAPI::fromJsonValue(positioning_method, json[QString("positioningMethod")]);
    m_positioning_method_isSet = !json[QString("positioningMethod")].isNull() && m_positioning_method_isValid;

    m_add_positioning_method_list_isValid = ::OpenAPI::fromJsonValue(add_positioning_method_list, json[QString("addPositioningMethodList")]);
    m_add_positioning_method_list_isSet = !json[QString("addPositioningMethodList")].isNull() && m_add_positioning_method_list_isValid;

    m_mdt_allowed_plmn_id_list_isValid = ::OpenAPI::fromJsonValue(mdt_allowed_plmn_id_list, json[QString("mdtAllowedPlmnIdList")]);
    m_mdt_allowed_plmn_id_list_isSet = !json[QString("mdtAllowedPlmnIdList")].isNull() && m_mdt_allowed_plmn_id_list_isValid;

    m_sensor_measurement_list_isValid = ::OpenAPI::fromJsonValue(sensor_measurement_list, json[QString("sensorMeasurementList")]);
    m_sensor_measurement_list_isSet = !json[QString("sensorMeasurementList")].isNull() && m_sensor_measurement_list_isValid;
}

QString OAIImmediateMdtConf::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImmediateMdtConf::asJsonObject() const {
    QJsonObject obj;
    if (job_type.isSet()) {
        obj.insert(QString("jobType"), ::OpenAPI::toJsonValue(job_type));
    }
    if (measurement_lte_list.size() > 0) {
        obj.insert(QString("measurementLteList"), ::OpenAPI::toJsonValue(measurement_lte_list));
    }
    if (measurement_nr_list.size() > 0) {
        obj.insert(QString("measurementNrList"), ::OpenAPI::toJsonValue(measurement_nr_list));
    }
    if (reporting_trigger_list.size() > 0) {
        obj.insert(QString("reportingTriggerList"), ::OpenAPI::toJsonValue(reporting_trigger_list));
    }
    if (report_interval.isSet()) {
        obj.insert(QString("reportInterval"), ::OpenAPI::toJsonValue(report_interval));
    }
    if (report_interval_nr.isSet()) {
        obj.insert(QString("reportIntervalNr"), ::OpenAPI::toJsonValue(report_interval_nr));
    }
    if (report_amount.isSet()) {
        obj.insert(QString("reportAmount"), ::OpenAPI::toJsonValue(report_amount));
    }
    if (m_event_threshold_rsrp_isSet) {
        obj.insert(QString("eventThresholdRsrp"), ::OpenAPI::toJsonValue(event_threshold_rsrp));
    }
    if (m_event_threshold_rsrq_isSet) {
        obj.insert(QString("eventThresholdRsrq"), ::OpenAPI::toJsonValue(event_threshold_rsrq));
    }
    if (m_event_threshold_rsrp_nr_isSet) {
        obj.insert(QString("eventThresholdRsrpNr"), ::OpenAPI::toJsonValue(event_threshold_rsrp_nr));
    }
    if (m_event_threshold_rsrq_nr_isSet) {
        obj.insert(QString("eventThresholdRsrqNr"), ::OpenAPI::toJsonValue(event_threshold_rsrq_nr));
    }
    if (collection_period_rmm_lte.isSet()) {
        obj.insert(QString("collectionPeriodRmmLte"), ::OpenAPI::toJsonValue(collection_period_rmm_lte));
    }
    if (collection_period_rmm_nr.isSet()) {
        obj.insert(QString("collectionPeriodRmmNr"), ::OpenAPI::toJsonValue(collection_period_rmm_nr));
    }
    if (measurement_period_lte.isSet()) {
        obj.insert(QString("measurementPeriodLte"), ::OpenAPI::toJsonValue(measurement_period_lte));
    }
    if (area_scope.isSet()) {
        obj.insert(QString("areaScope"), ::OpenAPI::toJsonValue(area_scope));
    }
    if (positioning_method.isSet()) {
        obj.insert(QString("positioningMethod"), ::OpenAPI::toJsonValue(positioning_method));
    }
    if (add_positioning_method_list.size() > 0) {
        obj.insert(QString("addPositioningMethodList"), ::OpenAPI::toJsonValue(add_positioning_method_list));
    }
    if (mdt_allowed_plmn_id_list.size() > 0) {
        obj.insert(QString("mdtAllowedPlmnIdList"), ::OpenAPI::toJsonValue(mdt_allowed_plmn_id_list));
    }
    if (sensor_measurement_list.size() > 0) {
        obj.insert(QString("sensorMeasurementList"), ::OpenAPI::toJsonValue(sensor_measurement_list));
    }
    return obj;
}

OAIJobType OAIImmediateMdtConf::getJobType() const {
    return job_type;
}
void OAIImmediateMdtConf::setJobType(const OAIJobType &job_type) {
    this->job_type = job_type;
    this->m_job_type_isSet = true;
}

bool OAIImmediateMdtConf::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIImmediateMdtConf::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QList<OAIMeasurementLteForMdt> OAIImmediateMdtConf::getMeasurementLteList() const {
    return measurement_lte_list;
}
void OAIImmediateMdtConf::setMeasurementLteList(const QList<OAIMeasurementLteForMdt> &measurement_lte_list) {
    this->measurement_lte_list = measurement_lte_list;
    this->m_measurement_lte_list_isSet = true;
}

bool OAIImmediateMdtConf::is_measurement_lte_list_Set() const{
    return m_measurement_lte_list_isSet;
}

bool OAIImmediateMdtConf::is_measurement_lte_list_Valid() const{
    return m_measurement_lte_list_isValid;
}

QList<OAIMeasurementNrForMdt> OAIImmediateMdtConf::getMeasurementNrList() const {
    return measurement_nr_list;
}
void OAIImmediateMdtConf::setMeasurementNrList(const QList<OAIMeasurementNrForMdt> &measurement_nr_list) {
    this->measurement_nr_list = measurement_nr_list;
    this->m_measurement_nr_list_isSet = true;
}

bool OAIImmediateMdtConf::is_measurement_nr_list_Set() const{
    return m_measurement_nr_list_isSet;
}

bool OAIImmediateMdtConf::is_measurement_nr_list_Valid() const{
    return m_measurement_nr_list_isValid;
}

QList<OAIReportingTrigger> OAIImmediateMdtConf::getReportingTriggerList() const {
    return reporting_trigger_list;
}
void OAIImmediateMdtConf::setReportingTriggerList(const QList<OAIReportingTrigger> &reporting_trigger_list) {
    this->reporting_trigger_list = reporting_trigger_list;
    this->m_reporting_trigger_list_isSet = true;
}

bool OAIImmediateMdtConf::is_reporting_trigger_list_Set() const{
    return m_reporting_trigger_list_isSet;
}

bool OAIImmediateMdtConf::is_reporting_trigger_list_Valid() const{
    return m_reporting_trigger_list_isValid;
}

OAIReportIntervalMdt OAIImmediateMdtConf::getReportInterval() const {
    return report_interval;
}
void OAIImmediateMdtConf::setReportInterval(const OAIReportIntervalMdt &report_interval) {
    this->report_interval = report_interval;
    this->m_report_interval_isSet = true;
}

bool OAIImmediateMdtConf::is_report_interval_Set() const{
    return m_report_interval_isSet;
}

bool OAIImmediateMdtConf::is_report_interval_Valid() const{
    return m_report_interval_isValid;
}

OAIReportIntervalNrMdt OAIImmediateMdtConf::getReportIntervalNr() const {
    return report_interval_nr;
}
void OAIImmediateMdtConf::setReportIntervalNr(const OAIReportIntervalNrMdt &report_interval_nr) {
    this->report_interval_nr = report_interval_nr;
    this->m_report_interval_nr_isSet = true;
}

bool OAIImmediateMdtConf::is_report_interval_nr_Set() const{
    return m_report_interval_nr_isSet;
}

bool OAIImmediateMdtConf::is_report_interval_nr_Valid() const{
    return m_report_interval_nr_isValid;
}

OAIReportAmountMdt OAIImmediateMdtConf::getReportAmount() const {
    return report_amount;
}
void OAIImmediateMdtConf::setReportAmount(const OAIReportAmountMdt &report_amount) {
    this->report_amount = report_amount;
    this->m_report_amount_isSet = true;
}

bool OAIImmediateMdtConf::is_report_amount_Set() const{
    return m_report_amount_isSet;
}

bool OAIImmediateMdtConf::is_report_amount_Valid() const{
    return m_report_amount_isValid;
}

qint32 OAIImmediateMdtConf::getEventThresholdRsrp() const {
    return event_threshold_rsrp;
}
void OAIImmediateMdtConf::setEventThresholdRsrp(const qint32 &event_threshold_rsrp) {
    this->event_threshold_rsrp = event_threshold_rsrp;
    this->m_event_threshold_rsrp_isSet = true;
}

bool OAIImmediateMdtConf::is_event_threshold_rsrp_Set() const{
    return m_event_threshold_rsrp_isSet;
}

bool OAIImmediateMdtConf::is_event_threshold_rsrp_Valid() const{
    return m_event_threshold_rsrp_isValid;
}

qint32 OAIImmediateMdtConf::getEventThresholdRsrq() const {
    return event_threshold_rsrq;
}
void OAIImmediateMdtConf::setEventThresholdRsrq(const qint32 &event_threshold_rsrq) {
    this->event_threshold_rsrq = event_threshold_rsrq;
    this->m_event_threshold_rsrq_isSet = true;
}

bool OAIImmediateMdtConf::is_event_threshold_rsrq_Set() const{
    return m_event_threshold_rsrq_isSet;
}

bool OAIImmediateMdtConf::is_event_threshold_rsrq_Valid() const{
    return m_event_threshold_rsrq_isValid;
}

qint32 OAIImmediateMdtConf::getEventThresholdRsrpNr() const {
    return event_threshold_rsrp_nr;
}
void OAIImmediateMdtConf::setEventThresholdRsrpNr(const qint32 &event_threshold_rsrp_nr) {
    this->event_threshold_rsrp_nr = event_threshold_rsrp_nr;
    this->m_event_threshold_rsrp_nr_isSet = true;
}

bool OAIImmediateMdtConf::is_event_threshold_rsrp_nr_Set() const{
    return m_event_threshold_rsrp_nr_isSet;
}

bool OAIImmediateMdtConf::is_event_threshold_rsrp_nr_Valid() const{
    return m_event_threshold_rsrp_nr_isValid;
}

qint32 OAIImmediateMdtConf::getEventThresholdRsrqNr() const {
    return event_threshold_rsrq_nr;
}
void OAIImmediateMdtConf::setEventThresholdRsrqNr(const qint32 &event_threshold_rsrq_nr) {
    this->event_threshold_rsrq_nr = event_threshold_rsrq_nr;
    this->m_event_threshold_rsrq_nr_isSet = true;
}

bool OAIImmediateMdtConf::is_event_threshold_rsrq_nr_Set() const{
    return m_event_threshold_rsrq_nr_isSet;
}

bool OAIImmediateMdtConf::is_event_threshold_rsrq_nr_Valid() const{
    return m_event_threshold_rsrq_nr_isValid;
}

OAICollectionPeriodRmmLteMdt OAIImmediateMdtConf::getCollectionPeriodRmmLte() const {
    return collection_period_rmm_lte;
}
void OAIImmediateMdtConf::setCollectionPeriodRmmLte(const OAICollectionPeriodRmmLteMdt &collection_period_rmm_lte) {
    this->collection_period_rmm_lte = collection_period_rmm_lte;
    this->m_collection_period_rmm_lte_isSet = true;
}

bool OAIImmediateMdtConf::is_collection_period_rmm_lte_Set() const{
    return m_collection_period_rmm_lte_isSet;
}

bool OAIImmediateMdtConf::is_collection_period_rmm_lte_Valid() const{
    return m_collection_period_rmm_lte_isValid;
}

OAICollectionPeriodRmmNrMdt OAIImmediateMdtConf::getCollectionPeriodRmmNr() const {
    return collection_period_rmm_nr;
}
void OAIImmediateMdtConf::setCollectionPeriodRmmNr(const OAICollectionPeriodRmmNrMdt &collection_period_rmm_nr) {
    this->collection_period_rmm_nr = collection_period_rmm_nr;
    this->m_collection_period_rmm_nr_isSet = true;
}

bool OAIImmediateMdtConf::is_collection_period_rmm_nr_Set() const{
    return m_collection_period_rmm_nr_isSet;
}

bool OAIImmediateMdtConf::is_collection_period_rmm_nr_Valid() const{
    return m_collection_period_rmm_nr_isValid;
}

OAIMeasurementPeriodLteMdt OAIImmediateMdtConf::getMeasurementPeriodLte() const {
    return measurement_period_lte;
}
void OAIImmediateMdtConf::setMeasurementPeriodLte(const OAIMeasurementPeriodLteMdt &measurement_period_lte) {
    this->measurement_period_lte = measurement_period_lte;
    this->m_measurement_period_lte_isSet = true;
}

bool OAIImmediateMdtConf::is_measurement_period_lte_Set() const{
    return m_measurement_period_lte_isSet;
}

bool OAIImmediateMdtConf::is_measurement_period_lte_Valid() const{
    return m_measurement_period_lte_isValid;
}

OAIAreaScope OAIImmediateMdtConf::getAreaScope() const {
    return area_scope;
}
void OAIImmediateMdtConf::setAreaScope(const OAIAreaScope &area_scope) {
    this->area_scope = area_scope;
    this->m_area_scope_isSet = true;
}

bool OAIImmediateMdtConf::is_area_scope_Set() const{
    return m_area_scope_isSet;
}

bool OAIImmediateMdtConf::is_area_scope_Valid() const{
    return m_area_scope_isValid;
}

OAIPositioningMethodMdt OAIImmediateMdtConf::getPositioningMethod() const {
    return positioning_method;
}
void OAIImmediateMdtConf::setPositioningMethod(const OAIPositioningMethodMdt &positioning_method) {
    this->positioning_method = positioning_method;
    this->m_positioning_method_isSet = true;
}

bool OAIImmediateMdtConf::is_positioning_method_Set() const{
    return m_positioning_method_isSet;
}

bool OAIImmediateMdtConf::is_positioning_method_Valid() const{
    return m_positioning_method_isValid;
}

QList<OAIPositioningMethodMdt> OAIImmediateMdtConf::getAddPositioningMethodList() const {
    return add_positioning_method_list;
}
void OAIImmediateMdtConf::setAddPositioningMethodList(const QList<OAIPositioningMethodMdt> &add_positioning_method_list) {
    this->add_positioning_method_list = add_positioning_method_list;
    this->m_add_positioning_method_list_isSet = true;
}

bool OAIImmediateMdtConf::is_add_positioning_method_list_Set() const{
    return m_add_positioning_method_list_isSet;
}

bool OAIImmediateMdtConf::is_add_positioning_method_list_Valid() const{
    return m_add_positioning_method_list_isValid;
}

QList<OAIPlmnId> OAIImmediateMdtConf::getMdtAllowedPlmnIdList() const {
    return mdt_allowed_plmn_id_list;
}
void OAIImmediateMdtConf::setMdtAllowedPlmnIdList(const QList<OAIPlmnId> &mdt_allowed_plmn_id_list) {
    this->mdt_allowed_plmn_id_list = mdt_allowed_plmn_id_list;
    this->m_mdt_allowed_plmn_id_list_isSet = true;
}

bool OAIImmediateMdtConf::is_mdt_allowed_plmn_id_list_Set() const{
    return m_mdt_allowed_plmn_id_list_isSet;
}

bool OAIImmediateMdtConf::is_mdt_allowed_plmn_id_list_Valid() const{
    return m_mdt_allowed_plmn_id_list_isValid;
}

QList<OAISensorMeasurement> OAIImmediateMdtConf::getSensorMeasurementList() const {
    return sensor_measurement_list;
}
void OAIImmediateMdtConf::setSensorMeasurementList(const QList<OAISensorMeasurement> &sensor_measurement_list) {
    this->sensor_measurement_list = sensor_measurement_list;
    this->m_sensor_measurement_list_isSet = true;
}

bool OAIImmediateMdtConf::is_sensor_measurement_list_Set() const{
    return m_sensor_measurement_list_isSet;
}

bool OAIImmediateMdtConf::is_sensor_measurement_list_Valid() const{
    return m_sensor_measurement_list_isValid;
}

bool OAIImmediateMdtConf::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (measurement_lte_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (measurement_nr_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (reporting_trigger_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (report_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (report_interval_nr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (report_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_threshold_rsrp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_threshold_rsrq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_threshold_rsrp_nr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_threshold_rsrq_nr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (collection_period_rmm_lte.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (collection_period_rmm_nr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (measurement_period_lte.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (area_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (positioning_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (add_positioning_method_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (mdt_allowed_plmn_id_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (sensor_measurement_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImmediateMdtConf::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_type_isValid && true;
}

} // namespace OpenAPI
