/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessTokenReq.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessTokenReq::OAIAccessTokenReq(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessTokenReq::OAIAccessTokenReq() {
    this->initializeModel();
}

OAIAccessTokenReq::~OAIAccessTokenReq() {}

void OAIAccessTokenReq::initializeModel() {

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_nf_instance_id_isSet = false;
    m_nf_instance_id_isValid = false;

    m_nf_type_isSet = false;
    m_nf_type_isValid = false;

    m_target_nf_type_isSet = false;
    m_target_nf_type_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_target_nf_instance_id_isSet = false;
    m_target_nf_instance_id_isValid = false;

    m_requester_plmn_isSet = false;
    m_requester_plmn_isValid = false;

    m_requester_plmn_list_isSet = false;
    m_requester_plmn_list_isValid = false;

    m_requester_snssai_list_isSet = false;
    m_requester_snssai_list_isValid = false;

    m_requester_fqdn_isSet = false;
    m_requester_fqdn_isValid = false;

    m_requester_snpn_list_isSet = false;
    m_requester_snpn_list_isValid = false;

    m_target_plmn_isSet = false;
    m_target_plmn_isValid = false;

    m_target_snssai_list_isSet = false;
    m_target_snssai_list_isValid = false;

    m_target_nsi_list_isSet = false;
    m_target_nsi_list_isValid = false;

    m_target_nf_set_id_isSet = false;
    m_target_nf_set_id_isValid = false;

    m_target_nf_service_set_id_isSet = false;
    m_target_nf_service_set_id_isValid = false;
}

void OAIAccessTokenReq::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessTokenReq::fromJsonObject(QJsonObject json) {

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(grant_type, json[QString("grant_type")]);
    m_grant_type_isSet = !json[QString("grant_type")].isNull() && m_grant_type_isValid;

    m_nf_instance_id_isValid = ::OpenAPI::fromJsonValue(nf_instance_id, json[QString("nfInstanceId")]);
    m_nf_instance_id_isSet = !json[QString("nfInstanceId")].isNull() && m_nf_instance_id_isValid;

    m_nf_type_isValid = ::OpenAPI::fromJsonValue(nf_type, json[QString("nfType")]);
    m_nf_type_isSet = !json[QString("nfType")].isNull() && m_nf_type_isValid;

    m_target_nf_type_isValid = ::OpenAPI::fromJsonValue(target_nf_type, json[QString("targetNfType")]);
    m_target_nf_type_isSet = !json[QString("targetNfType")].isNull() && m_target_nf_type_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_target_nf_instance_id_isValid = ::OpenAPI::fromJsonValue(target_nf_instance_id, json[QString("targetNfInstanceId")]);
    m_target_nf_instance_id_isSet = !json[QString("targetNfInstanceId")].isNull() && m_target_nf_instance_id_isValid;

    m_requester_plmn_isValid = ::OpenAPI::fromJsonValue(requester_plmn, json[QString("requesterPlmn")]);
    m_requester_plmn_isSet = !json[QString("requesterPlmn")].isNull() && m_requester_plmn_isValid;

    m_requester_plmn_list_isValid = ::OpenAPI::fromJsonValue(requester_plmn_list, json[QString("requesterPlmnList")]);
    m_requester_plmn_list_isSet = !json[QString("requesterPlmnList")].isNull() && m_requester_plmn_list_isValid;

    m_requester_snssai_list_isValid = ::OpenAPI::fromJsonValue(requester_snssai_list, json[QString("requesterSnssaiList")]);
    m_requester_snssai_list_isSet = !json[QString("requesterSnssaiList")].isNull() && m_requester_snssai_list_isValid;

    m_requester_fqdn_isValid = ::OpenAPI::fromJsonValue(requester_fqdn, json[QString("requesterFqdn")]);
    m_requester_fqdn_isSet = !json[QString("requesterFqdn")].isNull() && m_requester_fqdn_isValid;

    m_requester_snpn_list_isValid = ::OpenAPI::fromJsonValue(requester_snpn_list, json[QString("requesterSnpnList")]);
    m_requester_snpn_list_isSet = !json[QString("requesterSnpnList")].isNull() && m_requester_snpn_list_isValid;

    m_target_plmn_isValid = ::OpenAPI::fromJsonValue(target_plmn, json[QString("targetPlmn")]);
    m_target_plmn_isSet = !json[QString("targetPlmn")].isNull() && m_target_plmn_isValid;

    m_target_snssai_list_isValid = ::OpenAPI::fromJsonValue(target_snssai_list, json[QString("targetSnssaiList")]);
    m_target_snssai_list_isSet = !json[QString("targetSnssaiList")].isNull() && m_target_snssai_list_isValid;

    m_target_nsi_list_isValid = ::OpenAPI::fromJsonValue(target_nsi_list, json[QString("targetNsiList")]);
    m_target_nsi_list_isSet = !json[QString("targetNsiList")].isNull() && m_target_nsi_list_isValid;

    m_target_nf_set_id_isValid = ::OpenAPI::fromJsonValue(target_nf_set_id, json[QString("targetNfSetId")]);
    m_target_nf_set_id_isSet = !json[QString("targetNfSetId")].isNull() && m_target_nf_set_id_isValid;

    m_target_nf_service_set_id_isValid = ::OpenAPI::fromJsonValue(target_nf_service_set_id, json[QString("targetNfServiceSetId")]);
    m_target_nf_service_set_id_isSet = !json[QString("targetNfServiceSetId")].isNull() && m_target_nf_service_set_id_isValid;
}

QString OAIAccessTokenReq::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessTokenReq::asJsonObject() const {
    QJsonObject obj;
    if (m_grant_type_isSet) {
        obj.insert(QString("grant_type"), ::OpenAPI::toJsonValue(grant_type));
    }
    if (m_nf_instance_id_isSet) {
        obj.insert(QString("nfInstanceId"), ::OpenAPI::toJsonValue(nf_instance_id));
    }
    if (nf_type.isSet()) {
        obj.insert(QString("nfType"), ::OpenAPI::toJsonValue(nf_type));
    }
    if (target_nf_type.isSet()) {
        obj.insert(QString("targetNfType"), ::OpenAPI::toJsonValue(target_nf_type));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(scope));
    }
    if (m_target_nf_instance_id_isSet) {
        obj.insert(QString("targetNfInstanceId"), ::OpenAPI::toJsonValue(target_nf_instance_id));
    }
    if (requester_plmn.isSet()) {
        obj.insert(QString("requesterPlmn"), ::OpenAPI::toJsonValue(requester_plmn));
    }
    if (requester_plmn_list.size() > 0) {
        obj.insert(QString("requesterPlmnList"), ::OpenAPI::toJsonValue(requester_plmn_list));
    }
    if (requester_snssai_list.size() > 0) {
        obj.insert(QString("requesterSnssaiList"), ::OpenAPI::toJsonValue(requester_snssai_list));
    }
    if (m_requester_fqdn_isSet) {
        obj.insert(QString("requesterFqdn"), ::OpenAPI::toJsonValue(requester_fqdn));
    }
    if (requester_snpn_list.size() > 0) {
        obj.insert(QString("requesterSnpnList"), ::OpenAPI::toJsonValue(requester_snpn_list));
    }
    if (target_plmn.isSet()) {
        obj.insert(QString("targetPlmn"), ::OpenAPI::toJsonValue(target_plmn));
    }
    if (target_snssai_list.size() > 0) {
        obj.insert(QString("targetSnssaiList"), ::OpenAPI::toJsonValue(target_snssai_list));
    }
    if (target_nsi_list.size() > 0) {
        obj.insert(QString("targetNsiList"), ::OpenAPI::toJsonValue(target_nsi_list));
    }
    if (m_target_nf_set_id_isSet) {
        obj.insert(QString("targetNfSetId"), ::OpenAPI::toJsonValue(target_nf_set_id));
    }
    if (m_target_nf_service_set_id_isSet) {
        obj.insert(QString("targetNfServiceSetId"), ::OpenAPI::toJsonValue(target_nf_service_set_id));
    }
    return obj;
}

QString OAIAccessTokenReq::getGrantType() const {
    return grant_type;
}
void OAIAccessTokenReq::setGrantType(const QString &grant_type) {
    this->grant_type = grant_type;
    this->m_grant_type_isSet = true;
}

bool OAIAccessTokenReq::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAIAccessTokenReq::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAIAccessTokenReq::getNfInstanceId() const {
    return nf_instance_id;
}
void OAIAccessTokenReq::setNfInstanceId(const QString &nf_instance_id) {
    this->nf_instance_id = nf_instance_id;
    this->m_nf_instance_id_isSet = true;
}

bool OAIAccessTokenReq::is_nf_instance_id_Set() const{
    return m_nf_instance_id_isSet;
}

bool OAIAccessTokenReq::is_nf_instance_id_Valid() const{
    return m_nf_instance_id_isValid;
}

OAINFType OAIAccessTokenReq::getNfType() const {
    return nf_type;
}
void OAIAccessTokenReq::setNfType(const OAINFType &nf_type) {
    this->nf_type = nf_type;
    this->m_nf_type_isSet = true;
}

bool OAIAccessTokenReq::is_nf_type_Set() const{
    return m_nf_type_isSet;
}

bool OAIAccessTokenReq::is_nf_type_Valid() const{
    return m_nf_type_isValid;
}

OAINFType OAIAccessTokenReq::getTargetNfType() const {
    return target_nf_type;
}
void OAIAccessTokenReq::setTargetNfType(const OAINFType &target_nf_type) {
    this->target_nf_type = target_nf_type;
    this->m_target_nf_type_isSet = true;
}

bool OAIAccessTokenReq::is_target_nf_type_Set() const{
    return m_target_nf_type_isSet;
}

bool OAIAccessTokenReq::is_target_nf_type_Valid() const{
    return m_target_nf_type_isValid;
}

QString OAIAccessTokenReq::getScope() const {
    return scope;
}
void OAIAccessTokenReq::setScope(const QString &scope) {
    this->scope = scope;
    this->m_scope_isSet = true;
}

bool OAIAccessTokenReq::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAccessTokenReq::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIAccessTokenReq::getTargetNfInstanceId() const {
    return target_nf_instance_id;
}
void OAIAccessTokenReq::setTargetNfInstanceId(const QString &target_nf_instance_id) {
    this->target_nf_instance_id = target_nf_instance_id;
    this->m_target_nf_instance_id_isSet = true;
}

bool OAIAccessTokenReq::is_target_nf_instance_id_Set() const{
    return m_target_nf_instance_id_isSet;
}

bool OAIAccessTokenReq::is_target_nf_instance_id_Valid() const{
    return m_target_nf_instance_id_isValid;
}

OAIPlmnId OAIAccessTokenReq::getRequesterPlmn() const {
    return requester_plmn;
}
void OAIAccessTokenReq::setRequesterPlmn(const OAIPlmnId &requester_plmn) {
    this->requester_plmn = requester_plmn;
    this->m_requester_plmn_isSet = true;
}

bool OAIAccessTokenReq::is_requester_plmn_Set() const{
    return m_requester_plmn_isSet;
}

bool OAIAccessTokenReq::is_requester_plmn_Valid() const{
    return m_requester_plmn_isValid;
}

QList<OAIPlmnId> OAIAccessTokenReq::getRequesterPlmnList() const {
    return requester_plmn_list;
}
void OAIAccessTokenReq::setRequesterPlmnList(const QList<OAIPlmnId> &requester_plmn_list) {
    this->requester_plmn_list = requester_plmn_list;
    this->m_requester_plmn_list_isSet = true;
}

bool OAIAccessTokenReq::is_requester_plmn_list_Set() const{
    return m_requester_plmn_list_isSet;
}

bool OAIAccessTokenReq::is_requester_plmn_list_Valid() const{
    return m_requester_plmn_list_isValid;
}

QList<OAISnssai> OAIAccessTokenReq::getRequesterSnssaiList() const {
    return requester_snssai_list;
}
void OAIAccessTokenReq::setRequesterSnssaiList(const QList<OAISnssai> &requester_snssai_list) {
    this->requester_snssai_list = requester_snssai_list;
    this->m_requester_snssai_list_isSet = true;
}

bool OAIAccessTokenReq::is_requester_snssai_list_Set() const{
    return m_requester_snssai_list_isSet;
}

bool OAIAccessTokenReq::is_requester_snssai_list_Valid() const{
    return m_requester_snssai_list_isValid;
}

QString OAIAccessTokenReq::getRequesterFqdn() const {
    return requester_fqdn;
}
void OAIAccessTokenReq::setRequesterFqdn(const QString &requester_fqdn) {
    this->requester_fqdn = requester_fqdn;
    this->m_requester_fqdn_isSet = true;
}

bool OAIAccessTokenReq::is_requester_fqdn_Set() const{
    return m_requester_fqdn_isSet;
}

bool OAIAccessTokenReq::is_requester_fqdn_Valid() const{
    return m_requester_fqdn_isValid;
}

QList<OAIPlmnIdNid> OAIAccessTokenReq::getRequesterSnpnList() const {
    return requester_snpn_list;
}
void OAIAccessTokenReq::setRequesterSnpnList(const QList<OAIPlmnIdNid> &requester_snpn_list) {
    this->requester_snpn_list = requester_snpn_list;
    this->m_requester_snpn_list_isSet = true;
}

bool OAIAccessTokenReq::is_requester_snpn_list_Set() const{
    return m_requester_snpn_list_isSet;
}

bool OAIAccessTokenReq::is_requester_snpn_list_Valid() const{
    return m_requester_snpn_list_isValid;
}

OAIPlmnId OAIAccessTokenReq::getTargetPlmn() const {
    return target_plmn;
}
void OAIAccessTokenReq::setTargetPlmn(const OAIPlmnId &target_plmn) {
    this->target_plmn = target_plmn;
    this->m_target_plmn_isSet = true;
}

bool OAIAccessTokenReq::is_target_plmn_Set() const{
    return m_target_plmn_isSet;
}

bool OAIAccessTokenReq::is_target_plmn_Valid() const{
    return m_target_plmn_isValid;
}

QList<OAISnssai> OAIAccessTokenReq::getTargetSnssaiList() const {
    return target_snssai_list;
}
void OAIAccessTokenReq::setTargetSnssaiList(const QList<OAISnssai> &target_snssai_list) {
    this->target_snssai_list = target_snssai_list;
    this->m_target_snssai_list_isSet = true;
}

bool OAIAccessTokenReq::is_target_snssai_list_Set() const{
    return m_target_snssai_list_isSet;
}

bool OAIAccessTokenReq::is_target_snssai_list_Valid() const{
    return m_target_snssai_list_isValid;
}

QList<QString> OAIAccessTokenReq::getTargetNsiList() const {
    return target_nsi_list;
}
void OAIAccessTokenReq::setTargetNsiList(const QList<QString> &target_nsi_list) {
    this->target_nsi_list = target_nsi_list;
    this->m_target_nsi_list_isSet = true;
}

bool OAIAccessTokenReq::is_target_nsi_list_Set() const{
    return m_target_nsi_list_isSet;
}

bool OAIAccessTokenReq::is_target_nsi_list_Valid() const{
    return m_target_nsi_list_isValid;
}

QString OAIAccessTokenReq::getTargetNfSetId() const {
    return target_nf_set_id;
}
void OAIAccessTokenReq::setTargetNfSetId(const QString &target_nf_set_id) {
    this->target_nf_set_id = target_nf_set_id;
    this->m_target_nf_set_id_isSet = true;
}

bool OAIAccessTokenReq::is_target_nf_set_id_Set() const{
    return m_target_nf_set_id_isSet;
}

bool OAIAccessTokenReq::is_target_nf_set_id_Valid() const{
    return m_target_nf_set_id_isValid;
}

QString OAIAccessTokenReq::getTargetNfServiceSetId() const {
    return target_nf_service_set_id;
}
void OAIAccessTokenReq::setTargetNfServiceSetId(const QString &target_nf_service_set_id) {
    this->target_nf_service_set_id = target_nf_service_set_id;
    this->m_target_nf_service_set_id_isSet = true;
}

bool OAIAccessTokenReq::is_target_nf_service_set_id_Set() const{
    return m_target_nf_service_set_id_isSet;
}

bool OAIAccessTokenReq::is_target_nf_service_set_id_Valid() const{
    return m_target_nf_service_set_id_isValid;
}

bool OAIAccessTokenReq::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nf_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (nf_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (target_nf_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_nf_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (requester_plmn.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (requester_plmn_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (requester_snssai_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (requester_snpn_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (target_plmn.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (target_snssai_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (target_nsi_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_nf_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_nf_service_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessTokenReq::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_grant_type_isValid && m_nf_instance_id_isValid && m_scope_isValid && true;
}

} // namespace OpenAPI
