/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICmInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICmInfo::OAICmInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICmInfo::OAICmInfo() {
    this->initializeModel();
}

OAICmInfo::~OAICmInfo() {}

void OAICmInfo::initializeModel() {

    m_cm_state_isSet = false;
    m_cm_state_isValid = false;

    m_access_type_isSet = false;
    m_access_type_isValid = false;
}

void OAICmInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICmInfo::fromJsonObject(QJsonObject json) {

    m_cm_state_isValid = ::OpenAPI::fromJsonValue(cm_state, json[QString("cmState")]);
    m_cm_state_isSet = !json[QString("cmState")].isNull() && m_cm_state_isValid;

    m_access_type_isValid = ::OpenAPI::fromJsonValue(access_type, json[QString("accessType")]);
    m_access_type_isSet = !json[QString("accessType")].isNull() && m_access_type_isValid;
}

QString OAICmInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICmInfo::asJsonObject() const {
    QJsonObject obj;
    if (cm_state.isSet()) {
        obj.insert(QString("cmState"), ::OpenAPI::toJsonValue(cm_state));
    }
    if (access_type.isSet()) {
        obj.insert(QString("accessType"), ::OpenAPI::toJsonValue(access_type));
    }
    return obj;
}

OAICmState OAICmInfo::getCmState() const {
    return cm_state;
}
void OAICmInfo::setCmState(const OAICmState &cm_state) {
    this->cm_state = cm_state;
    this->m_cm_state_isSet = true;
}

bool OAICmInfo::is_cm_state_Set() const{
    return m_cm_state_isSet;
}

bool OAICmInfo::is_cm_state_Valid() const{
    return m_cm_state_isValid;
}

OAIAccessType OAICmInfo::getAccessType() const {
    return access_type;
}
void OAICmInfo::setAccessType(const OAIAccessType &access_type) {
    this->access_type = access_type;
    this->m_access_type_isSet = true;
}

bool OAICmInfo::is_access_type_Set() const{
    return m_access_type_isSet;
}

bool OAICmInfo::is_access_type_Valid() const{
    return m_access_type_isValid;
}

bool OAICmInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (cm_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (access_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICmInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cm_state_isValid && m_access_type_isValid && true;
}

} // namespace OpenAPI
