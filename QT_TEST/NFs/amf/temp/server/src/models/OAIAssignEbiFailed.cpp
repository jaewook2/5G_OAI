/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignEbiFailed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignEbiFailed::OAIAssignEbiFailed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignEbiFailed::OAIAssignEbiFailed() {
    this->initializeModel();
}

OAIAssignEbiFailed::~OAIAssignEbiFailed() {}

void OAIAssignEbiFailed::initializeModel() {

    m_pdu_session_id_isSet = false;
    m_pdu_session_id_isValid = false;

    m_failed_arp_list_isSet = false;
    m_failed_arp_list_isValid = false;
}

void OAIAssignEbiFailed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignEbiFailed::fromJsonObject(QJsonObject json) {

    m_pdu_session_id_isValid = ::OpenAPI::fromJsonValue(pdu_session_id, json[QString("pduSessionId")]);
    m_pdu_session_id_isSet = !json[QString("pduSessionId")].isNull() && m_pdu_session_id_isValid;

    m_failed_arp_list_isValid = ::OpenAPI::fromJsonValue(failed_arp_list, json[QString("failedArpList")]);
    m_failed_arp_list_isSet = !json[QString("failedArpList")].isNull() && m_failed_arp_list_isValid;
}

QString OAIAssignEbiFailed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignEbiFailed::asJsonObject() const {
    QJsonObject obj;
    if (m_pdu_session_id_isSet) {
        obj.insert(QString("pduSessionId"), ::OpenAPI::toJsonValue(pdu_session_id));
    }
    if (failed_arp_list.size() > 0) {
        obj.insert(QString("failedArpList"), ::OpenAPI::toJsonValue(failed_arp_list));
    }
    return obj;
}

qint32 OAIAssignEbiFailed::getPduSessionId() const {
    return pdu_session_id;
}
void OAIAssignEbiFailed::setPduSessionId(const qint32 &pdu_session_id) {
    this->pdu_session_id = pdu_session_id;
    this->m_pdu_session_id_isSet = true;
}

bool OAIAssignEbiFailed::is_pdu_session_id_Set() const{
    return m_pdu_session_id_isSet;
}

bool OAIAssignEbiFailed::is_pdu_session_id_Valid() const{
    return m_pdu_session_id_isValid;
}

QList<OAIArp> OAIAssignEbiFailed::getFailedArpList() const {
    return failed_arp_list;
}
void OAIAssignEbiFailed::setFailedArpList(const QList<OAIArp> &failed_arp_list) {
    this->failed_arp_list = failed_arp_list;
    this->m_failed_arp_list_isSet = true;
}

bool OAIAssignEbiFailed::is_failed_arp_list_Set() const{
    return m_failed_arp_list_isSet;
}

bool OAIAssignEbiFailed::is_failed_arp_list_Valid() const{
    return m_failed_arp_list_isValid;
}

bool OAIAssignEbiFailed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pdu_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (failed_arp_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignEbiFailed::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pdu_session_id_isValid && true;
}

} // namespace OpenAPI
