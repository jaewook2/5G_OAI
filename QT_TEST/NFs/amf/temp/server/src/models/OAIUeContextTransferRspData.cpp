/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUeContextTransferRspData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUeContextTransferRspData::OAIUeContextTransferRspData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUeContextTransferRspData::OAIUeContextTransferRspData() {
    this->initializeModel();
}

OAIUeContextTransferRspData::~OAIUeContextTransferRspData() {}

void OAIUeContextTransferRspData::initializeModel() {

    m_ue_context_isSet = false;
    m_ue_context_isValid = false;

    m_ue_radio_capability_isSet = false;
    m_ue_radio_capability_isValid = false;

    m_ue_nbiot_radio_capability_isSet = false;
    m_ue_nbiot_radio_capability_isValid = false;

    m_supported_features_isSet = false;
    m_supported_features_isValid = false;
}

void OAIUeContextTransferRspData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUeContextTransferRspData::fromJsonObject(QJsonObject json) {

    m_ue_context_isValid = ::OpenAPI::fromJsonValue(ue_context, json[QString("ueContext")]);
    m_ue_context_isSet = !json[QString("ueContext")].isNull() && m_ue_context_isValid;

    m_ue_radio_capability_isValid = ::OpenAPI::fromJsonValue(ue_radio_capability, json[QString("ueRadioCapability")]);
    m_ue_radio_capability_isSet = !json[QString("ueRadioCapability")].isNull() && m_ue_radio_capability_isValid;

    m_ue_nbiot_radio_capability_isValid = ::OpenAPI::fromJsonValue(ue_nbiot_radio_capability, json[QString("ueNbiotRadioCapability")]);
    m_ue_nbiot_radio_capability_isSet = !json[QString("ueNbiotRadioCapability")].isNull() && m_ue_nbiot_radio_capability_isValid;

    m_supported_features_isValid = ::OpenAPI::fromJsonValue(supported_features, json[QString("supportedFeatures")]);
    m_supported_features_isSet = !json[QString("supportedFeatures")].isNull() && m_supported_features_isValid;
}

QString OAIUeContextTransferRspData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUeContextTransferRspData::asJsonObject() const {
    QJsonObject obj;
    if (ue_context.isSet()) {
        obj.insert(QString("ueContext"), ::OpenAPI::toJsonValue(ue_context));
    }
    if (ue_radio_capability.isSet()) {
        obj.insert(QString("ueRadioCapability"), ::OpenAPI::toJsonValue(ue_radio_capability));
    }
    if (ue_nbiot_radio_capability.isSet()) {
        obj.insert(QString("ueNbiotRadioCapability"), ::OpenAPI::toJsonValue(ue_nbiot_radio_capability));
    }
    if (m_supported_features_isSet) {
        obj.insert(QString("supportedFeatures"), ::OpenAPI::toJsonValue(supported_features));
    }
    return obj;
}

OAIUeContext OAIUeContextTransferRspData::getUeContext() const {
    return ue_context;
}
void OAIUeContextTransferRspData::setUeContext(const OAIUeContext &ue_context) {
    this->ue_context = ue_context;
    this->m_ue_context_isSet = true;
}

bool OAIUeContextTransferRspData::is_ue_context_Set() const{
    return m_ue_context_isSet;
}

bool OAIUeContextTransferRspData::is_ue_context_Valid() const{
    return m_ue_context_isValid;
}

OAIN2InfoContent OAIUeContextTransferRspData::getUeRadioCapability() const {
    return ue_radio_capability;
}
void OAIUeContextTransferRspData::setUeRadioCapability(const OAIN2InfoContent &ue_radio_capability) {
    this->ue_radio_capability = ue_radio_capability;
    this->m_ue_radio_capability_isSet = true;
}

bool OAIUeContextTransferRspData::is_ue_radio_capability_Set() const{
    return m_ue_radio_capability_isSet;
}

bool OAIUeContextTransferRspData::is_ue_radio_capability_Valid() const{
    return m_ue_radio_capability_isValid;
}

OAIN2InfoContent OAIUeContextTransferRspData::getUeNbiotRadioCapability() const {
    return ue_nbiot_radio_capability;
}
void OAIUeContextTransferRspData::setUeNbiotRadioCapability(const OAIN2InfoContent &ue_nbiot_radio_capability) {
    this->ue_nbiot_radio_capability = ue_nbiot_radio_capability;
    this->m_ue_nbiot_radio_capability_isSet = true;
}

bool OAIUeContextTransferRspData::is_ue_nbiot_radio_capability_Set() const{
    return m_ue_nbiot_radio_capability_isSet;
}

bool OAIUeContextTransferRspData::is_ue_nbiot_radio_capability_Valid() const{
    return m_ue_nbiot_radio_capability_isValid;
}

QString OAIUeContextTransferRspData::getSupportedFeatures() const {
    return supported_features;
}
void OAIUeContextTransferRspData::setSupportedFeatures(const QString &supported_features) {
    this->supported_features = supported_features;
    this->m_supported_features_isSet = true;
}

bool OAIUeContextTransferRspData::is_supported_features_Set() const{
    return m_supported_features_isSet;
}

bool OAIUeContextTransferRspData::is_supported_features_Valid() const{
    return m_supported_features_isValid;
}

bool OAIUeContextTransferRspData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (ue_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (ue_radio_capability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (ue_nbiot_radio_capability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_features_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUeContextTransferRspData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ue_context_isValid && true;
}

} // namespace OpenAPI
