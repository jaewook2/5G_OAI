/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINonUeN2InfoSubscriptionCreateData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINonUeN2InfoSubscriptionCreateData::OAINonUeN2InfoSubscriptionCreateData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINonUeN2InfoSubscriptionCreateData::OAINonUeN2InfoSubscriptionCreateData() {
    this->initializeModel();
}

OAINonUeN2InfoSubscriptionCreateData::~OAINonUeN2InfoSubscriptionCreateData() {}

void OAINonUeN2InfoSubscriptionCreateData::initializeModel() {

    m_global_ran_node_list_isSet = false;
    m_global_ran_node_list_isValid = false;

    m_an_type_list_isSet = false;
    m_an_type_list_isValid = false;

    m_n2_information_class_isSet = false;
    m_n2_information_class_isValid = false;

    m_n2_notify_callback_uri_isSet = false;
    m_n2_notify_callback_uri_isValid = false;

    m_nf_id_isSet = false;
    m_nf_id_isValid = false;

    m_supported_features_isSet = false;
    m_supported_features_isValid = false;
}

void OAINonUeN2InfoSubscriptionCreateData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINonUeN2InfoSubscriptionCreateData::fromJsonObject(QJsonObject json) {

    m_global_ran_node_list_isValid = ::OpenAPI::fromJsonValue(global_ran_node_list, json[QString("globalRanNodeList")]);
    m_global_ran_node_list_isSet = !json[QString("globalRanNodeList")].isNull() && m_global_ran_node_list_isValid;

    m_an_type_list_isValid = ::OpenAPI::fromJsonValue(an_type_list, json[QString("anTypeList")]);
    m_an_type_list_isSet = !json[QString("anTypeList")].isNull() && m_an_type_list_isValid;

    m_n2_information_class_isValid = ::OpenAPI::fromJsonValue(n2_information_class, json[QString("n2InformationClass")]);
    m_n2_information_class_isSet = !json[QString("n2InformationClass")].isNull() && m_n2_information_class_isValid;

    m_n2_notify_callback_uri_isValid = ::OpenAPI::fromJsonValue(n2_notify_callback_uri, json[QString("n2NotifyCallbackUri")]);
    m_n2_notify_callback_uri_isSet = !json[QString("n2NotifyCallbackUri")].isNull() && m_n2_notify_callback_uri_isValid;

    m_nf_id_isValid = ::OpenAPI::fromJsonValue(nf_id, json[QString("nfId")]);
    m_nf_id_isSet = !json[QString("nfId")].isNull() && m_nf_id_isValid;

    m_supported_features_isValid = ::OpenAPI::fromJsonValue(supported_features, json[QString("supportedFeatures")]);
    m_supported_features_isSet = !json[QString("supportedFeatures")].isNull() && m_supported_features_isValid;
}

QString OAINonUeN2InfoSubscriptionCreateData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINonUeN2InfoSubscriptionCreateData::asJsonObject() const {
    QJsonObject obj;
    if (global_ran_node_list.size() > 0) {
        obj.insert(QString("globalRanNodeList"), ::OpenAPI::toJsonValue(global_ran_node_list));
    }
    if (an_type_list.size() > 0) {
        obj.insert(QString("anTypeList"), ::OpenAPI::toJsonValue(an_type_list));
    }
    if (n2_information_class.isSet()) {
        obj.insert(QString("n2InformationClass"), ::OpenAPI::toJsonValue(n2_information_class));
    }
    if (m_n2_notify_callback_uri_isSet) {
        obj.insert(QString("n2NotifyCallbackUri"), ::OpenAPI::toJsonValue(n2_notify_callback_uri));
    }
    if (m_nf_id_isSet) {
        obj.insert(QString("nfId"), ::OpenAPI::toJsonValue(nf_id));
    }
    if (m_supported_features_isSet) {
        obj.insert(QString("supportedFeatures"), ::OpenAPI::toJsonValue(supported_features));
    }
    return obj;
}

QList<OAIGlobalRanNodeId> OAINonUeN2InfoSubscriptionCreateData::getGlobalRanNodeList() const {
    return global_ran_node_list;
}
void OAINonUeN2InfoSubscriptionCreateData::setGlobalRanNodeList(const QList<OAIGlobalRanNodeId> &global_ran_node_list) {
    this->global_ran_node_list = global_ran_node_list;
    this->m_global_ran_node_list_isSet = true;
}

bool OAINonUeN2InfoSubscriptionCreateData::is_global_ran_node_list_Set() const{
    return m_global_ran_node_list_isSet;
}

bool OAINonUeN2InfoSubscriptionCreateData::is_global_ran_node_list_Valid() const{
    return m_global_ran_node_list_isValid;
}

QList<OAIAccessType> OAINonUeN2InfoSubscriptionCreateData::getAnTypeList() const {
    return an_type_list;
}
void OAINonUeN2InfoSubscriptionCreateData::setAnTypeList(const QList<OAIAccessType> &an_type_list) {
    this->an_type_list = an_type_list;
    this->m_an_type_list_isSet = true;
}

bool OAINonUeN2InfoSubscriptionCreateData::is_an_type_list_Set() const{
    return m_an_type_list_isSet;
}

bool OAINonUeN2InfoSubscriptionCreateData::is_an_type_list_Valid() const{
    return m_an_type_list_isValid;
}

OAIN2InformationClass OAINonUeN2InfoSubscriptionCreateData::getN2InformationClass() const {
    return n2_information_class;
}
void OAINonUeN2InfoSubscriptionCreateData::setN2InformationClass(const OAIN2InformationClass &n2_information_class) {
    this->n2_information_class = n2_information_class;
    this->m_n2_information_class_isSet = true;
}

bool OAINonUeN2InfoSubscriptionCreateData::is_n2_information_class_Set() const{
    return m_n2_information_class_isSet;
}

bool OAINonUeN2InfoSubscriptionCreateData::is_n2_information_class_Valid() const{
    return m_n2_information_class_isValid;
}

QString OAINonUeN2InfoSubscriptionCreateData::getN2NotifyCallbackUri() const {
    return n2_notify_callback_uri;
}
void OAINonUeN2InfoSubscriptionCreateData::setN2NotifyCallbackUri(const QString &n2_notify_callback_uri) {
    this->n2_notify_callback_uri = n2_notify_callback_uri;
    this->m_n2_notify_callback_uri_isSet = true;
}

bool OAINonUeN2InfoSubscriptionCreateData::is_n2_notify_callback_uri_Set() const{
    return m_n2_notify_callback_uri_isSet;
}

bool OAINonUeN2InfoSubscriptionCreateData::is_n2_notify_callback_uri_Valid() const{
    return m_n2_notify_callback_uri_isValid;
}

QString OAINonUeN2InfoSubscriptionCreateData::getNfId() const {
    return nf_id;
}
void OAINonUeN2InfoSubscriptionCreateData::setNfId(const QString &nf_id) {
    this->nf_id = nf_id;
    this->m_nf_id_isSet = true;
}

bool OAINonUeN2InfoSubscriptionCreateData::is_nf_id_Set() const{
    return m_nf_id_isSet;
}

bool OAINonUeN2InfoSubscriptionCreateData::is_nf_id_Valid() const{
    return m_nf_id_isValid;
}

QString OAINonUeN2InfoSubscriptionCreateData::getSupportedFeatures() const {
    return supported_features;
}
void OAINonUeN2InfoSubscriptionCreateData::setSupportedFeatures(const QString &supported_features) {
    this->supported_features = supported_features;
    this->m_supported_features_isSet = true;
}

bool OAINonUeN2InfoSubscriptionCreateData::is_supported_features_Set() const{
    return m_supported_features_isSet;
}

bool OAINonUeN2InfoSubscriptionCreateData::is_supported_features_Valid() const{
    return m_supported_features_isValid;
}

bool OAINonUeN2InfoSubscriptionCreateData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (global_ran_node_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (an_type_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (n2_information_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_n2_notify_callback_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_features_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINonUeN2InfoSubscriptionCreateData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_n2_information_class_isValid && m_n2_notify_callback_uri_isValid && true;
}

} // namespace OpenAPI
