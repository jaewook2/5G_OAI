/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUeContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUeContext::OAIUeContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUeContext::OAIUeContext() {
    this->initializeModel();
}

OAIUeContext::~OAIUeContext() {}

void OAIUeContext::initializeModel() {

    m_supi_isSet = false;
    m_supi_isValid = false;

    m_supi_unauth_ind_isSet = false;
    m_supi_unauth_ind_isValid = false;

    m_gpsi_list_isSet = false;
    m_gpsi_list_isValid = false;

    m_pei_isSet = false;
    m_pei_isValid = false;

    m_udm_group_id_isSet = false;
    m_udm_group_id_isValid = false;

    m_ausf_group_id_isSet = false;
    m_ausf_group_id_isValid = false;

    m_pcf_group_id_isSet = false;
    m_pcf_group_id_isValid = false;

    m_routing_indicator_isSet = false;
    m_routing_indicator_isValid = false;

    m_group_list_isSet = false;
    m_group_list_isValid = false;

    m_drx_parameter_isSet = false;
    m_drx_parameter_isValid = false;

    m_sub_rfsp_isSet = false;
    m_sub_rfsp_isValid = false;

    m_used_rfsp_isSet = false;
    m_used_rfsp_isValid = false;

    m_sub_ue_ambr_isSet = false;
    m_sub_ue_ambr_isValid = false;

    m_smsf_id_isSet = false;
    m_smsf_id_isValid = false;

    m_seaf_data_isSet = false;
    m_seaf_data_isValid = false;

    m_r_5g_mm_capability_isSet = false;
    m_r_5g_mm_capability_isValid = false;

    m_pcf_id_isSet = false;
    m_pcf_id_isValid = false;

    m_pcf_set_id_isSet = false;
    m_pcf_set_id_isValid = false;

    m_pcf_amp_service_set_id_isSet = false;
    m_pcf_amp_service_set_id_isValid = false;

    m_pcf_uep_service_set_id_isSet = false;
    m_pcf_uep_service_set_id_isValid = false;

    m_pcf_binding_isSet = false;
    m_pcf_binding_isValid = false;

    m_pcf_am_policy_uri_isSet = false;
    m_pcf_am_policy_uri_isValid = false;

    m_am_policy_req_trigger_list_isSet = false;
    m_am_policy_req_trigger_list_isValid = false;

    m_pcf_ue_policy_uri_isSet = false;
    m_pcf_ue_policy_uri_isValid = false;

    m_ue_policy_req_trigger_list_isSet = false;
    m_ue_policy_req_trigger_list_isValid = false;

    m_hpcf_id_isSet = false;
    m_hpcf_id_isValid = false;

    m_hpcf_set_id_isSet = false;
    m_hpcf_set_id_isValid = false;

    m_restricted_rat_list_isSet = false;
    m_restricted_rat_list_isValid = false;

    m_forbidden_area_list_isSet = false;
    m_forbidden_area_list_isValid = false;

    m_service_area_restriction_isSet = false;
    m_service_area_restriction_isValid = false;

    m_restricted_core_nw_type_list_isSet = false;
    m_restricted_core_nw_type_list_isValid = false;

    m_event_subscription_list_isSet = false;
    m_event_subscription_list_isValid = false;

    m_mm_context_list_isSet = false;
    m_mm_context_list_isValid = false;

    m_session_context_list_isSet = false;
    m_session_context_list_isValid = false;

    m_trace_data_isSet = false;
    m_trace_data_isValid = false;

    m_service_gap_expiry_time_isSet = false;
    m_service_gap_expiry_time_isValid = false;

    m_stn_sr_isSet = false;
    m_stn_sr_isValid = false;

    m_c_msisdn_isSet = false;
    m_c_msisdn_isValid = false;

    m_ms_classmark2_isSet = false;
    m_ms_classmark2_isValid = false;

    m_supported_codec_list_isSet = false;
    m_supported_codec_list_isValid = false;

    m_small_data_rate_status_infos_isSet = false;
    m_small_data_rate_status_infos_isValid = false;

    m_restricted_primary_rat_list_isSet = false;
    m_restricted_primary_rat_list_isValid = false;

    m_restricted_secondary_rat_list_isSet = false;
    m_restricted_secondary_rat_list_isValid = false;

    m_v2x_context_isSet = false;
    m_v2x_context_isValid = false;

    m_lte_cat_m_ind_isSet = false;
    m_lte_cat_m_ind_isValid = false;

    m_mo_exp_data_counter_isSet = false;
    m_mo_exp_data_counter_isValid = false;

    m_cag_data_isSet = false;
    m_cag_data_isValid = false;

    m_management_mdt_ind_isSet = false;
    m_management_mdt_ind_isValid = false;

    m_immediate_mdt_conf_isSet = false;
    m_immediate_mdt_conf_isValid = false;

    m_ec_restriction_data_wb_isSet = false;
    m_ec_restriction_data_wb_isValid = false;

    m_ec_restriction_data_nb_isSet = false;
    m_ec_restriction_data_nb_isValid = false;

    m_iab_operation_allowed_isSet = false;
    m_iab_operation_allowed_isValid = false;

    m_used_service_area_restriction_isSet = false;
    m_used_service_area_restriction_isValid = false;

    m_pra_in_am_policy_isSet = false;
    m_pra_in_am_policy_isValid = false;

    m_updp_subscription_data_isSet = false;
    m_updp_subscription_data_isValid = false;
}

void OAIUeContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUeContext::fromJsonObject(QJsonObject json) {

    m_supi_isValid = ::OpenAPI::fromJsonValue(supi, json[QString("supi")]);
    m_supi_isSet = !json[QString("supi")].isNull() && m_supi_isValid;

    m_supi_unauth_ind_isValid = ::OpenAPI::fromJsonValue(supi_unauth_ind, json[QString("supiUnauthInd")]);
    m_supi_unauth_ind_isSet = !json[QString("supiUnauthInd")].isNull() && m_supi_unauth_ind_isValid;

    m_gpsi_list_isValid = ::OpenAPI::fromJsonValue(gpsi_list, json[QString("gpsiList")]);
    m_gpsi_list_isSet = !json[QString("gpsiList")].isNull() && m_gpsi_list_isValid;

    m_pei_isValid = ::OpenAPI::fromJsonValue(pei, json[QString("pei")]);
    m_pei_isSet = !json[QString("pei")].isNull() && m_pei_isValid;

    m_udm_group_id_isValid = ::OpenAPI::fromJsonValue(udm_group_id, json[QString("udmGroupId")]);
    m_udm_group_id_isSet = !json[QString("udmGroupId")].isNull() && m_udm_group_id_isValid;

    m_ausf_group_id_isValid = ::OpenAPI::fromJsonValue(ausf_group_id, json[QString("ausfGroupId")]);
    m_ausf_group_id_isSet = !json[QString("ausfGroupId")].isNull() && m_ausf_group_id_isValid;

    m_pcf_group_id_isValid = ::OpenAPI::fromJsonValue(pcf_group_id, json[QString("pcfGroupId")]);
    m_pcf_group_id_isSet = !json[QString("pcfGroupId")].isNull() && m_pcf_group_id_isValid;

    m_routing_indicator_isValid = ::OpenAPI::fromJsonValue(routing_indicator, json[QString("routingIndicator")]);
    m_routing_indicator_isSet = !json[QString("routingIndicator")].isNull() && m_routing_indicator_isValid;

    m_group_list_isValid = ::OpenAPI::fromJsonValue(group_list, json[QString("groupList")]);
    m_group_list_isSet = !json[QString("groupList")].isNull() && m_group_list_isValid;

    m_drx_parameter_isValid = ::OpenAPI::fromJsonValue(drx_parameter, json[QString("drxParameter")]);
    m_drx_parameter_isSet = !json[QString("drxParameter")].isNull() && m_drx_parameter_isValid;

    m_sub_rfsp_isValid = ::OpenAPI::fromJsonValue(sub_rfsp, json[QString("subRfsp")]);
    m_sub_rfsp_isSet = !json[QString("subRfsp")].isNull() && m_sub_rfsp_isValid;

    m_used_rfsp_isValid = ::OpenAPI::fromJsonValue(used_rfsp, json[QString("usedRfsp")]);
    m_used_rfsp_isSet = !json[QString("usedRfsp")].isNull() && m_used_rfsp_isValid;

    m_sub_ue_ambr_isValid = ::OpenAPI::fromJsonValue(sub_ue_ambr, json[QString("subUeAmbr")]);
    m_sub_ue_ambr_isSet = !json[QString("subUeAmbr")].isNull() && m_sub_ue_ambr_isValid;

    m_smsf_id_isValid = ::OpenAPI::fromJsonValue(smsf_id, json[QString("smsfId")]);
    m_smsf_id_isSet = !json[QString("smsfId")].isNull() && m_smsf_id_isValid;

    m_seaf_data_isValid = ::OpenAPI::fromJsonValue(seaf_data, json[QString("seafData")]);
    m_seaf_data_isSet = !json[QString("seafData")].isNull() && m_seaf_data_isValid;

    m_r_5g_mm_capability_isValid = ::OpenAPI::fromJsonValue(r_5g_mm_capability, json[QString("5gMmCapability")]);
    m_r_5g_mm_capability_isSet = !json[QString("5gMmCapability")].isNull() && m_r_5g_mm_capability_isValid;

    m_pcf_id_isValid = ::OpenAPI::fromJsonValue(pcf_id, json[QString("pcfId")]);
    m_pcf_id_isSet = !json[QString("pcfId")].isNull() && m_pcf_id_isValid;

    m_pcf_set_id_isValid = ::OpenAPI::fromJsonValue(pcf_set_id, json[QString("pcfSetId")]);
    m_pcf_set_id_isSet = !json[QString("pcfSetId")].isNull() && m_pcf_set_id_isValid;

    m_pcf_amp_service_set_id_isValid = ::OpenAPI::fromJsonValue(pcf_amp_service_set_id, json[QString("pcfAmpServiceSetId")]);
    m_pcf_amp_service_set_id_isSet = !json[QString("pcfAmpServiceSetId")].isNull() && m_pcf_amp_service_set_id_isValid;

    m_pcf_uep_service_set_id_isValid = ::OpenAPI::fromJsonValue(pcf_uep_service_set_id, json[QString("pcfUepServiceSetId")]);
    m_pcf_uep_service_set_id_isSet = !json[QString("pcfUepServiceSetId")].isNull() && m_pcf_uep_service_set_id_isValid;

    m_pcf_binding_isValid = ::OpenAPI::fromJsonValue(pcf_binding, json[QString("pcfBinding")]);
    m_pcf_binding_isSet = !json[QString("pcfBinding")].isNull() && m_pcf_binding_isValid;

    m_pcf_am_policy_uri_isValid = ::OpenAPI::fromJsonValue(pcf_am_policy_uri, json[QString("pcfAmPolicyUri")]);
    m_pcf_am_policy_uri_isSet = !json[QString("pcfAmPolicyUri")].isNull() && m_pcf_am_policy_uri_isValid;

    m_am_policy_req_trigger_list_isValid = ::OpenAPI::fromJsonValue(am_policy_req_trigger_list, json[QString("amPolicyReqTriggerList")]);
    m_am_policy_req_trigger_list_isSet = !json[QString("amPolicyReqTriggerList")].isNull() && m_am_policy_req_trigger_list_isValid;

    m_pcf_ue_policy_uri_isValid = ::OpenAPI::fromJsonValue(pcf_ue_policy_uri, json[QString("pcfUePolicyUri")]);
    m_pcf_ue_policy_uri_isSet = !json[QString("pcfUePolicyUri")].isNull() && m_pcf_ue_policy_uri_isValid;

    m_ue_policy_req_trigger_list_isValid = ::OpenAPI::fromJsonValue(ue_policy_req_trigger_list, json[QString("uePolicyReqTriggerList")]);
    m_ue_policy_req_trigger_list_isSet = !json[QString("uePolicyReqTriggerList")].isNull() && m_ue_policy_req_trigger_list_isValid;

    m_hpcf_id_isValid = ::OpenAPI::fromJsonValue(hpcf_id, json[QString("hpcfId")]);
    m_hpcf_id_isSet = !json[QString("hpcfId")].isNull() && m_hpcf_id_isValid;

    m_hpcf_set_id_isValid = ::OpenAPI::fromJsonValue(hpcf_set_id, json[QString("hpcfSetId")]);
    m_hpcf_set_id_isSet = !json[QString("hpcfSetId")].isNull() && m_hpcf_set_id_isValid;

    m_restricted_rat_list_isValid = ::OpenAPI::fromJsonValue(restricted_rat_list, json[QString("restrictedRatList")]);
    m_restricted_rat_list_isSet = !json[QString("restrictedRatList")].isNull() && m_restricted_rat_list_isValid;

    m_forbidden_area_list_isValid = ::OpenAPI::fromJsonValue(forbidden_area_list, json[QString("forbiddenAreaList")]);
    m_forbidden_area_list_isSet = !json[QString("forbiddenAreaList")].isNull() && m_forbidden_area_list_isValid;

    m_service_area_restriction_isValid = ::OpenAPI::fromJsonValue(service_area_restriction, json[QString("serviceAreaRestriction")]);
    m_service_area_restriction_isSet = !json[QString("serviceAreaRestriction")].isNull() && m_service_area_restriction_isValid;

    m_restricted_core_nw_type_list_isValid = ::OpenAPI::fromJsonValue(restricted_core_nw_type_list, json[QString("restrictedCoreNwTypeList")]);
    m_restricted_core_nw_type_list_isSet = !json[QString("restrictedCoreNwTypeList")].isNull() && m_restricted_core_nw_type_list_isValid;

    m_event_subscription_list_isValid = ::OpenAPI::fromJsonValue(event_subscription_list, json[QString("eventSubscriptionList")]);
    m_event_subscription_list_isSet = !json[QString("eventSubscriptionList")].isNull() && m_event_subscription_list_isValid;

    m_mm_context_list_isValid = ::OpenAPI::fromJsonValue(mm_context_list, json[QString("mmContextList")]);
    m_mm_context_list_isSet = !json[QString("mmContextList")].isNull() && m_mm_context_list_isValid;

    m_session_context_list_isValid = ::OpenAPI::fromJsonValue(session_context_list, json[QString("sessionContextList")]);
    m_session_context_list_isSet = !json[QString("sessionContextList")].isNull() && m_session_context_list_isValid;

    m_trace_data_isValid = ::OpenAPI::fromJsonValue(trace_data, json[QString("traceData")]);
    m_trace_data_isSet = !json[QString("traceData")].isNull() && m_trace_data_isValid;

    m_service_gap_expiry_time_isValid = ::OpenAPI::fromJsonValue(service_gap_expiry_time, json[QString("serviceGapExpiryTime")]);
    m_service_gap_expiry_time_isSet = !json[QString("serviceGapExpiryTime")].isNull() && m_service_gap_expiry_time_isValid;

    m_stn_sr_isValid = ::OpenAPI::fromJsonValue(stn_sr, json[QString("stnSr")]);
    m_stn_sr_isSet = !json[QString("stnSr")].isNull() && m_stn_sr_isValid;

    m_c_msisdn_isValid = ::OpenAPI::fromJsonValue(c_msisdn, json[QString("cMsisdn")]);
    m_c_msisdn_isSet = !json[QString("cMsisdn")].isNull() && m_c_msisdn_isValid;

    m_ms_classmark2_isValid = ::OpenAPI::fromJsonValue(ms_classmark2, json[QString("msClassmark2")]);
    m_ms_classmark2_isSet = !json[QString("msClassmark2")].isNull() && m_ms_classmark2_isValid;

    m_supported_codec_list_isValid = ::OpenAPI::fromJsonValue(supported_codec_list, json[QString("supportedCodecList")]);
    m_supported_codec_list_isSet = !json[QString("supportedCodecList")].isNull() && m_supported_codec_list_isValid;

    m_small_data_rate_status_infos_isValid = ::OpenAPI::fromJsonValue(small_data_rate_status_infos, json[QString("smallDataRateStatusInfos")]);
    m_small_data_rate_status_infos_isSet = !json[QString("smallDataRateStatusInfos")].isNull() && m_small_data_rate_status_infos_isValid;

    m_restricted_primary_rat_list_isValid = ::OpenAPI::fromJsonValue(restricted_primary_rat_list, json[QString("restrictedPrimaryRatList")]);
    m_restricted_primary_rat_list_isSet = !json[QString("restrictedPrimaryRatList")].isNull() && m_restricted_primary_rat_list_isValid;

    m_restricted_secondary_rat_list_isValid = ::OpenAPI::fromJsonValue(restricted_secondary_rat_list, json[QString("restrictedSecondaryRatList")]);
    m_restricted_secondary_rat_list_isSet = !json[QString("restrictedSecondaryRatList")].isNull() && m_restricted_secondary_rat_list_isValid;

    m_v2x_context_isValid = ::OpenAPI::fromJsonValue(v2x_context, json[QString("v2xContext")]);
    m_v2x_context_isSet = !json[QString("v2xContext")].isNull() && m_v2x_context_isValid;

    m_lte_cat_m_ind_isValid = ::OpenAPI::fromJsonValue(lte_cat_m_ind, json[QString("lteCatMInd")]);
    m_lte_cat_m_ind_isSet = !json[QString("lteCatMInd")].isNull() && m_lte_cat_m_ind_isValid;

    m_mo_exp_data_counter_isValid = ::OpenAPI::fromJsonValue(mo_exp_data_counter, json[QString("moExpDataCounter")]);
    m_mo_exp_data_counter_isSet = !json[QString("moExpDataCounter")].isNull() && m_mo_exp_data_counter_isValid;

    m_cag_data_isValid = ::OpenAPI::fromJsonValue(cag_data, json[QString("cagData")]);
    m_cag_data_isSet = !json[QString("cagData")].isNull() && m_cag_data_isValid;

    m_management_mdt_ind_isValid = ::OpenAPI::fromJsonValue(management_mdt_ind, json[QString("managementMdtInd")]);
    m_management_mdt_ind_isSet = !json[QString("managementMdtInd")].isNull() && m_management_mdt_ind_isValid;

    m_immediate_mdt_conf_isValid = ::OpenAPI::fromJsonValue(immediate_mdt_conf, json[QString("immediateMdtConf")]);
    m_immediate_mdt_conf_isSet = !json[QString("immediateMdtConf")].isNull() && m_immediate_mdt_conf_isValid;

    m_ec_restriction_data_wb_isValid = ::OpenAPI::fromJsonValue(ec_restriction_data_wb, json[QString("ecRestrictionDataWb")]);
    m_ec_restriction_data_wb_isSet = !json[QString("ecRestrictionDataWb")].isNull() && m_ec_restriction_data_wb_isValid;

    m_ec_restriction_data_nb_isValid = ::OpenAPI::fromJsonValue(ec_restriction_data_nb, json[QString("ecRestrictionDataNb")]);
    m_ec_restriction_data_nb_isSet = !json[QString("ecRestrictionDataNb")].isNull() && m_ec_restriction_data_nb_isValid;

    m_iab_operation_allowed_isValid = ::OpenAPI::fromJsonValue(iab_operation_allowed, json[QString("iabOperationAllowed")]);
    m_iab_operation_allowed_isSet = !json[QString("iabOperationAllowed")].isNull() && m_iab_operation_allowed_isValid;

    m_used_service_area_restriction_isValid = ::OpenAPI::fromJsonValue(used_service_area_restriction, json[QString("usedServiceAreaRestriction")]);
    m_used_service_area_restriction_isSet = !json[QString("usedServiceAreaRestriction")].isNull() && m_used_service_area_restriction_isValid;

    m_pra_in_am_policy_isValid = ::OpenAPI::fromJsonValue(pra_in_am_policy, json[QString("praInAmPolicy")]);
    m_pra_in_am_policy_isSet = !json[QString("praInAmPolicy")].isNull() && m_pra_in_am_policy_isValid;

    m_updp_subscription_data_isValid = ::OpenAPI::fromJsonValue(updp_subscription_data, json[QString("updpSubscriptionData")]);
    m_updp_subscription_data_isSet = !json[QString("updpSubscriptionData")].isNull() && m_updp_subscription_data_isValid;
}

QString OAIUeContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUeContext::asJsonObject() const {
    QJsonObject obj;
    if (m_supi_isSet) {
        obj.insert(QString("supi"), ::OpenAPI::toJsonValue(supi));
    }
    if (m_supi_unauth_ind_isSet) {
        obj.insert(QString("supiUnauthInd"), ::OpenAPI::toJsonValue(supi_unauth_ind));
    }
    if (gpsi_list.size() > 0) {
        obj.insert(QString("gpsiList"), ::OpenAPI::toJsonValue(gpsi_list));
    }
    if (m_pei_isSet) {
        obj.insert(QString("pei"), ::OpenAPI::toJsonValue(pei));
    }
    if (m_udm_group_id_isSet) {
        obj.insert(QString("udmGroupId"), ::OpenAPI::toJsonValue(udm_group_id));
    }
    if (m_ausf_group_id_isSet) {
        obj.insert(QString("ausfGroupId"), ::OpenAPI::toJsonValue(ausf_group_id));
    }
    if (m_pcf_group_id_isSet) {
        obj.insert(QString("pcfGroupId"), ::OpenAPI::toJsonValue(pcf_group_id));
    }
    if (m_routing_indicator_isSet) {
        obj.insert(QString("routingIndicator"), ::OpenAPI::toJsonValue(routing_indicator));
    }
    if (group_list.size() > 0) {
        obj.insert(QString("groupList"), ::OpenAPI::toJsonValue(group_list));
    }
    if (m_drx_parameter_isSet) {
        obj.insert(QString("drxParameter"), ::OpenAPI::toJsonValue(drx_parameter));
    }
    if (m_sub_rfsp_isSet) {
        obj.insert(QString("subRfsp"), ::OpenAPI::toJsonValue(sub_rfsp));
    }
    if (m_used_rfsp_isSet) {
        obj.insert(QString("usedRfsp"), ::OpenAPI::toJsonValue(used_rfsp));
    }
    if (sub_ue_ambr.isSet()) {
        obj.insert(QString("subUeAmbr"), ::OpenAPI::toJsonValue(sub_ue_ambr));
    }
    if (m_smsf_id_isSet) {
        obj.insert(QString("smsfId"), ::OpenAPI::toJsonValue(smsf_id));
    }
    if (seaf_data.isSet()) {
        obj.insert(QString("seafData"), ::OpenAPI::toJsonValue(seaf_data));
    }
    if (m_r_5g_mm_capability_isSet) {
        obj.insert(QString("5gMmCapability"), ::OpenAPI::toJsonValue(r_5g_mm_capability));
    }
    if (m_pcf_id_isSet) {
        obj.insert(QString("pcfId"), ::OpenAPI::toJsonValue(pcf_id));
    }
    if (m_pcf_set_id_isSet) {
        obj.insert(QString("pcfSetId"), ::OpenAPI::toJsonValue(pcf_set_id));
    }
    if (m_pcf_amp_service_set_id_isSet) {
        obj.insert(QString("pcfAmpServiceSetId"), ::OpenAPI::toJsonValue(pcf_amp_service_set_id));
    }
    if (m_pcf_uep_service_set_id_isSet) {
        obj.insert(QString("pcfUepServiceSetId"), ::OpenAPI::toJsonValue(pcf_uep_service_set_id));
    }
    if (pcf_binding.isSet()) {
        obj.insert(QString("pcfBinding"), ::OpenAPI::toJsonValue(pcf_binding));
    }
    if (m_pcf_am_policy_uri_isSet) {
        obj.insert(QString("pcfAmPolicyUri"), ::OpenAPI::toJsonValue(pcf_am_policy_uri));
    }
    if (am_policy_req_trigger_list.size() > 0) {
        obj.insert(QString("amPolicyReqTriggerList"), ::OpenAPI::toJsonValue(am_policy_req_trigger_list));
    }
    if (m_pcf_ue_policy_uri_isSet) {
        obj.insert(QString("pcfUePolicyUri"), ::OpenAPI::toJsonValue(pcf_ue_policy_uri));
    }
    if (ue_policy_req_trigger_list.size() > 0) {
        obj.insert(QString("uePolicyReqTriggerList"), ::OpenAPI::toJsonValue(ue_policy_req_trigger_list));
    }
    if (m_hpcf_id_isSet) {
        obj.insert(QString("hpcfId"), ::OpenAPI::toJsonValue(hpcf_id));
    }
    if (m_hpcf_set_id_isSet) {
        obj.insert(QString("hpcfSetId"), ::OpenAPI::toJsonValue(hpcf_set_id));
    }
    if (restricted_rat_list.size() > 0) {
        obj.insert(QString("restrictedRatList"), ::OpenAPI::toJsonValue(restricted_rat_list));
    }
    if (forbidden_area_list.size() > 0) {
        obj.insert(QString("forbiddenAreaList"), ::OpenAPI::toJsonValue(forbidden_area_list));
    }
    if (service_area_restriction.isSet()) {
        obj.insert(QString("serviceAreaRestriction"), ::OpenAPI::toJsonValue(service_area_restriction));
    }
    if (restricted_core_nw_type_list.size() > 0) {
        obj.insert(QString("restrictedCoreNwTypeList"), ::OpenAPI::toJsonValue(restricted_core_nw_type_list));
    }
    if (event_subscription_list.size() > 0) {
        obj.insert(QString("eventSubscriptionList"), ::OpenAPI::toJsonValue(event_subscription_list));
    }
    if (mm_context_list.size() > 0) {
        obj.insert(QString("mmContextList"), ::OpenAPI::toJsonValue(mm_context_list));
    }
    if (session_context_list.size() > 0) {
        obj.insert(QString("sessionContextList"), ::OpenAPI::toJsonValue(session_context_list));
    }
    if (trace_data.isSet()) {
        obj.insert(QString("traceData"), ::OpenAPI::toJsonValue(trace_data));
    }
    if (m_service_gap_expiry_time_isSet) {
        obj.insert(QString("serviceGapExpiryTime"), ::OpenAPI::toJsonValue(service_gap_expiry_time));
    }
    if (m_stn_sr_isSet) {
        obj.insert(QString("stnSr"), ::OpenAPI::toJsonValue(stn_sr));
    }
    if (m_c_msisdn_isSet) {
        obj.insert(QString("cMsisdn"), ::OpenAPI::toJsonValue(c_msisdn));
    }
    if (m_ms_classmark2_isSet) {
        obj.insert(QString("msClassmark2"), ::OpenAPI::toJsonValue(ms_classmark2));
    }
    if (supported_codec_list.size() > 0) {
        obj.insert(QString("supportedCodecList"), ::OpenAPI::toJsonValue(supported_codec_list));
    }
    if (small_data_rate_status_infos.size() > 0) {
        obj.insert(QString("smallDataRateStatusInfos"), ::OpenAPI::toJsonValue(small_data_rate_status_infos));
    }
    if (restricted_primary_rat_list.size() > 0) {
        obj.insert(QString("restrictedPrimaryRatList"), ::OpenAPI::toJsonValue(restricted_primary_rat_list));
    }
    if (restricted_secondary_rat_list.size() > 0) {
        obj.insert(QString("restrictedSecondaryRatList"), ::OpenAPI::toJsonValue(restricted_secondary_rat_list));
    }
    if (v2x_context.isSet()) {
        obj.insert(QString("v2xContext"), ::OpenAPI::toJsonValue(v2x_context));
    }
    if (m_lte_cat_m_ind_isSet) {
        obj.insert(QString("lteCatMInd"), ::OpenAPI::toJsonValue(lte_cat_m_ind));
    }
    if (mo_exp_data_counter.isSet()) {
        obj.insert(QString("moExpDataCounter"), ::OpenAPI::toJsonValue(mo_exp_data_counter));
    }
    if (cag_data.isSet()) {
        obj.insert(QString("cagData"), ::OpenAPI::toJsonValue(cag_data));
    }
    if (m_management_mdt_ind_isSet) {
        obj.insert(QString("managementMdtInd"), ::OpenAPI::toJsonValue(management_mdt_ind));
    }
    if (immediate_mdt_conf.isSet()) {
        obj.insert(QString("immediateMdtConf"), ::OpenAPI::toJsonValue(immediate_mdt_conf));
    }
    if (ec_restriction_data_wb.isSet()) {
        obj.insert(QString("ecRestrictionDataWb"), ::OpenAPI::toJsonValue(ec_restriction_data_wb));
    }
    if (m_ec_restriction_data_nb_isSet) {
        obj.insert(QString("ecRestrictionDataNb"), ::OpenAPI::toJsonValue(ec_restriction_data_nb));
    }
    if (m_iab_operation_allowed_isSet) {
        obj.insert(QString("iabOperationAllowed"), ::OpenAPI::toJsonValue(iab_operation_allowed));
    }
    if (used_service_area_restriction.isSet()) {
        obj.insert(QString("usedServiceAreaRestriction"), ::OpenAPI::toJsonValue(used_service_area_restriction));
    }
    if (pra_in_am_policy.size() > 0) {
        obj.insert(QString("praInAmPolicy"), ::OpenAPI::toJsonValue(pra_in_am_policy));
    }
    if (updp_subscription_data.isSet()) {
        obj.insert(QString("updpSubscriptionData"), ::OpenAPI::toJsonValue(updp_subscription_data));
    }
    return obj;
}

QString OAIUeContext::getSupi() const {
    return supi;
}
void OAIUeContext::setSupi(const QString &supi) {
    this->supi = supi;
    this->m_supi_isSet = true;
}

bool OAIUeContext::is_supi_Set() const{
    return m_supi_isSet;
}

bool OAIUeContext::is_supi_Valid() const{
    return m_supi_isValid;
}

bool OAIUeContext::isSupiUnauthInd() const {
    return supi_unauth_ind;
}
void OAIUeContext::setSupiUnauthInd(const bool &supi_unauth_ind) {
    this->supi_unauth_ind = supi_unauth_ind;
    this->m_supi_unauth_ind_isSet = true;
}

bool OAIUeContext::is_supi_unauth_ind_Set() const{
    return m_supi_unauth_ind_isSet;
}

bool OAIUeContext::is_supi_unauth_ind_Valid() const{
    return m_supi_unauth_ind_isValid;
}

QList<QString> OAIUeContext::getGpsiList() const {
    return gpsi_list;
}
void OAIUeContext::setGpsiList(const QList<QString> &gpsi_list) {
    this->gpsi_list = gpsi_list;
    this->m_gpsi_list_isSet = true;
}

bool OAIUeContext::is_gpsi_list_Set() const{
    return m_gpsi_list_isSet;
}

bool OAIUeContext::is_gpsi_list_Valid() const{
    return m_gpsi_list_isValid;
}

QString OAIUeContext::getPei() const {
    return pei;
}
void OAIUeContext::setPei(const QString &pei) {
    this->pei = pei;
    this->m_pei_isSet = true;
}

bool OAIUeContext::is_pei_Set() const{
    return m_pei_isSet;
}

bool OAIUeContext::is_pei_Valid() const{
    return m_pei_isValid;
}

QString OAIUeContext::getUdmGroupId() const {
    return udm_group_id;
}
void OAIUeContext::setUdmGroupId(const QString &udm_group_id) {
    this->udm_group_id = udm_group_id;
    this->m_udm_group_id_isSet = true;
}

bool OAIUeContext::is_udm_group_id_Set() const{
    return m_udm_group_id_isSet;
}

bool OAIUeContext::is_udm_group_id_Valid() const{
    return m_udm_group_id_isValid;
}

QString OAIUeContext::getAusfGroupId() const {
    return ausf_group_id;
}
void OAIUeContext::setAusfGroupId(const QString &ausf_group_id) {
    this->ausf_group_id = ausf_group_id;
    this->m_ausf_group_id_isSet = true;
}

bool OAIUeContext::is_ausf_group_id_Set() const{
    return m_ausf_group_id_isSet;
}

bool OAIUeContext::is_ausf_group_id_Valid() const{
    return m_ausf_group_id_isValid;
}

QString OAIUeContext::getPcfGroupId() const {
    return pcf_group_id;
}
void OAIUeContext::setPcfGroupId(const QString &pcf_group_id) {
    this->pcf_group_id = pcf_group_id;
    this->m_pcf_group_id_isSet = true;
}

bool OAIUeContext::is_pcf_group_id_Set() const{
    return m_pcf_group_id_isSet;
}

bool OAIUeContext::is_pcf_group_id_Valid() const{
    return m_pcf_group_id_isValid;
}

QString OAIUeContext::getRoutingIndicator() const {
    return routing_indicator;
}
void OAIUeContext::setRoutingIndicator(const QString &routing_indicator) {
    this->routing_indicator = routing_indicator;
    this->m_routing_indicator_isSet = true;
}

bool OAIUeContext::is_routing_indicator_Set() const{
    return m_routing_indicator_isSet;
}

bool OAIUeContext::is_routing_indicator_Valid() const{
    return m_routing_indicator_isValid;
}

QList<QString> OAIUeContext::getGroupList() const {
    return group_list;
}
void OAIUeContext::setGroupList(const QList<QString> &group_list) {
    this->group_list = group_list;
    this->m_group_list_isSet = true;
}

bool OAIUeContext::is_group_list_Set() const{
    return m_group_list_isSet;
}

bool OAIUeContext::is_group_list_Valid() const{
    return m_group_list_isValid;
}

QByteArray OAIUeContext::getDrxParameter() const {
    return drx_parameter;
}
void OAIUeContext::setDrxParameter(const QByteArray &drx_parameter) {
    this->drx_parameter = drx_parameter;
    this->m_drx_parameter_isSet = true;
}

bool OAIUeContext::is_drx_parameter_Set() const{
    return m_drx_parameter_isSet;
}

bool OAIUeContext::is_drx_parameter_Valid() const{
    return m_drx_parameter_isValid;
}

qint32 OAIUeContext::getSubRfsp() const {
    return sub_rfsp;
}
void OAIUeContext::setSubRfsp(const qint32 &sub_rfsp) {
    this->sub_rfsp = sub_rfsp;
    this->m_sub_rfsp_isSet = true;
}

bool OAIUeContext::is_sub_rfsp_Set() const{
    return m_sub_rfsp_isSet;
}

bool OAIUeContext::is_sub_rfsp_Valid() const{
    return m_sub_rfsp_isValid;
}

qint32 OAIUeContext::getUsedRfsp() const {
    return used_rfsp;
}
void OAIUeContext::setUsedRfsp(const qint32 &used_rfsp) {
    this->used_rfsp = used_rfsp;
    this->m_used_rfsp_isSet = true;
}

bool OAIUeContext::is_used_rfsp_Set() const{
    return m_used_rfsp_isSet;
}

bool OAIUeContext::is_used_rfsp_Valid() const{
    return m_used_rfsp_isValid;
}

OAIAmbr OAIUeContext::getSubUeAmbr() const {
    return sub_ue_ambr;
}
void OAIUeContext::setSubUeAmbr(const OAIAmbr &sub_ue_ambr) {
    this->sub_ue_ambr = sub_ue_ambr;
    this->m_sub_ue_ambr_isSet = true;
}

bool OAIUeContext::is_sub_ue_ambr_Set() const{
    return m_sub_ue_ambr_isSet;
}

bool OAIUeContext::is_sub_ue_ambr_Valid() const{
    return m_sub_ue_ambr_isValid;
}

QString OAIUeContext::getSmsfId() const {
    return smsf_id;
}
void OAIUeContext::setSmsfId(const QString &smsf_id) {
    this->smsf_id = smsf_id;
    this->m_smsf_id_isSet = true;
}

bool OAIUeContext::is_smsf_id_Set() const{
    return m_smsf_id_isSet;
}

bool OAIUeContext::is_smsf_id_Valid() const{
    return m_smsf_id_isValid;
}

OAISeafData OAIUeContext::getSeafData() const {
    return seaf_data;
}
void OAIUeContext::setSeafData(const OAISeafData &seaf_data) {
    this->seaf_data = seaf_data;
    this->m_seaf_data_isSet = true;
}

bool OAIUeContext::is_seaf_data_Set() const{
    return m_seaf_data_isSet;
}

bool OAIUeContext::is_seaf_data_Valid() const{
    return m_seaf_data_isValid;
}

QByteArray OAIUeContext::getR5gMmCapability() const {
    return r_5g_mm_capability;
}
void OAIUeContext::setR5gMmCapability(const QByteArray &r_5g_mm_capability) {
    this->r_5g_mm_capability = r_5g_mm_capability;
    this->m_r_5g_mm_capability_isSet = true;
}

bool OAIUeContext::is_r_5g_mm_capability_Set() const{
    return m_r_5g_mm_capability_isSet;
}

bool OAIUeContext::is_r_5g_mm_capability_Valid() const{
    return m_r_5g_mm_capability_isValid;
}

QString OAIUeContext::getPcfId() const {
    return pcf_id;
}
void OAIUeContext::setPcfId(const QString &pcf_id) {
    this->pcf_id = pcf_id;
    this->m_pcf_id_isSet = true;
}

bool OAIUeContext::is_pcf_id_Set() const{
    return m_pcf_id_isSet;
}

bool OAIUeContext::is_pcf_id_Valid() const{
    return m_pcf_id_isValid;
}

QString OAIUeContext::getPcfSetId() const {
    return pcf_set_id;
}
void OAIUeContext::setPcfSetId(const QString &pcf_set_id) {
    this->pcf_set_id = pcf_set_id;
    this->m_pcf_set_id_isSet = true;
}

bool OAIUeContext::is_pcf_set_id_Set() const{
    return m_pcf_set_id_isSet;
}

bool OAIUeContext::is_pcf_set_id_Valid() const{
    return m_pcf_set_id_isValid;
}

QString OAIUeContext::getPcfAmpServiceSetId() const {
    return pcf_amp_service_set_id;
}
void OAIUeContext::setPcfAmpServiceSetId(const QString &pcf_amp_service_set_id) {
    this->pcf_amp_service_set_id = pcf_amp_service_set_id;
    this->m_pcf_amp_service_set_id_isSet = true;
}

bool OAIUeContext::is_pcf_amp_service_set_id_Set() const{
    return m_pcf_amp_service_set_id_isSet;
}

bool OAIUeContext::is_pcf_amp_service_set_id_Valid() const{
    return m_pcf_amp_service_set_id_isValid;
}

QString OAIUeContext::getPcfUepServiceSetId() const {
    return pcf_uep_service_set_id;
}
void OAIUeContext::setPcfUepServiceSetId(const QString &pcf_uep_service_set_id) {
    this->pcf_uep_service_set_id = pcf_uep_service_set_id;
    this->m_pcf_uep_service_set_id_isSet = true;
}

bool OAIUeContext::is_pcf_uep_service_set_id_Set() const{
    return m_pcf_uep_service_set_id_isSet;
}

bool OAIUeContext::is_pcf_uep_service_set_id_Valid() const{
    return m_pcf_uep_service_set_id_isValid;
}

OAISbiBindingLevel OAIUeContext::getPcfBinding() const {
    return pcf_binding;
}
void OAIUeContext::setPcfBinding(const OAISbiBindingLevel &pcf_binding) {
    this->pcf_binding = pcf_binding;
    this->m_pcf_binding_isSet = true;
}

bool OAIUeContext::is_pcf_binding_Set() const{
    return m_pcf_binding_isSet;
}

bool OAIUeContext::is_pcf_binding_Valid() const{
    return m_pcf_binding_isValid;
}

QString OAIUeContext::getPcfAmPolicyUri() const {
    return pcf_am_policy_uri;
}
void OAIUeContext::setPcfAmPolicyUri(const QString &pcf_am_policy_uri) {
    this->pcf_am_policy_uri = pcf_am_policy_uri;
    this->m_pcf_am_policy_uri_isSet = true;
}

bool OAIUeContext::is_pcf_am_policy_uri_Set() const{
    return m_pcf_am_policy_uri_isSet;
}

bool OAIUeContext::is_pcf_am_policy_uri_Valid() const{
    return m_pcf_am_policy_uri_isValid;
}

QList<OAIPolicyReqTrigger> OAIUeContext::getAmPolicyReqTriggerList() const {
    return am_policy_req_trigger_list;
}
void OAIUeContext::setAmPolicyReqTriggerList(const QList<OAIPolicyReqTrigger> &am_policy_req_trigger_list) {
    this->am_policy_req_trigger_list = am_policy_req_trigger_list;
    this->m_am_policy_req_trigger_list_isSet = true;
}

bool OAIUeContext::is_am_policy_req_trigger_list_Set() const{
    return m_am_policy_req_trigger_list_isSet;
}

bool OAIUeContext::is_am_policy_req_trigger_list_Valid() const{
    return m_am_policy_req_trigger_list_isValid;
}

QString OAIUeContext::getPcfUePolicyUri() const {
    return pcf_ue_policy_uri;
}
void OAIUeContext::setPcfUePolicyUri(const QString &pcf_ue_policy_uri) {
    this->pcf_ue_policy_uri = pcf_ue_policy_uri;
    this->m_pcf_ue_policy_uri_isSet = true;
}

bool OAIUeContext::is_pcf_ue_policy_uri_Set() const{
    return m_pcf_ue_policy_uri_isSet;
}

bool OAIUeContext::is_pcf_ue_policy_uri_Valid() const{
    return m_pcf_ue_policy_uri_isValid;
}

QList<OAIPolicyReqTrigger> OAIUeContext::getUePolicyReqTriggerList() const {
    return ue_policy_req_trigger_list;
}
void OAIUeContext::setUePolicyReqTriggerList(const QList<OAIPolicyReqTrigger> &ue_policy_req_trigger_list) {
    this->ue_policy_req_trigger_list = ue_policy_req_trigger_list;
    this->m_ue_policy_req_trigger_list_isSet = true;
}

bool OAIUeContext::is_ue_policy_req_trigger_list_Set() const{
    return m_ue_policy_req_trigger_list_isSet;
}

bool OAIUeContext::is_ue_policy_req_trigger_list_Valid() const{
    return m_ue_policy_req_trigger_list_isValid;
}

QString OAIUeContext::getHpcfId() const {
    return hpcf_id;
}
void OAIUeContext::setHpcfId(const QString &hpcf_id) {
    this->hpcf_id = hpcf_id;
    this->m_hpcf_id_isSet = true;
}

bool OAIUeContext::is_hpcf_id_Set() const{
    return m_hpcf_id_isSet;
}

bool OAIUeContext::is_hpcf_id_Valid() const{
    return m_hpcf_id_isValid;
}

QString OAIUeContext::getHpcfSetId() const {
    return hpcf_set_id;
}
void OAIUeContext::setHpcfSetId(const QString &hpcf_set_id) {
    this->hpcf_set_id = hpcf_set_id;
    this->m_hpcf_set_id_isSet = true;
}

bool OAIUeContext::is_hpcf_set_id_Set() const{
    return m_hpcf_set_id_isSet;
}

bool OAIUeContext::is_hpcf_set_id_Valid() const{
    return m_hpcf_set_id_isValid;
}

QList<OAIRatType> OAIUeContext::getRestrictedRatList() const {
    return restricted_rat_list;
}
void OAIUeContext::setRestrictedRatList(const QList<OAIRatType> &restricted_rat_list) {
    this->restricted_rat_list = restricted_rat_list;
    this->m_restricted_rat_list_isSet = true;
}

bool OAIUeContext::is_restricted_rat_list_Set() const{
    return m_restricted_rat_list_isSet;
}

bool OAIUeContext::is_restricted_rat_list_Valid() const{
    return m_restricted_rat_list_isValid;
}

QList<OAIArea> OAIUeContext::getForbiddenAreaList() const {
    return forbidden_area_list;
}
void OAIUeContext::setForbiddenAreaList(const QList<OAIArea> &forbidden_area_list) {
    this->forbidden_area_list = forbidden_area_list;
    this->m_forbidden_area_list_isSet = true;
}

bool OAIUeContext::is_forbidden_area_list_Set() const{
    return m_forbidden_area_list_isSet;
}

bool OAIUeContext::is_forbidden_area_list_Valid() const{
    return m_forbidden_area_list_isValid;
}

OAIServiceAreaRestriction OAIUeContext::getServiceAreaRestriction() const {
    return service_area_restriction;
}
void OAIUeContext::setServiceAreaRestriction(const OAIServiceAreaRestriction &service_area_restriction) {
    this->service_area_restriction = service_area_restriction;
    this->m_service_area_restriction_isSet = true;
}

bool OAIUeContext::is_service_area_restriction_Set() const{
    return m_service_area_restriction_isSet;
}

bool OAIUeContext::is_service_area_restriction_Valid() const{
    return m_service_area_restriction_isValid;
}

QList<OAICoreNetworkType> OAIUeContext::getRestrictedCoreNwTypeList() const {
    return restricted_core_nw_type_list;
}
void OAIUeContext::setRestrictedCoreNwTypeList(const QList<OAICoreNetworkType> &restricted_core_nw_type_list) {
    this->restricted_core_nw_type_list = restricted_core_nw_type_list;
    this->m_restricted_core_nw_type_list_isSet = true;
}

bool OAIUeContext::is_restricted_core_nw_type_list_Set() const{
    return m_restricted_core_nw_type_list_isSet;
}

bool OAIUeContext::is_restricted_core_nw_type_list_Valid() const{
    return m_restricted_core_nw_type_list_isValid;
}

QList<OAIExtAmfEventSubscription> OAIUeContext::getEventSubscriptionList() const {
    return event_subscription_list;
}
void OAIUeContext::setEventSubscriptionList(const QList<OAIExtAmfEventSubscription> &event_subscription_list) {
    this->event_subscription_list = event_subscription_list;
    this->m_event_subscription_list_isSet = true;
}

bool OAIUeContext::is_event_subscription_list_Set() const{
    return m_event_subscription_list_isSet;
}

bool OAIUeContext::is_event_subscription_list_Valid() const{
    return m_event_subscription_list_isValid;
}

QList<OAIMmContext> OAIUeContext::getMmContextList() const {
    return mm_context_list;
}
void OAIUeContext::setMmContextList(const QList<OAIMmContext> &mm_context_list) {
    this->mm_context_list = mm_context_list;
    this->m_mm_context_list_isSet = true;
}

bool OAIUeContext::is_mm_context_list_Set() const{
    return m_mm_context_list_isSet;
}

bool OAIUeContext::is_mm_context_list_Valid() const{
    return m_mm_context_list_isValid;
}

QList<OAIPduSessionContext> OAIUeContext::getSessionContextList() const {
    return session_context_list;
}
void OAIUeContext::setSessionContextList(const QList<OAIPduSessionContext> &session_context_list) {
    this->session_context_list = session_context_list;
    this->m_session_context_list_isSet = true;
}

bool OAIUeContext::is_session_context_list_Set() const{
    return m_session_context_list_isSet;
}

bool OAIUeContext::is_session_context_list_Valid() const{
    return m_session_context_list_isValid;
}

OAITraceData OAIUeContext::getTraceData() const {
    return trace_data;
}
void OAIUeContext::setTraceData(const OAITraceData &trace_data) {
    this->trace_data = trace_data;
    this->m_trace_data_isSet = true;
}

bool OAIUeContext::is_trace_data_Set() const{
    return m_trace_data_isSet;
}

bool OAIUeContext::is_trace_data_Valid() const{
    return m_trace_data_isValid;
}

QDateTime OAIUeContext::getServiceGapExpiryTime() const {
    return service_gap_expiry_time;
}
void OAIUeContext::setServiceGapExpiryTime(const QDateTime &service_gap_expiry_time) {
    this->service_gap_expiry_time = service_gap_expiry_time;
    this->m_service_gap_expiry_time_isSet = true;
}

bool OAIUeContext::is_service_gap_expiry_time_Set() const{
    return m_service_gap_expiry_time_isSet;
}

bool OAIUeContext::is_service_gap_expiry_time_Valid() const{
    return m_service_gap_expiry_time_isValid;
}

QString OAIUeContext::getStnSr() const {
    return stn_sr;
}
void OAIUeContext::setStnSr(const QString &stn_sr) {
    this->stn_sr = stn_sr;
    this->m_stn_sr_isSet = true;
}

bool OAIUeContext::is_stn_sr_Set() const{
    return m_stn_sr_isSet;
}

bool OAIUeContext::is_stn_sr_Valid() const{
    return m_stn_sr_isValid;
}

QString OAIUeContext::getCMsisdn() const {
    return c_msisdn;
}
void OAIUeContext::setCMsisdn(const QString &c_msisdn) {
    this->c_msisdn = c_msisdn;
    this->m_c_msisdn_isSet = true;
}

bool OAIUeContext::is_c_msisdn_Set() const{
    return m_c_msisdn_isSet;
}

bool OAIUeContext::is_c_msisdn_Valid() const{
    return m_c_msisdn_isValid;
}

QByteArray OAIUeContext::getMsClassmark2() const {
    return ms_classmark2;
}
void OAIUeContext::setMsClassmark2(const QByteArray &ms_classmark2) {
    this->ms_classmark2 = ms_classmark2;
    this->m_ms_classmark2_isSet = true;
}

bool OAIUeContext::is_ms_classmark2_Set() const{
    return m_ms_classmark2_isSet;
}

bool OAIUeContext::is_ms_classmark2_Valid() const{
    return m_ms_classmark2_isValid;
}

QList<QByteArray> OAIUeContext::getSupportedCodecList() const {
    return supported_codec_list;
}
void OAIUeContext::setSupportedCodecList(const QList<QByteArray> &supported_codec_list) {
    this->supported_codec_list = supported_codec_list;
    this->m_supported_codec_list_isSet = true;
}

bool OAIUeContext::is_supported_codec_list_Set() const{
    return m_supported_codec_list_isSet;
}

bool OAIUeContext::is_supported_codec_list_Valid() const{
    return m_supported_codec_list_isValid;
}

QList<OAISmallDataRateStatusInfo> OAIUeContext::getSmallDataRateStatusInfos() const {
    return small_data_rate_status_infos;
}
void OAIUeContext::setSmallDataRateStatusInfos(const QList<OAISmallDataRateStatusInfo> &small_data_rate_status_infos) {
    this->small_data_rate_status_infos = small_data_rate_status_infos;
    this->m_small_data_rate_status_infos_isSet = true;
}

bool OAIUeContext::is_small_data_rate_status_infos_Set() const{
    return m_small_data_rate_status_infos_isSet;
}

bool OAIUeContext::is_small_data_rate_status_infos_Valid() const{
    return m_small_data_rate_status_infos_isValid;
}

QList<OAIRatType> OAIUeContext::getRestrictedPrimaryRatList() const {
    return restricted_primary_rat_list;
}
void OAIUeContext::setRestrictedPrimaryRatList(const QList<OAIRatType> &restricted_primary_rat_list) {
    this->restricted_primary_rat_list = restricted_primary_rat_list;
    this->m_restricted_primary_rat_list_isSet = true;
}

bool OAIUeContext::is_restricted_primary_rat_list_Set() const{
    return m_restricted_primary_rat_list_isSet;
}

bool OAIUeContext::is_restricted_primary_rat_list_Valid() const{
    return m_restricted_primary_rat_list_isValid;
}

QList<OAIRatType> OAIUeContext::getRestrictedSecondaryRatList() const {
    return restricted_secondary_rat_list;
}
void OAIUeContext::setRestrictedSecondaryRatList(const QList<OAIRatType> &restricted_secondary_rat_list) {
    this->restricted_secondary_rat_list = restricted_secondary_rat_list;
    this->m_restricted_secondary_rat_list_isSet = true;
}

bool OAIUeContext::is_restricted_secondary_rat_list_Set() const{
    return m_restricted_secondary_rat_list_isSet;
}

bool OAIUeContext::is_restricted_secondary_rat_list_Valid() const{
    return m_restricted_secondary_rat_list_isValid;
}

OAIV2xContext OAIUeContext::getV2xContext() const {
    return v2x_context;
}
void OAIUeContext::setV2xContext(const OAIV2xContext &v2x_context) {
    this->v2x_context = v2x_context;
    this->m_v2x_context_isSet = true;
}

bool OAIUeContext::is_v2x_context_Set() const{
    return m_v2x_context_isSet;
}

bool OAIUeContext::is_v2x_context_Valid() const{
    return m_v2x_context_isValid;
}

bool OAIUeContext::isLteCatMInd() const {
    return lte_cat_m_ind;
}
void OAIUeContext::setLteCatMInd(const bool &lte_cat_m_ind) {
    this->lte_cat_m_ind = lte_cat_m_ind;
    this->m_lte_cat_m_ind_isSet = true;
}

bool OAIUeContext::is_lte_cat_m_ind_Set() const{
    return m_lte_cat_m_ind_isSet;
}

bool OAIUeContext::is_lte_cat_m_ind_Valid() const{
    return m_lte_cat_m_ind_isValid;
}

OAIMoExpDataCounter OAIUeContext::getMoExpDataCounter() const {
    return mo_exp_data_counter;
}
void OAIUeContext::setMoExpDataCounter(const OAIMoExpDataCounter &mo_exp_data_counter) {
    this->mo_exp_data_counter = mo_exp_data_counter;
    this->m_mo_exp_data_counter_isSet = true;
}

bool OAIUeContext::is_mo_exp_data_counter_Set() const{
    return m_mo_exp_data_counter_isSet;
}

bool OAIUeContext::is_mo_exp_data_counter_Valid() const{
    return m_mo_exp_data_counter_isValid;
}

OAICagData OAIUeContext::getCagData() const {
    return cag_data;
}
void OAIUeContext::setCagData(const OAICagData &cag_data) {
    this->cag_data = cag_data;
    this->m_cag_data_isSet = true;
}

bool OAIUeContext::is_cag_data_Set() const{
    return m_cag_data_isSet;
}

bool OAIUeContext::is_cag_data_Valid() const{
    return m_cag_data_isValid;
}

bool OAIUeContext::isManagementMdtInd() const {
    return management_mdt_ind;
}
void OAIUeContext::setManagementMdtInd(const bool &management_mdt_ind) {
    this->management_mdt_ind = management_mdt_ind;
    this->m_management_mdt_ind_isSet = true;
}

bool OAIUeContext::is_management_mdt_ind_Set() const{
    return m_management_mdt_ind_isSet;
}

bool OAIUeContext::is_management_mdt_ind_Valid() const{
    return m_management_mdt_ind_isValid;
}

OAIImmediateMdtConf OAIUeContext::getImmediateMdtConf() const {
    return immediate_mdt_conf;
}
void OAIUeContext::setImmediateMdtConf(const OAIImmediateMdtConf &immediate_mdt_conf) {
    this->immediate_mdt_conf = immediate_mdt_conf;
    this->m_immediate_mdt_conf_isSet = true;
}

bool OAIUeContext::is_immediate_mdt_conf_Set() const{
    return m_immediate_mdt_conf_isSet;
}

bool OAIUeContext::is_immediate_mdt_conf_Valid() const{
    return m_immediate_mdt_conf_isValid;
}

OAIEcRestrictionDataWb OAIUeContext::getEcRestrictionDataWb() const {
    return ec_restriction_data_wb;
}
void OAIUeContext::setEcRestrictionDataWb(const OAIEcRestrictionDataWb &ec_restriction_data_wb) {
    this->ec_restriction_data_wb = ec_restriction_data_wb;
    this->m_ec_restriction_data_wb_isSet = true;
}

bool OAIUeContext::is_ec_restriction_data_wb_Set() const{
    return m_ec_restriction_data_wb_isSet;
}

bool OAIUeContext::is_ec_restriction_data_wb_Valid() const{
    return m_ec_restriction_data_wb_isValid;
}

bool OAIUeContext::isEcRestrictionDataNb() const {
    return ec_restriction_data_nb;
}
void OAIUeContext::setEcRestrictionDataNb(const bool &ec_restriction_data_nb) {
    this->ec_restriction_data_nb = ec_restriction_data_nb;
    this->m_ec_restriction_data_nb_isSet = true;
}

bool OAIUeContext::is_ec_restriction_data_nb_Set() const{
    return m_ec_restriction_data_nb_isSet;
}

bool OAIUeContext::is_ec_restriction_data_nb_Valid() const{
    return m_ec_restriction_data_nb_isValid;
}

bool OAIUeContext::isIabOperationAllowed() const {
    return iab_operation_allowed;
}
void OAIUeContext::setIabOperationAllowed(const bool &iab_operation_allowed) {
    this->iab_operation_allowed = iab_operation_allowed;
    this->m_iab_operation_allowed_isSet = true;
}

bool OAIUeContext::is_iab_operation_allowed_Set() const{
    return m_iab_operation_allowed_isSet;
}

bool OAIUeContext::is_iab_operation_allowed_Valid() const{
    return m_iab_operation_allowed_isValid;
}

OAIServiceAreaRestriction OAIUeContext::getUsedServiceAreaRestriction() const {
    return used_service_area_restriction;
}
void OAIUeContext::setUsedServiceAreaRestriction(const OAIServiceAreaRestriction &used_service_area_restriction) {
    this->used_service_area_restriction = used_service_area_restriction;
    this->m_used_service_area_restriction_isSet = true;
}

bool OAIUeContext::is_used_service_area_restriction_Set() const{
    return m_used_service_area_restriction_isSet;
}

bool OAIUeContext::is_used_service_area_restriction_Valid() const{
    return m_used_service_area_restriction_isValid;
}

QMap<QString, OAIPresenceInfo> OAIUeContext::getPraInAmPolicy() const {
    return pra_in_am_policy;
}
void OAIUeContext::setPraInAmPolicy(const QMap<QString, OAIPresenceInfo> &pra_in_am_policy) {
    this->pra_in_am_policy = pra_in_am_policy;
    this->m_pra_in_am_policy_isSet = true;
}

bool OAIUeContext::is_pra_in_am_policy_Set() const{
    return m_pra_in_am_policy_isSet;
}

bool OAIUeContext::is_pra_in_am_policy_Valid() const{
    return m_pra_in_am_policy_isValid;
}

OAIUpdpSubscriptionData OAIUeContext::getUpdpSubscriptionData() const {
    return updp_subscription_data;
}
void OAIUeContext::setUpdpSubscriptionData(const OAIUpdpSubscriptionData &updp_subscription_data) {
    this->updp_subscription_data = updp_subscription_data;
    this->m_updp_subscription_data_isSet = true;
}

bool OAIUeContext::is_updp_subscription_data_Set() const{
    return m_updp_subscription_data_isSet;
}

bool OAIUeContext::is_updp_subscription_data_Valid() const{
    return m_updp_subscription_data_isValid;
}

bool OAIUeContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_supi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supi_unauth_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (gpsi_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pei_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udm_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ausf_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcf_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (group_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_drx_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_rfsp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_rfsp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (sub_ue_ambr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_smsf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (seaf_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_5g_mm_capability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcf_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcf_amp_service_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcf_uep_service_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (pcf_binding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcf_am_policy_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (am_policy_req_trigger_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcf_ue_policy_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (ue_policy_req_trigger_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hpcf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hpcf_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (restricted_rat_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (forbidden_area_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (service_area_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (restricted_core_nw_type_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (event_subscription_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (mm_context_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (session_context_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (trace_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_gap_expiry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stn_sr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_c_msisdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ms_classmark2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (supported_codec_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (small_data_rate_status_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (restricted_primary_rat_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (restricted_secondary_rat_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (v2x_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lte_cat_m_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (mo_exp_data_counter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (cag_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_mdt_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (immediate_mdt_conf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (ec_restriction_data_wb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec_restriction_data_nb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iab_operation_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (used_service_area_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (pra_in_am_policy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (updp_subscription_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUeContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
