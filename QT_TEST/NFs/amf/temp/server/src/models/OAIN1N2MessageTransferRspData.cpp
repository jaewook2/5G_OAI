/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIN1N2MessageTransferRspData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIN1N2MessageTransferRspData::OAIN1N2MessageTransferRspData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIN1N2MessageTransferRspData::OAIN1N2MessageTransferRspData() {
    this->initializeModel();
}

OAIN1N2MessageTransferRspData::~OAIN1N2MessageTransferRspData() {}

void OAIN1N2MessageTransferRspData::initializeModel() {

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_supported_features_isSet = false;
    m_supported_features_isValid = false;
}

void OAIN1N2MessageTransferRspData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIN1N2MessageTransferRspData::fromJsonObject(QJsonObject json) {

    m_cause_isValid = ::OpenAPI::fromJsonValue(cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_supported_features_isValid = ::OpenAPI::fromJsonValue(supported_features, json[QString("supportedFeatures")]);
    m_supported_features_isSet = !json[QString("supportedFeatures")].isNull() && m_supported_features_isValid;
}

QString OAIN1N2MessageTransferRspData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIN1N2MessageTransferRspData::asJsonObject() const {
    QJsonObject obj;
    if (cause.isSet()) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(cause));
    }
    if (m_supported_features_isSet) {
        obj.insert(QString("supportedFeatures"), ::OpenAPI::toJsonValue(supported_features));
    }
    return obj;
}

OAIN1N2MessageTransferCause OAIN1N2MessageTransferRspData::getCause() const {
    return cause;
}
void OAIN1N2MessageTransferRspData::setCause(const OAIN1N2MessageTransferCause &cause) {
    this->cause = cause;
    this->m_cause_isSet = true;
}

bool OAIN1N2MessageTransferRspData::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIN1N2MessageTransferRspData::is_cause_Valid() const{
    return m_cause_isValid;
}

QString OAIN1N2MessageTransferRspData::getSupportedFeatures() const {
    return supported_features;
}
void OAIN1N2MessageTransferRspData::setSupportedFeatures(const QString &supported_features) {
    this->supported_features = supported_features;
    this->m_supported_features_isSet = true;
}

bool OAIN1N2MessageTransferRspData::is_supported_features_Set() const{
    return m_supported_features_isSet;
}

bool OAIN1N2MessageTransferRspData::is_supported_features_Valid() const{
    return m_supported_features_isValid;
}

bool OAIN1N2MessageTransferRspData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (cause.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_features_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIN1N2MessageTransferRspData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cause_isValid && true;
}

} // namespace OpenAPI
