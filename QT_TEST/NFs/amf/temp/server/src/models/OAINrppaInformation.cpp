/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINrppaInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINrppaInformation::OAINrppaInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINrppaInformation::OAINrppaInformation() {
    this->initializeModel();
}

OAINrppaInformation::~OAINrppaInformation() {}

void OAINrppaInformation::initializeModel() {

    m_nf_id_isSet = false;
    m_nf_id_isValid = false;

    m_nrppa_pdu_isSet = false;
    m_nrppa_pdu_isValid = false;

    m_service_instance_id_isSet = false;
    m_service_instance_id_isValid = false;
}

void OAINrppaInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINrppaInformation::fromJsonObject(QJsonObject json) {

    m_nf_id_isValid = ::OpenAPI::fromJsonValue(nf_id, json[QString("nfId")]);
    m_nf_id_isSet = !json[QString("nfId")].isNull() && m_nf_id_isValid;

    m_nrppa_pdu_isValid = ::OpenAPI::fromJsonValue(nrppa_pdu, json[QString("nrppaPdu")]);
    m_nrppa_pdu_isSet = !json[QString("nrppaPdu")].isNull() && m_nrppa_pdu_isValid;

    m_service_instance_id_isValid = ::OpenAPI::fromJsonValue(service_instance_id, json[QString("serviceInstanceId")]);
    m_service_instance_id_isSet = !json[QString("serviceInstanceId")].isNull() && m_service_instance_id_isValid;
}

QString OAINrppaInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINrppaInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_nf_id_isSet) {
        obj.insert(QString("nfId"), ::OpenAPI::toJsonValue(nf_id));
    }
    if (nrppa_pdu.isSet()) {
        obj.insert(QString("nrppaPdu"), ::OpenAPI::toJsonValue(nrppa_pdu));
    }
    if (m_service_instance_id_isSet) {
        obj.insert(QString("serviceInstanceId"), ::OpenAPI::toJsonValue(service_instance_id));
    }
    return obj;
}

QString OAINrppaInformation::getNfId() const {
    return nf_id;
}
void OAINrppaInformation::setNfId(const QString &nf_id) {
    this->nf_id = nf_id;
    this->m_nf_id_isSet = true;
}

bool OAINrppaInformation::is_nf_id_Set() const{
    return m_nf_id_isSet;
}

bool OAINrppaInformation::is_nf_id_Valid() const{
    return m_nf_id_isValid;
}

OAIN2InfoContent OAINrppaInformation::getNrppaPdu() const {
    return nrppa_pdu;
}
void OAINrppaInformation::setNrppaPdu(const OAIN2InfoContent &nrppa_pdu) {
    this->nrppa_pdu = nrppa_pdu;
    this->m_nrppa_pdu_isSet = true;
}

bool OAINrppaInformation::is_nrppa_pdu_Set() const{
    return m_nrppa_pdu_isSet;
}

bool OAINrppaInformation::is_nrppa_pdu_Valid() const{
    return m_nrppa_pdu_isValid;
}

QString OAINrppaInformation::getServiceInstanceId() const {
    return service_instance_id;
}
void OAINrppaInformation::setServiceInstanceId(const QString &service_instance_id) {
    this->service_instance_id = service_instance_id;
    this->m_service_instance_id_isSet = true;
}

bool OAINrppaInformation::is_service_instance_id_Set() const{
    return m_service_instance_id_isSet;
}

bool OAINrppaInformation::is_service_instance_id_Valid() const{
    return m_service_instance_id_isValid;
}

bool OAINrppaInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (nrppa_pdu.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINrppaInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_nf_id_isValid && m_nrppa_pdu_isValid && true;
}

} // namespace OpenAPI
