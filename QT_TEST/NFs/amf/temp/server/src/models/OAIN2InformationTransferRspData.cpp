/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIN2InformationTransferRspData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIN2InformationTransferRspData::OAIN2InformationTransferRspData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIN2InformationTransferRspData::OAIN2InformationTransferRspData() {
    this->initializeModel();
}

OAIN2InformationTransferRspData::~OAIN2InformationTransferRspData() {}

void OAIN2InformationTransferRspData::initializeModel() {

    m_result_isSet = false;
    m_result_isValid = false;

    m_pws_rsp_data_isSet = false;
    m_pws_rsp_data_isValid = false;

    m_supported_features_isSet = false;
    m_supported_features_isValid = false;
}

void OAIN2InformationTransferRspData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIN2InformationTransferRspData::fromJsonObject(QJsonObject json) {

    m_result_isValid = ::OpenAPI::fromJsonValue(result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_pws_rsp_data_isValid = ::OpenAPI::fromJsonValue(pws_rsp_data, json[QString("pwsRspData")]);
    m_pws_rsp_data_isSet = !json[QString("pwsRspData")].isNull() && m_pws_rsp_data_isValid;

    m_supported_features_isValid = ::OpenAPI::fromJsonValue(supported_features, json[QString("supportedFeatures")]);
    m_supported_features_isSet = !json[QString("supportedFeatures")].isNull() && m_supported_features_isValid;
}

QString OAIN2InformationTransferRspData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIN2InformationTransferRspData::asJsonObject() const {
    QJsonObject obj;
    if (result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(result));
    }
    if (pws_rsp_data.isSet()) {
        obj.insert(QString("pwsRspData"), ::OpenAPI::toJsonValue(pws_rsp_data));
    }
    if (m_supported_features_isSet) {
        obj.insert(QString("supportedFeatures"), ::OpenAPI::toJsonValue(supported_features));
    }
    return obj;
}

OAIN2InformationTransferResult OAIN2InformationTransferRspData::getResult() const {
    return result;
}
void OAIN2InformationTransferRspData::setResult(const OAIN2InformationTransferResult &result) {
    this->result = result;
    this->m_result_isSet = true;
}

bool OAIN2InformationTransferRspData::is_result_Set() const{
    return m_result_isSet;
}

bool OAIN2InformationTransferRspData::is_result_Valid() const{
    return m_result_isValid;
}

OAIPWSResponseData OAIN2InformationTransferRspData::getPwsRspData() const {
    return pws_rsp_data;
}
void OAIN2InformationTransferRspData::setPwsRspData(const OAIPWSResponseData &pws_rsp_data) {
    this->pws_rsp_data = pws_rsp_data;
    this->m_pws_rsp_data_isSet = true;
}

bool OAIN2InformationTransferRspData::is_pws_rsp_data_Set() const{
    return m_pws_rsp_data_isSet;
}

bool OAIN2InformationTransferRspData::is_pws_rsp_data_Valid() const{
    return m_pws_rsp_data_isValid;
}

QString OAIN2InformationTransferRspData::getSupportedFeatures() const {
    return supported_features;
}
void OAIN2InformationTransferRspData::setSupportedFeatures(const QString &supported_features) {
    this->supported_features = supported_features;
    this->m_supported_features_isSet = true;
}

bool OAIN2InformationTransferRspData::is_supported_features_Set() const{
    return m_supported_features_isSet;
}

bool OAIN2InformationTransferRspData::is_supported_features_Valid() const{
    return m_supported_features_isValid;
}

bool OAIN2InformationTransferRspData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (pws_rsp_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_features_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIN2InformationTransferRspData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_result_isValid && true;
}

} // namespace OpenAPI
