/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasurementLteForMdt_anyOf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasurementLteForMdt_anyOf::OAIMeasurementLteForMdt_anyOf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasurementLteForMdt_anyOf::OAIMeasurementLteForMdt_anyOf() {
    this->initializeModel();
}

OAIMeasurementLteForMdt_anyOf::~OAIMeasurementLteForMdt_anyOf() {}

void OAIMeasurementLteForMdt_anyOf::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMeasurementLteForMdt_anyOf::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMeasurementLteForMdt_anyOf::fromJson(QString jsonString) {
    
    if ( jsonString.compare("M1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M4_DL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M4_DL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M4_UL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M4_UL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M5_DL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M5_DL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M5_UL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M5_UL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M6_DL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M6_DL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M6_UL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M6_UL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M7_DL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M7_DL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M7_UL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M7_UL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M8", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("M9", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementLteForMdt_anyOf::M9;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMeasurementLteForMdt_anyOf::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMeasurementLteForMdt_anyOf::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMeasurementLteForMdt_anyOf::M1:
            val = "M1";
            break;
        case eOAIMeasurementLteForMdt_anyOf::M2:
            val = "M2";
            break;
        case eOAIMeasurementLteForMdt_anyOf::M3:
            val = "M3";
            break;
        case eOAIMeasurementLteForMdt_anyOf::M4_DL:
            val = "M4_DL";
            break;
        case eOAIMeasurementLteForMdt_anyOf::M4_UL:
            val = "M4_UL";
            break;
        case eOAIMeasurementLteForMdt_anyOf::M5_DL:
            val = "M5_DL";
            break;
        case eOAIMeasurementLteForMdt_anyOf::M5_UL:
            val = "M5_UL";
            break;
        case eOAIMeasurementLteForMdt_anyOf::M6_DL:
            val = "M6_DL";
            break;
        case eOAIMeasurementLteForMdt_anyOf::M6_UL:
            val = "M6_UL";
            break;
        case eOAIMeasurementLteForMdt_anyOf::M7_DL:
            val = "M7_DL";
            break;
        case eOAIMeasurementLteForMdt_anyOf::M7_UL:
            val = "M7_UL";
            break;
        case eOAIMeasurementLteForMdt_anyOf::M8:
            val = "M8";
            break;
        case eOAIMeasurementLteForMdt_anyOf::M9:
            val = "M9";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMeasurementLteForMdt_anyOf::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMeasurementLteForMdt_anyOf::eOAIMeasurementLteForMdt_anyOf OAIMeasurementLteForMdt_anyOf::getValue() const {
    return m_value;
}

void OAIMeasurementLteForMdt_anyOf::setValue(const OAIMeasurementLteForMdt_anyOf::eOAIMeasurementLteForMdt_anyOf& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMeasurementLteForMdt_anyOf::isSet() const {
    
    return m_value_isSet;
}

bool OAIMeasurementLteForMdt_anyOf::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
