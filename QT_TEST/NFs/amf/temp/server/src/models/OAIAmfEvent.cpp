/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmfEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmfEvent::OAIAmfEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmfEvent::OAIAmfEvent() {
    this->initializeModel();
}

OAIAmfEvent::~OAIAmfEvent() {}

void OAIAmfEvent::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_immediate_flag_isSet = false;
    m_immediate_flag_isValid = false;

    m_area_list_isSet = false;
    m_area_list_isValid = false;

    m_location_filter_list_isSet = false;
    m_location_filter_list_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_traffic_descriptor_list_isSet = false;
    m_traffic_descriptor_list_isValid = false;

    m_report_ue_reachable_isSet = false;
    m_report_ue_reachable_isValid = false;

    m_reachability_filter_isSet = false;
    m_reachability_filter_isValid = false;

    m_max_reports_isSet = false;
    m_max_reports_isValid = false;

    m_max_response_time_isSet = false;
    m_max_response_time_isValid = false;
}

void OAIAmfEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmfEvent::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_immediate_flag_isValid = ::OpenAPI::fromJsonValue(immediate_flag, json[QString("immediateFlag")]);
    m_immediate_flag_isSet = !json[QString("immediateFlag")].isNull() && m_immediate_flag_isValid;

    m_area_list_isValid = ::OpenAPI::fromJsonValue(area_list, json[QString("areaList")]);
    m_area_list_isSet = !json[QString("areaList")].isNull() && m_area_list_isValid;

    m_location_filter_list_isValid = ::OpenAPI::fromJsonValue(location_filter_list, json[QString("locationFilterList")]);
    m_location_filter_list_isSet = !json[QString("locationFilterList")].isNull() && m_location_filter_list_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(ref_id, json[QString("refId")]);
    m_ref_id_isSet = !json[QString("refId")].isNull() && m_ref_id_isValid;

    m_traffic_descriptor_list_isValid = ::OpenAPI::fromJsonValue(traffic_descriptor_list, json[QString("trafficDescriptorList")]);
    m_traffic_descriptor_list_isSet = !json[QString("trafficDescriptorList")].isNull() && m_traffic_descriptor_list_isValid;

    m_report_ue_reachable_isValid = ::OpenAPI::fromJsonValue(report_ue_reachable, json[QString("reportUeReachable")]);
    m_report_ue_reachable_isSet = !json[QString("reportUeReachable")].isNull() && m_report_ue_reachable_isValid;

    m_reachability_filter_isValid = ::OpenAPI::fromJsonValue(reachability_filter, json[QString("reachabilityFilter")]);
    m_reachability_filter_isSet = !json[QString("reachabilityFilter")].isNull() && m_reachability_filter_isValid;

    m_max_reports_isValid = ::OpenAPI::fromJsonValue(max_reports, json[QString("maxReports")]);
    m_max_reports_isSet = !json[QString("maxReports")].isNull() && m_max_reports_isValid;

    m_max_response_time_isValid = ::OpenAPI::fromJsonValue(max_response_time, json[QString("maxResponseTime")]);
    m_max_response_time_isSet = !json[QString("maxResponseTime")].isNull() && m_max_response_time_isValid;
}

QString OAIAmfEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmfEvent::asJsonObject() const {
    QJsonObject obj;
    if (type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_immediate_flag_isSet) {
        obj.insert(QString("immediateFlag"), ::OpenAPI::toJsonValue(immediate_flag));
    }
    if (area_list.size() > 0) {
        obj.insert(QString("areaList"), ::OpenAPI::toJsonValue(area_list));
    }
    if (location_filter_list.size() > 0) {
        obj.insert(QString("locationFilterList"), ::OpenAPI::toJsonValue(location_filter_list));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("refId"), ::OpenAPI::toJsonValue(ref_id));
    }
    if (traffic_descriptor_list.size() > 0) {
        obj.insert(QString("trafficDescriptorList"), ::OpenAPI::toJsonValue(traffic_descriptor_list));
    }
    if (m_report_ue_reachable_isSet) {
        obj.insert(QString("reportUeReachable"), ::OpenAPI::toJsonValue(report_ue_reachable));
    }
    if (reachability_filter.isSet()) {
        obj.insert(QString("reachabilityFilter"), ::OpenAPI::toJsonValue(reachability_filter));
    }
    if (m_max_reports_isSet) {
        obj.insert(QString("maxReports"), ::OpenAPI::toJsonValue(max_reports));
    }
    if (m_max_response_time_isSet) {
        obj.insert(QString("maxResponseTime"), ::OpenAPI::toJsonValue(max_response_time));
    }
    return obj;
}

OAIAmfEventType OAIAmfEvent::getType() const {
    return type;
}
void OAIAmfEvent::setType(const OAIAmfEventType &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIAmfEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAmfEvent::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAmfEvent::isImmediateFlag() const {
    return immediate_flag;
}
void OAIAmfEvent::setImmediateFlag(const bool &immediate_flag) {
    this->immediate_flag = immediate_flag;
    this->m_immediate_flag_isSet = true;
}

bool OAIAmfEvent::is_immediate_flag_Set() const{
    return m_immediate_flag_isSet;
}

bool OAIAmfEvent::is_immediate_flag_Valid() const{
    return m_immediate_flag_isValid;
}

QList<OAIAmfEventArea> OAIAmfEvent::getAreaList() const {
    return area_list;
}
void OAIAmfEvent::setAreaList(const QList<OAIAmfEventArea> &area_list) {
    this->area_list = area_list;
    this->m_area_list_isSet = true;
}

bool OAIAmfEvent::is_area_list_Set() const{
    return m_area_list_isSet;
}

bool OAIAmfEvent::is_area_list_Valid() const{
    return m_area_list_isValid;
}

QList<OAILocationFilter> OAIAmfEvent::getLocationFilterList() const {
    return location_filter_list;
}
void OAIAmfEvent::setLocationFilterList(const QList<OAILocationFilter> &location_filter_list) {
    this->location_filter_list = location_filter_list;
    this->m_location_filter_list_isSet = true;
}

bool OAIAmfEvent::is_location_filter_list_Set() const{
    return m_location_filter_list_isSet;
}

bool OAIAmfEvent::is_location_filter_list_Valid() const{
    return m_location_filter_list_isValid;
}

qint32 OAIAmfEvent::getRefId() const {
    return ref_id;
}
void OAIAmfEvent::setRefId(const qint32 &ref_id) {
    this->ref_id = ref_id;
    this->m_ref_id_isSet = true;
}

bool OAIAmfEvent::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAIAmfEvent::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

QList<OAITrafficDescriptor> OAIAmfEvent::getTrafficDescriptorList() const {
    return traffic_descriptor_list;
}
void OAIAmfEvent::setTrafficDescriptorList(const QList<OAITrafficDescriptor> &traffic_descriptor_list) {
    this->traffic_descriptor_list = traffic_descriptor_list;
    this->m_traffic_descriptor_list_isSet = true;
}

bool OAIAmfEvent::is_traffic_descriptor_list_Set() const{
    return m_traffic_descriptor_list_isSet;
}

bool OAIAmfEvent::is_traffic_descriptor_list_Valid() const{
    return m_traffic_descriptor_list_isValid;
}

bool OAIAmfEvent::isReportUeReachable() const {
    return report_ue_reachable;
}
void OAIAmfEvent::setReportUeReachable(const bool &report_ue_reachable) {
    this->report_ue_reachable = report_ue_reachable;
    this->m_report_ue_reachable_isSet = true;
}

bool OAIAmfEvent::is_report_ue_reachable_Set() const{
    return m_report_ue_reachable_isSet;
}

bool OAIAmfEvent::is_report_ue_reachable_Valid() const{
    return m_report_ue_reachable_isValid;
}

OAIReachabilityFilter OAIAmfEvent::getReachabilityFilter() const {
    return reachability_filter;
}
void OAIAmfEvent::setReachabilityFilter(const OAIReachabilityFilter &reachability_filter) {
    this->reachability_filter = reachability_filter;
    this->m_reachability_filter_isSet = true;
}

bool OAIAmfEvent::is_reachability_filter_Set() const{
    return m_reachability_filter_isSet;
}

bool OAIAmfEvent::is_reachability_filter_Valid() const{
    return m_reachability_filter_isValid;
}

qint32 OAIAmfEvent::getMaxReports() const {
    return max_reports;
}
void OAIAmfEvent::setMaxReports(const qint32 &max_reports) {
    this->max_reports = max_reports;
    this->m_max_reports_isSet = true;
}

bool OAIAmfEvent::is_max_reports_Set() const{
    return m_max_reports_isSet;
}

bool OAIAmfEvent::is_max_reports_Valid() const{
    return m_max_reports_isValid;
}

qint32 OAIAmfEvent::getMaxResponseTime() const {
    return max_response_time;
}
void OAIAmfEvent::setMaxResponseTime(const qint32 &max_response_time) {
    this->max_response_time = max_response_time;
    this->m_max_response_time_isSet = true;
}

bool OAIAmfEvent::is_max_response_time_Set() const{
    return m_max_response_time_isSet;
}

bool OAIAmfEvent::is_max_response_time_Valid() const{
    return m_max_response_time_isValid;
}

bool OAIAmfEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_immediate_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (area_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (location_filter_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (traffic_descriptor_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_ue_reachable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (reachability_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_reports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_response_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmfEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
