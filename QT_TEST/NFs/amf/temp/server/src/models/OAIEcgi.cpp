/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEcgi.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEcgi::OAIEcgi(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEcgi::OAIEcgi() {
    this->initializeModel();
}

OAIEcgi::~OAIEcgi() {}

void OAIEcgi::initializeModel() {

    m_plmn_id_isSet = false;
    m_plmn_id_isValid = false;

    m_eutra_cell_id_isSet = false;
    m_eutra_cell_id_isValid = false;

    m_nid_isSet = false;
    m_nid_isValid = false;
}

void OAIEcgi::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEcgi::fromJsonObject(QJsonObject json) {

    m_plmn_id_isValid = ::OpenAPI::fromJsonValue(plmn_id, json[QString("plmnId")]);
    m_plmn_id_isSet = !json[QString("plmnId")].isNull() && m_plmn_id_isValid;

    m_eutra_cell_id_isValid = ::OpenAPI::fromJsonValue(eutra_cell_id, json[QString("eutraCellId")]);
    m_eutra_cell_id_isSet = !json[QString("eutraCellId")].isNull() && m_eutra_cell_id_isValid;

    m_nid_isValid = ::OpenAPI::fromJsonValue(nid, json[QString("nid")]);
    m_nid_isSet = !json[QString("nid")].isNull() && m_nid_isValid;
}

QString OAIEcgi::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEcgi::asJsonObject() const {
    QJsonObject obj;
    if (plmn_id.isSet()) {
        obj.insert(QString("plmnId"), ::OpenAPI::toJsonValue(plmn_id));
    }
    if (m_eutra_cell_id_isSet) {
        obj.insert(QString("eutraCellId"), ::OpenAPI::toJsonValue(eutra_cell_id));
    }
    if (m_nid_isSet) {
        obj.insert(QString("nid"), ::OpenAPI::toJsonValue(nid));
    }
    return obj;
}

OAIPlmnId OAIEcgi::getPlmnId() const {
    return plmn_id;
}
void OAIEcgi::setPlmnId(const OAIPlmnId &plmn_id) {
    this->plmn_id = plmn_id;
    this->m_plmn_id_isSet = true;
}

bool OAIEcgi::is_plmn_id_Set() const{
    return m_plmn_id_isSet;
}

bool OAIEcgi::is_plmn_id_Valid() const{
    return m_plmn_id_isValid;
}

QString OAIEcgi::getEutraCellId() const {
    return eutra_cell_id;
}
void OAIEcgi::setEutraCellId(const QString &eutra_cell_id) {
    this->eutra_cell_id = eutra_cell_id;
    this->m_eutra_cell_id_isSet = true;
}

bool OAIEcgi::is_eutra_cell_id_Set() const{
    return m_eutra_cell_id_isSet;
}

bool OAIEcgi::is_eutra_cell_id_Valid() const{
    return m_eutra_cell_id_isValid;
}

QString OAIEcgi::getNid() const {
    return nid;
}
void OAIEcgi::setNid(const QString &nid) {
    this->nid = nid;
    this->m_nid_isSet = true;
}

bool OAIEcgi::is_nid_Set() const{
    return m_nid_isSet;
}

bool OAIEcgi::is_nid_Valid() const{
    return m_nid_isValid;
}

bool OAIEcgi::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (plmn_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eutra_cell_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEcgi::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_plmn_id_isValid && m_eutra_cell_id_isValid && true;
}

} // namespace OpenAPI
