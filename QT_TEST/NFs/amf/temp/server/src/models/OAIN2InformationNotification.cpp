/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIN2InformationNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIN2InformationNotification::OAIN2InformationNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIN2InformationNotification::OAIN2InformationNotification() {
    this->initializeModel();
}

OAIN2InformationNotification::~OAIN2InformationNotification() {}

void OAIN2InformationNotification::initializeModel() {

    m_n2_notify_subscription_id_isSet = false;
    m_n2_notify_subscription_id_isValid = false;

    m_n2_info_container_isSet = false;
    m_n2_info_container_isValid = false;

    m_to_release_session_list_isSet = false;
    m_to_release_session_list_isValid = false;

    m_lcs_correlation_id_isSet = false;
    m_lcs_correlation_id_isValid = false;

    m_notify_reason_isSet = false;
    m_notify_reason_isValid = false;

    m_smf_change_info_list_isSet = false;
    m_smf_change_info_list_isValid = false;

    m_ran_node_id_isSet = false;
    m_ran_node_id_isValid = false;

    m_initial_amf_name_isSet = false;
    m_initial_amf_name_isValid = false;

    m_an_n2_ipv4_addr_isSet = false;
    m_an_n2_ipv4_addr_isValid = false;

    m_an_n2_ipv6_addr_isSet = false;
    m_an_n2_ipv6_addr_isValid = false;

    m_guami_isSet = false;
    m_guami_isValid = false;

    m_notify_source_ng_ran_isSet = false;
    m_notify_source_ng_ran_isValid = false;
}

void OAIN2InformationNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIN2InformationNotification::fromJsonObject(QJsonObject json) {

    m_n2_notify_subscription_id_isValid = ::OpenAPI::fromJsonValue(n2_notify_subscription_id, json[QString("n2NotifySubscriptionId")]);
    m_n2_notify_subscription_id_isSet = !json[QString("n2NotifySubscriptionId")].isNull() && m_n2_notify_subscription_id_isValid;

    m_n2_info_container_isValid = ::OpenAPI::fromJsonValue(n2_info_container, json[QString("n2InfoContainer")]);
    m_n2_info_container_isSet = !json[QString("n2InfoContainer")].isNull() && m_n2_info_container_isValid;

    m_to_release_session_list_isValid = ::OpenAPI::fromJsonValue(to_release_session_list, json[QString("toReleaseSessionList")]);
    m_to_release_session_list_isSet = !json[QString("toReleaseSessionList")].isNull() && m_to_release_session_list_isValid;

    m_lcs_correlation_id_isValid = ::OpenAPI::fromJsonValue(lcs_correlation_id, json[QString("lcsCorrelationId")]);
    m_lcs_correlation_id_isSet = !json[QString("lcsCorrelationId")].isNull() && m_lcs_correlation_id_isValid;

    m_notify_reason_isValid = ::OpenAPI::fromJsonValue(notify_reason, json[QString("notifyReason")]);
    m_notify_reason_isSet = !json[QString("notifyReason")].isNull() && m_notify_reason_isValid;

    m_smf_change_info_list_isValid = ::OpenAPI::fromJsonValue(smf_change_info_list, json[QString("smfChangeInfoList")]);
    m_smf_change_info_list_isSet = !json[QString("smfChangeInfoList")].isNull() && m_smf_change_info_list_isValid;

    m_ran_node_id_isValid = ::OpenAPI::fromJsonValue(ran_node_id, json[QString("ranNodeId")]);
    m_ran_node_id_isSet = !json[QString("ranNodeId")].isNull() && m_ran_node_id_isValid;

    m_initial_amf_name_isValid = ::OpenAPI::fromJsonValue(initial_amf_name, json[QString("initialAmfName")]);
    m_initial_amf_name_isSet = !json[QString("initialAmfName")].isNull() && m_initial_amf_name_isValid;

    m_an_n2_ipv4_addr_isValid = ::OpenAPI::fromJsonValue(an_n2_ipv4_addr, json[QString("anN2IPv4Addr")]);
    m_an_n2_ipv4_addr_isSet = !json[QString("anN2IPv4Addr")].isNull() && m_an_n2_ipv4_addr_isValid;

    m_an_n2_ipv6_addr_isValid = ::OpenAPI::fromJsonValue(an_n2_ipv6_addr, json[QString("anN2IPv6Addr")]);
    m_an_n2_ipv6_addr_isSet = !json[QString("anN2IPv6Addr")].isNull() && m_an_n2_ipv6_addr_isValid;

    m_guami_isValid = ::OpenAPI::fromJsonValue(guami, json[QString("guami")]);
    m_guami_isSet = !json[QString("guami")].isNull() && m_guami_isValid;

    m_notify_source_ng_ran_isValid = ::OpenAPI::fromJsonValue(notify_source_ng_ran, json[QString("notifySourceNgRan")]);
    m_notify_source_ng_ran_isSet = !json[QString("notifySourceNgRan")].isNull() && m_notify_source_ng_ran_isValid;
}

QString OAIN2InformationNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIN2InformationNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_n2_notify_subscription_id_isSet) {
        obj.insert(QString("n2NotifySubscriptionId"), ::OpenAPI::toJsonValue(n2_notify_subscription_id));
    }
    if (n2_info_container.isSet()) {
        obj.insert(QString("n2InfoContainer"), ::OpenAPI::toJsonValue(n2_info_container));
    }
    if (to_release_session_list.size() > 0) {
        obj.insert(QString("toReleaseSessionList"), ::OpenAPI::toJsonValue(to_release_session_list));
    }
    if (m_lcs_correlation_id_isSet) {
        obj.insert(QString("lcsCorrelationId"), ::OpenAPI::toJsonValue(lcs_correlation_id));
    }
    if (notify_reason.isSet()) {
        obj.insert(QString("notifyReason"), ::OpenAPI::toJsonValue(notify_reason));
    }
    if (smf_change_info_list.size() > 0) {
        obj.insert(QString("smfChangeInfoList"), ::OpenAPI::toJsonValue(smf_change_info_list));
    }
    if (ran_node_id.isSet()) {
        obj.insert(QString("ranNodeId"), ::OpenAPI::toJsonValue(ran_node_id));
    }
    if (m_initial_amf_name_isSet) {
        obj.insert(QString("initialAmfName"), ::OpenAPI::toJsonValue(initial_amf_name));
    }
    if (m_an_n2_ipv4_addr_isSet) {
        obj.insert(QString("anN2IPv4Addr"), ::OpenAPI::toJsonValue(an_n2_ipv4_addr));
    }
    if (an_n2_ipv6_addr.isSet()) {
        obj.insert(QString("anN2IPv6Addr"), ::OpenAPI::toJsonValue(an_n2_ipv6_addr));
    }
    if (guami.isSet()) {
        obj.insert(QString("guami"), ::OpenAPI::toJsonValue(guami));
    }
    if (m_notify_source_ng_ran_isSet) {
        obj.insert(QString("notifySourceNgRan"), ::OpenAPI::toJsonValue(notify_source_ng_ran));
    }
    return obj;
}

QString OAIN2InformationNotification::getN2NotifySubscriptionId() const {
    return n2_notify_subscription_id;
}
void OAIN2InformationNotification::setN2NotifySubscriptionId(const QString &n2_notify_subscription_id) {
    this->n2_notify_subscription_id = n2_notify_subscription_id;
    this->m_n2_notify_subscription_id_isSet = true;
}

bool OAIN2InformationNotification::is_n2_notify_subscription_id_Set() const{
    return m_n2_notify_subscription_id_isSet;
}

bool OAIN2InformationNotification::is_n2_notify_subscription_id_Valid() const{
    return m_n2_notify_subscription_id_isValid;
}

OAIN2InfoContainer OAIN2InformationNotification::getN2InfoContainer() const {
    return n2_info_container;
}
void OAIN2InformationNotification::setN2InfoContainer(const OAIN2InfoContainer &n2_info_container) {
    this->n2_info_container = n2_info_container;
    this->m_n2_info_container_isSet = true;
}

bool OAIN2InformationNotification::is_n2_info_container_Set() const{
    return m_n2_info_container_isSet;
}

bool OAIN2InformationNotification::is_n2_info_container_Valid() const{
    return m_n2_info_container_isValid;
}

QList<qint32> OAIN2InformationNotification::getToReleaseSessionList() const {
    return to_release_session_list;
}
void OAIN2InformationNotification::setToReleaseSessionList(const QList<qint32> &to_release_session_list) {
    this->to_release_session_list = to_release_session_list;
    this->m_to_release_session_list_isSet = true;
}

bool OAIN2InformationNotification::is_to_release_session_list_Set() const{
    return m_to_release_session_list_isSet;
}

bool OAIN2InformationNotification::is_to_release_session_list_Valid() const{
    return m_to_release_session_list_isValid;
}

QString OAIN2InformationNotification::getLcsCorrelationId() const {
    return lcs_correlation_id;
}
void OAIN2InformationNotification::setLcsCorrelationId(const QString &lcs_correlation_id) {
    this->lcs_correlation_id = lcs_correlation_id;
    this->m_lcs_correlation_id_isSet = true;
}

bool OAIN2InformationNotification::is_lcs_correlation_id_Set() const{
    return m_lcs_correlation_id_isSet;
}

bool OAIN2InformationNotification::is_lcs_correlation_id_Valid() const{
    return m_lcs_correlation_id_isValid;
}

OAIN2InfoNotifyReason OAIN2InformationNotification::getNotifyReason() const {
    return notify_reason;
}
void OAIN2InformationNotification::setNotifyReason(const OAIN2InfoNotifyReason &notify_reason) {
    this->notify_reason = notify_reason;
    this->m_notify_reason_isSet = true;
}

bool OAIN2InformationNotification::is_notify_reason_Set() const{
    return m_notify_reason_isSet;
}

bool OAIN2InformationNotification::is_notify_reason_Valid() const{
    return m_notify_reason_isValid;
}

QList<OAISmfChangeInfo> OAIN2InformationNotification::getSmfChangeInfoList() const {
    return smf_change_info_list;
}
void OAIN2InformationNotification::setSmfChangeInfoList(const QList<OAISmfChangeInfo> &smf_change_info_list) {
    this->smf_change_info_list = smf_change_info_list;
    this->m_smf_change_info_list_isSet = true;
}

bool OAIN2InformationNotification::is_smf_change_info_list_Set() const{
    return m_smf_change_info_list_isSet;
}

bool OAIN2InformationNotification::is_smf_change_info_list_Valid() const{
    return m_smf_change_info_list_isValid;
}

OAIGlobalRanNodeId OAIN2InformationNotification::getRanNodeId() const {
    return ran_node_id;
}
void OAIN2InformationNotification::setRanNodeId(const OAIGlobalRanNodeId &ran_node_id) {
    this->ran_node_id = ran_node_id;
    this->m_ran_node_id_isSet = true;
}

bool OAIN2InformationNotification::is_ran_node_id_Set() const{
    return m_ran_node_id_isSet;
}

bool OAIN2InformationNotification::is_ran_node_id_Valid() const{
    return m_ran_node_id_isValid;
}

QString OAIN2InformationNotification::getInitialAmfName() const {
    return initial_amf_name;
}
void OAIN2InformationNotification::setInitialAmfName(const QString &initial_amf_name) {
    this->initial_amf_name = initial_amf_name;
    this->m_initial_amf_name_isSet = true;
}

bool OAIN2InformationNotification::is_initial_amf_name_Set() const{
    return m_initial_amf_name_isSet;
}

bool OAIN2InformationNotification::is_initial_amf_name_Valid() const{
    return m_initial_amf_name_isValid;
}

QString OAIN2InformationNotification::getAnN2Ipv4Addr() const {
    return an_n2_ipv4_addr;
}
void OAIN2InformationNotification::setAnN2Ipv4Addr(const QString &an_n2_ipv4_addr) {
    this->an_n2_ipv4_addr = an_n2_ipv4_addr;
    this->m_an_n2_ipv4_addr_isSet = true;
}

bool OAIN2InformationNotification::is_an_n2_ipv4_addr_Set() const{
    return m_an_n2_ipv4_addr_isSet;
}

bool OAIN2InformationNotification::is_an_n2_ipv4_addr_Valid() const{
    return m_an_n2_ipv4_addr_isValid;
}

OAIIpv6Addr OAIN2InformationNotification::getAnN2Ipv6Addr() const {
    return an_n2_ipv6_addr;
}
void OAIN2InformationNotification::setAnN2Ipv6Addr(const OAIIpv6Addr &an_n2_ipv6_addr) {
    this->an_n2_ipv6_addr = an_n2_ipv6_addr;
    this->m_an_n2_ipv6_addr_isSet = true;
}

bool OAIN2InformationNotification::is_an_n2_ipv6_addr_Set() const{
    return m_an_n2_ipv6_addr_isSet;
}

bool OAIN2InformationNotification::is_an_n2_ipv6_addr_Valid() const{
    return m_an_n2_ipv6_addr_isValid;
}

OAIGuami OAIN2InformationNotification::getGuami() const {
    return guami;
}
void OAIN2InformationNotification::setGuami(const OAIGuami &guami) {
    this->guami = guami;
    this->m_guami_isSet = true;
}

bool OAIN2InformationNotification::is_guami_Set() const{
    return m_guami_isSet;
}

bool OAIN2InformationNotification::is_guami_Valid() const{
    return m_guami_isValid;
}

bool OAIN2InformationNotification::isNotifySourceNgRan() const {
    return notify_source_ng_ran;
}
void OAIN2InformationNotification::setNotifySourceNgRan(const bool &notify_source_ng_ran) {
    this->notify_source_ng_ran = notify_source_ng_ran;
    this->m_notify_source_ng_ran_isSet = true;
}

bool OAIN2InformationNotification::is_notify_source_ng_ran_Set() const{
    return m_notify_source_ng_ran_isSet;
}

bool OAIN2InformationNotification::is_notify_source_ng_ran_Valid() const{
    return m_notify_source_ng_ran_isValid;
}

bool OAIN2InformationNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_n2_notify_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (n2_info_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (to_release_session_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lcs_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (notify_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (smf_change_info_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (ran_node_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_amf_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_an_n2_ipv4_addr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (an_n2_ipv6_addr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (guami.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_source_ng_ran_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIN2InformationNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_n2_notify_subscription_id_isValid && true;
}

} // namespace OpenAPI
