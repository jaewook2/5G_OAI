/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPWSResponseData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPWSResponseData::OAIPWSResponseData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPWSResponseData::OAIPWSResponseData() {
    this->initializeModel();
}

OAIPWSResponseData::~OAIPWSResponseData() {}

void OAIPWSResponseData::initializeModel() {

    m_ngap_message_type_isSet = false;
    m_ngap_message_type_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_message_identifier_isSet = false;
    m_message_identifier_isValid = false;

    m_unknown_tai_list_isSet = false;
    m_unknown_tai_list_isValid = false;
}

void OAIPWSResponseData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPWSResponseData::fromJsonObject(QJsonObject json) {

    m_ngap_message_type_isValid = ::OpenAPI::fromJsonValue(ngap_message_type, json[QString("ngapMessageType")]);
    m_ngap_message_type_isSet = !json[QString("ngapMessageType")].isNull() && m_ngap_message_type_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_message_identifier_isValid = ::OpenAPI::fromJsonValue(message_identifier, json[QString("messageIdentifier")]);
    m_message_identifier_isSet = !json[QString("messageIdentifier")].isNull() && m_message_identifier_isValid;

    m_unknown_tai_list_isValid = ::OpenAPI::fromJsonValue(unknown_tai_list, json[QString("unknownTaiList")]);
    m_unknown_tai_list_isSet = !json[QString("unknownTaiList")].isNull() && m_unknown_tai_list_isValid;
}

QString OAIPWSResponseData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPWSResponseData::asJsonObject() const {
    QJsonObject obj;
    if (m_ngap_message_type_isSet) {
        obj.insert(QString("ngapMessageType"), ::OpenAPI::toJsonValue(ngap_message_type));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(serial_number));
    }
    if (m_message_identifier_isSet) {
        obj.insert(QString("messageIdentifier"), ::OpenAPI::toJsonValue(message_identifier));
    }
    if (unknown_tai_list.size() > 0) {
        obj.insert(QString("unknownTaiList"), ::OpenAPI::toJsonValue(unknown_tai_list));
    }
    return obj;
}

qint32 OAIPWSResponseData::getNgapMessageType() const {
    return ngap_message_type;
}
void OAIPWSResponseData::setNgapMessageType(const qint32 &ngap_message_type) {
    this->ngap_message_type = ngap_message_type;
    this->m_ngap_message_type_isSet = true;
}

bool OAIPWSResponseData::is_ngap_message_type_Set() const{
    return m_ngap_message_type_isSet;
}

bool OAIPWSResponseData::is_ngap_message_type_Valid() const{
    return m_ngap_message_type_isValid;
}

qint32 OAIPWSResponseData::getSerialNumber() const {
    return serial_number;
}
void OAIPWSResponseData::setSerialNumber(const qint32 &serial_number) {
    this->serial_number = serial_number;
    this->m_serial_number_isSet = true;
}

bool OAIPWSResponseData::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIPWSResponseData::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

qint32 OAIPWSResponseData::getMessageIdentifier() const {
    return message_identifier;
}
void OAIPWSResponseData::setMessageIdentifier(const qint32 &message_identifier) {
    this->message_identifier = message_identifier;
    this->m_message_identifier_isSet = true;
}

bool OAIPWSResponseData::is_message_identifier_Set() const{
    return m_message_identifier_isSet;
}

bool OAIPWSResponseData::is_message_identifier_Valid() const{
    return m_message_identifier_isValid;
}

QList<OAITai> OAIPWSResponseData::getUnknownTaiList() const {
    return unknown_tai_list;
}
void OAIPWSResponseData::setUnknownTaiList(const QList<OAITai> &unknown_tai_list) {
    this->unknown_tai_list = unknown_tai_list;
    this->m_unknown_tai_list_isSet = true;
}

bool OAIPWSResponseData::is_unknown_tai_list_Set() const{
    return m_unknown_tai_list_isSet;
}

bool OAIPWSResponseData::is_unknown_tai_list_Valid() const{
    return m_unknown_tai_list_isValid;
}

bool OAIPWSResponseData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ngap_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (unknown_tai_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPWSResponseData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ngap_message_type_isValid && m_serial_number_isValid && m_message_identifier_isValid && true;
}

} // namespace OpenAPI
