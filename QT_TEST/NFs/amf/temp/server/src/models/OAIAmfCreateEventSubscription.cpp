/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmfCreateEventSubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmfCreateEventSubscription::OAIAmfCreateEventSubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmfCreateEventSubscription::OAIAmfCreateEventSubscription() {
    this->initializeModel();
}

OAIAmfCreateEventSubscription::~OAIAmfCreateEventSubscription() {}

void OAIAmfCreateEventSubscription::initializeModel() {

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_supported_features_isSet = false;
    m_supported_features_isValid = false;

    m_old_guami_isSet = false;
    m_old_guami_isValid = false;
}

void OAIAmfCreateEventSubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmfCreateEventSubscription::fromJsonObject(QJsonObject json) {

    m_subscription_isValid = ::OpenAPI::fromJsonValue(subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_supported_features_isValid = ::OpenAPI::fromJsonValue(supported_features, json[QString("supportedFeatures")]);
    m_supported_features_isSet = !json[QString("supportedFeatures")].isNull() && m_supported_features_isValid;

    m_old_guami_isValid = ::OpenAPI::fromJsonValue(old_guami, json[QString("oldGuami")]);
    m_old_guami_isSet = !json[QString("oldGuami")].isNull() && m_old_guami_isValid;
}

QString OAIAmfCreateEventSubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmfCreateEventSubscription::asJsonObject() const {
    QJsonObject obj;
    if (subscription.isSet()) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(subscription));
    }
    if (m_supported_features_isSet) {
        obj.insert(QString("supportedFeatures"), ::OpenAPI::toJsonValue(supported_features));
    }
    if (old_guami.isSet()) {
        obj.insert(QString("oldGuami"), ::OpenAPI::toJsonValue(old_guami));
    }
    return obj;
}

OAIAmfEventSubscription OAIAmfCreateEventSubscription::getSubscription() const {
    return subscription;
}
void OAIAmfCreateEventSubscription::setSubscription(const OAIAmfEventSubscription &subscription) {
    this->subscription = subscription;
    this->m_subscription_isSet = true;
}

bool OAIAmfCreateEventSubscription::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIAmfCreateEventSubscription::is_subscription_Valid() const{
    return m_subscription_isValid;
}

QString OAIAmfCreateEventSubscription::getSupportedFeatures() const {
    return supported_features;
}
void OAIAmfCreateEventSubscription::setSupportedFeatures(const QString &supported_features) {
    this->supported_features = supported_features;
    this->m_supported_features_isSet = true;
}

bool OAIAmfCreateEventSubscription::is_supported_features_Set() const{
    return m_supported_features_isSet;
}

bool OAIAmfCreateEventSubscription::is_supported_features_Valid() const{
    return m_supported_features_isValid;
}

OAIGuami OAIAmfCreateEventSubscription::getOldGuami() const {
    return old_guami;
}
void OAIAmfCreateEventSubscription::setOldGuami(const OAIGuami &old_guami) {
    this->old_guami = old_guami;
    this->m_old_guami_isSet = true;
}

bool OAIAmfCreateEventSubscription::is_old_guami_Set() const{
    return m_old_guami_isSet;
}

bool OAIAmfCreateEventSubscription::is_old_guami_Valid() const{
    return m_old_guami_isValid;
}

bool OAIAmfCreateEventSubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (old_guami.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmfCreateEventSubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subscription_isValid && true;
}

} // namespace OpenAPI
