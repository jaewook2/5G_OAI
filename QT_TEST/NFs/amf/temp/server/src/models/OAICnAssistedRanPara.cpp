/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICnAssistedRanPara.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICnAssistedRanPara::OAICnAssistedRanPara(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICnAssistedRanPara::OAICnAssistedRanPara() {
    this->initializeModel();
}

OAICnAssistedRanPara::~OAICnAssistedRanPara() {}

void OAICnAssistedRanPara::initializeModel() {

    m_stationary_indication_isSet = false;
    m_stationary_indication_isValid = false;

    m_communication_duration_time_isSet = false;
    m_communication_duration_time_isValid = false;

    m_periodic_time_isSet = false;
    m_periodic_time_isValid = false;

    m_scheduled_communication_time_isSet = false;
    m_scheduled_communication_time_isValid = false;

    m_scheduled_communication_type_isSet = false;
    m_scheduled_communication_type_isValid = false;

    m_traffic_profile_isSet = false;
    m_traffic_profile_isValid = false;

    m_battery_indication_isSet = false;
    m_battery_indication_isValid = false;
}

void OAICnAssistedRanPara::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICnAssistedRanPara::fromJsonObject(QJsonObject json) {

    m_stationary_indication_isValid = ::OpenAPI::fromJsonValue(stationary_indication, json[QString("stationaryIndication")]);
    m_stationary_indication_isSet = !json[QString("stationaryIndication")].isNull() && m_stationary_indication_isValid;

    m_communication_duration_time_isValid = ::OpenAPI::fromJsonValue(communication_duration_time, json[QString("communicationDurationTime")]);
    m_communication_duration_time_isSet = !json[QString("communicationDurationTime")].isNull() && m_communication_duration_time_isValid;

    m_periodic_time_isValid = ::OpenAPI::fromJsonValue(periodic_time, json[QString("periodicTime")]);
    m_periodic_time_isSet = !json[QString("periodicTime")].isNull() && m_periodic_time_isValid;

    m_scheduled_communication_time_isValid = ::OpenAPI::fromJsonValue(scheduled_communication_time, json[QString("scheduledCommunicationTime")]);
    m_scheduled_communication_time_isSet = !json[QString("scheduledCommunicationTime")].isNull() && m_scheduled_communication_time_isValid;

    m_scheduled_communication_type_isValid = ::OpenAPI::fromJsonValue(scheduled_communication_type, json[QString("scheduledCommunicationType")]);
    m_scheduled_communication_type_isSet = !json[QString("scheduledCommunicationType")].isNull() && m_scheduled_communication_type_isValid;

    m_traffic_profile_isValid = ::OpenAPI::fromJsonValue(traffic_profile, json[QString("trafficProfile")]);
    m_traffic_profile_isSet = !json[QString("trafficProfile")].isNull() && m_traffic_profile_isValid;

    m_battery_indication_isValid = ::OpenAPI::fromJsonValue(battery_indication, json[QString("batteryIndication")]);
    m_battery_indication_isSet = !json[QString("batteryIndication")].isNull() && m_battery_indication_isValid;
}

QString OAICnAssistedRanPara::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICnAssistedRanPara::asJsonObject() const {
    QJsonObject obj;
    if (stationary_indication.isSet()) {
        obj.insert(QString("stationaryIndication"), ::OpenAPI::toJsonValue(stationary_indication));
    }
    if (m_communication_duration_time_isSet) {
        obj.insert(QString("communicationDurationTime"), ::OpenAPI::toJsonValue(communication_duration_time));
    }
    if (m_periodic_time_isSet) {
        obj.insert(QString("periodicTime"), ::OpenAPI::toJsonValue(periodic_time));
    }
    if (scheduled_communication_time.isSet()) {
        obj.insert(QString("scheduledCommunicationTime"), ::OpenAPI::toJsonValue(scheduled_communication_time));
    }
    if (scheduled_communication_type.isSet()) {
        obj.insert(QString("scheduledCommunicationType"), ::OpenAPI::toJsonValue(scheduled_communication_type));
    }
    if (traffic_profile.isSet()) {
        obj.insert(QString("trafficProfile"), ::OpenAPI::toJsonValue(traffic_profile));
    }
    if (battery_indication.isSet()) {
        obj.insert(QString("batteryIndication"), ::OpenAPI::toJsonValue(battery_indication));
    }
    return obj;
}

OAIStationaryIndication OAICnAssistedRanPara::getStationaryIndication() const {
    return stationary_indication;
}
void OAICnAssistedRanPara::setStationaryIndication(const OAIStationaryIndication &stationary_indication) {
    this->stationary_indication = stationary_indication;
    this->m_stationary_indication_isSet = true;
}

bool OAICnAssistedRanPara::is_stationary_indication_Set() const{
    return m_stationary_indication_isSet;
}

bool OAICnAssistedRanPara::is_stationary_indication_Valid() const{
    return m_stationary_indication_isValid;
}

qint32 OAICnAssistedRanPara::getCommunicationDurationTime() const {
    return communication_duration_time;
}
void OAICnAssistedRanPara::setCommunicationDurationTime(const qint32 &communication_duration_time) {
    this->communication_duration_time = communication_duration_time;
    this->m_communication_duration_time_isSet = true;
}

bool OAICnAssistedRanPara::is_communication_duration_time_Set() const{
    return m_communication_duration_time_isSet;
}

bool OAICnAssistedRanPara::is_communication_duration_time_Valid() const{
    return m_communication_duration_time_isValid;
}

qint32 OAICnAssistedRanPara::getPeriodicTime() const {
    return periodic_time;
}
void OAICnAssistedRanPara::setPeriodicTime(const qint32 &periodic_time) {
    this->periodic_time = periodic_time;
    this->m_periodic_time_isSet = true;
}

bool OAICnAssistedRanPara::is_periodic_time_Set() const{
    return m_periodic_time_isSet;
}

bool OAICnAssistedRanPara::is_periodic_time_Valid() const{
    return m_periodic_time_isValid;
}

OAIScheduledCommunicationTime OAICnAssistedRanPara::getScheduledCommunicationTime() const {
    return scheduled_communication_time;
}
void OAICnAssistedRanPara::setScheduledCommunicationTime(const OAIScheduledCommunicationTime &scheduled_communication_time) {
    this->scheduled_communication_time = scheduled_communication_time;
    this->m_scheduled_communication_time_isSet = true;
}

bool OAICnAssistedRanPara::is_scheduled_communication_time_Set() const{
    return m_scheduled_communication_time_isSet;
}

bool OAICnAssistedRanPara::is_scheduled_communication_time_Valid() const{
    return m_scheduled_communication_time_isValid;
}

OAIScheduledCommunicationType OAICnAssistedRanPara::getScheduledCommunicationType() const {
    return scheduled_communication_type;
}
void OAICnAssistedRanPara::setScheduledCommunicationType(const OAIScheduledCommunicationType &scheduled_communication_type) {
    this->scheduled_communication_type = scheduled_communication_type;
    this->m_scheduled_communication_type_isSet = true;
}

bool OAICnAssistedRanPara::is_scheduled_communication_type_Set() const{
    return m_scheduled_communication_type_isSet;
}

bool OAICnAssistedRanPara::is_scheduled_communication_type_Valid() const{
    return m_scheduled_communication_type_isValid;
}

OAITrafficProfile OAICnAssistedRanPara::getTrafficProfile() const {
    return traffic_profile;
}
void OAICnAssistedRanPara::setTrafficProfile(const OAITrafficProfile &traffic_profile) {
    this->traffic_profile = traffic_profile;
    this->m_traffic_profile_isSet = true;
}

bool OAICnAssistedRanPara::is_traffic_profile_Set() const{
    return m_traffic_profile_isSet;
}

bool OAICnAssistedRanPara::is_traffic_profile_Valid() const{
    return m_traffic_profile_isValid;
}

OAIBatteryIndication OAICnAssistedRanPara::getBatteryIndication() const {
    return battery_indication;
}
void OAICnAssistedRanPara::setBatteryIndication(const OAIBatteryIndication &battery_indication) {
    this->battery_indication = battery_indication;
    this->m_battery_indication_isSet = true;
}

bool OAICnAssistedRanPara::is_battery_indication_Set() const{
    return m_battery_indication_isSet;
}

bool OAICnAssistedRanPara::is_battery_indication_Valid() const{
    return m_battery_indication_isValid;
}

bool OAICnAssistedRanPara::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (stationary_indication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_communication_duration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periodic_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (scheduled_communication_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (scheduled_communication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (traffic_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (battery_indication.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICnAssistedRanPara::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
