/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISmallDataRateStatusInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISmallDataRateStatusInfo::OAISmallDataRateStatusInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISmallDataRateStatusInfo::OAISmallDataRateStatusInfo() {
    this->initializeModel();
}

OAISmallDataRateStatusInfo::~OAISmallDataRateStatusInfo() {}

void OAISmallDataRateStatusInfo::initializeModel() {

    m_snssai_isSet = false;
    m_snssai_isValid = false;

    m_dnn_isSet = false;
    m_dnn_isValid = false;

    m_small_data_rate_status_isSet = false;
    m_small_data_rate_status_isValid = false;
}

void OAISmallDataRateStatusInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISmallDataRateStatusInfo::fromJsonObject(QJsonObject json) {

    m_snssai_isValid = ::OpenAPI::fromJsonValue(snssai, json[QString("Snssai")]);
    m_snssai_isSet = !json[QString("Snssai")].isNull() && m_snssai_isValid;

    m_dnn_isValid = ::OpenAPI::fromJsonValue(dnn, json[QString("Dnn")]);
    m_dnn_isSet = !json[QString("Dnn")].isNull() && m_dnn_isValid;

    m_small_data_rate_status_isValid = ::OpenAPI::fromJsonValue(small_data_rate_status, json[QString("SmallDataRateStatus")]);
    m_small_data_rate_status_isSet = !json[QString("SmallDataRateStatus")].isNull() && m_small_data_rate_status_isValid;
}

QString OAISmallDataRateStatusInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISmallDataRateStatusInfo::asJsonObject() const {
    QJsonObject obj;
    if (snssai.isSet()) {
        obj.insert(QString("Snssai"), ::OpenAPI::toJsonValue(snssai));
    }
    if (m_dnn_isSet) {
        obj.insert(QString("Dnn"), ::OpenAPI::toJsonValue(dnn));
    }
    if (small_data_rate_status.isSet()) {
        obj.insert(QString("SmallDataRateStatus"), ::OpenAPI::toJsonValue(small_data_rate_status));
    }
    return obj;
}

OAISnssai OAISmallDataRateStatusInfo::getSnssai() const {
    return snssai;
}
void OAISmallDataRateStatusInfo::setSnssai(const OAISnssai &snssai) {
    this->snssai = snssai;
    this->m_snssai_isSet = true;
}

bool OAISmallDataRateStatusInfo::is_snssai_Set() const{
    return m_snssai_isSet;
}

bool OAISmallDataRateStatusInfo::is_snssai_Valid() const{
    return m_snssai_isValid;
}

QString OAISmallDataRateStatusInfo::getDnn() const {
    return dnn;
}
void OAISmallDataRateStatusInfo::setDnn(const QString &dnn) {
    this->dnn = dnn;
    this->m_dnn_isSet = true;
}

bool OAISmallDataRateStatusInfo::is_dnn_Set() const{
    return m_dnn_isSet;
}

bool OAISmallDataRateStatusInfo::is_dnn_Valid() const{
    return m_dnn_isValid;
}

OAISmallDataRateStatus OAISmallDataRateStatusInfo::getSmallDataRateStatus() const {
    return small_data_rate_status;
}
void OAISmallDataRateStatusInfo::setSmallDataRateStatus(const OAISmallDataRateStatus &small_data_rate_status) {
    this->small_data_rate_status = small_data_rate_status;
    this->m_small_data_rate_status_isSet = true;
}

bool OAISmallDataRateStatusInfo::is_small_data_rate_status_Set() const{
    return m_small_data_rate_status_isSet;
}

bool OAISmallDataRateStatusInfo::is_small_data_rate_status_Valid() const{
    return m_small_data_rate_status_isValid;
}

bool OAISmallDataRateStatusInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (snssai.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dnn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (small_data_rate_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISmallDataRateStatusInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_snssai_isValid && m_dnn_isValid && m_small_data_rate_status_isValid && true;
}

} // namespace OpenAPI
