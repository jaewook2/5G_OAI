/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIN2InfoContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIN2InfoContent::OAIN2InfoContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIN2InfoContent::OAIN2InfoContent() {
    this->initializeModel();
}

OAIN2InfoContent::~OAIN2InfoContent() {}

void OAIN2InfoContent::initializeModel() {

    m_ngap_message_type_isSet = false;
    m_ngap_message_type_isValid = false;

    m_ngap_ie_type_isSet = false;
    m_ngap_ie_type_isValid = false;

    m_ngap_data_isSet = false;
    m_ngap_data_isValid = false;
}

void OAIN2InfoContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIN2InfoContent::fromJsonObject(QJsonObject json) {

    m_ngap_message_type_isValid = ::OpenAPI::fromJsonValue(ngap_message_type, json[QString("ngapMessageType")]);
    m_ngap_message_type_isSet = !json[QString("ngapMessageType")].isNull() && m_ngap_message_type_isValid;

    m_ngap_ie_type_isValid = ::OpenAPI::fromJsonValue(ngap_ie_type, json[QString("ngapIeType")]);
    m_ngap_ie_type_isSet = !json[QString("ngapIeType")].isNull() && m_ngap_ie_type_isValid;

    m_ngap_data_isValid = ::OpenAPI::fromJsonValue(ngap_data, json[QString("ngapData")]);
    m_ngap_data_isSet = !json[QString("ngapData")].isNull() && m_ngap_data_isValid;
}

QString OAIN2InfoContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIN2InfoContent::asJsonObject() const {
    QJsonObject obj;
    if (m_ngap_message_type_isSet) {
        obj.insert(QString("ngapMessageType"), ::OpenAPI::toJsonValue(ngap_message_type));
    }
    if (ngap_ie_type.isSet()) {
        obj.insert(QString("ngapIeType"), ::OpenAPI::toJsonValue(ngap_ie_type));
    }
    if (ngap_data.isSet()) {
        obj.insert(QString("ngapData"), ::OpenAPI::toJsonValue(ngap_data));
    }
    return obj;
}

qint32 OAIN2InfoContent::getNgapMessageType() const {
    return ngap_message_type;
}
void OAIN2InfoContent::setNgapMessageType(const qint32 &ngap_message_type) {
    this->ngap_message_type = ngap_message_type;
    this->m_ngap_message_type_isSet = true;
}

bool OAIN2InfoContent::is_ngap_message_type_Set() const{
    return m_ngap_message_type_isSet;
}

bool OAIN2InfoContent::is_ngap_message_type_Valid() const{
    return m_ngap_message_type_isValid;
}

OAINgapIeType OAIN2InfoContent::getNgapIeType() const {
    return ngap_ie_type;
}
void OAIN2InfoContent::setNgapIeType(const OAINgapIeType &ngap_ie_type) {
    this->ngap_ie_type = ngap_ie_type;
    this->m_ngap_ie_type_isSet = true;
}

bool OAIN2InfoContent::is_ngap_ie_type_Set() const{
    return m_ngap_ie_type_isSet;
}

bool OAIN2InfoContent::is_ngap_ie_type_Valid() const{
    return m_ngap_ie_type_isValid;
}

OAIRefToBinaryData OAIN2InfoContent::getNgapData() const {
    return ngap_data;
}
void OAIN2InfoContent::setNgapData(const OAIRefToBinaryData &ngap_data) {
    this->ngap_data = ngap_data;
    this->m_ngap_data_isSet = true;
}

bool OAIN2InfoContent::is_ngap_data_Set() const{
    return m_ngap_data_isSet;
}

bool OAIN2InfoContent::is_ngap_data_Valid() const{
    return m_ngap_data_isValid;
}

bool OAIN2InfoContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ngap_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (ngap_ie_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (ngap_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIN2InfoContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ngap_data_isValid && true;
}

} // namespace OpenAPI
