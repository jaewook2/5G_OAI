/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIN1MessageNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIN1MessageNotification::OAIN1MessageNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIN1MessageNotification::OAIN1MessageNotification() {
    this->initializeModel();
}

OAIN1MessageNotification::~OAIN1MessageNotification() {}

void OAIN1MessageNotification::initializeModel() {

    m_n1_notify_subscription_id_isSet = false;
    m_n1_notify_subscription_id_isValid = false;

    m_n1_message_container_isSet = false;
    m_n1_message_container_isValid = false;

    m_lcs_correlation_id_isSet = false;
    m_lcs_correlation_id_isValid = false;

    m_registration_ctxt_container_isSet = false;
    m_registration_ctxt_container_isValid = false;

    m_new_lmf_identification_isSet = false;
    m_new_lmf_identification_isValid = false;

    m_guami_isSet = false;
    m_guami_isValid = false;

    m_c_io_t5_gs_optimisation_isSet = false;
    m_c_io_t5_gs_optimisation_isValid = false;

    m_ecgi_isSet = false;
    m_ecgi_isValid = false;

    m_ncgi_isSet = false;
    m_ncgi_isValid = false;
}

void OAIN1MessageNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIN1MessageNotification::fromJsonObject(QJsonObject json) {

    m_n1_notify_subscription_id_isValid = ::OpenAPI::fromJsonValue(n1_notify_subscription_id, json[QString("n1NotifySubscriptionId")]);
    m_n1_notify_subscription_id_isSet = !json[QString("n1NotifySubscriptionId")].isNull() && m_n1_notify_subscription_id_isValid;

    m_n1_message_container_isValid = ::OpenAPI::fromJsonValue(n1_message_container, json[QString("n1MessageContainer")]);
    m_n1_message_container_isSet = !json[QString("n1MessageContainer")].isNull() && m_n1_message_container_isValid;

    m_lcs_correlation_id_isValid = ::OpenAPI::fromJsonValue(lcs_correlation_id, json[QString("lcsCorrelationId")]);
    m_lcs_correlation_id_isSet = !json[QString("lcsCorrelationId")].isNull() && m_lcs_correlation_id_isValid;

    m_registration_ctxt_container_isValid = ::OpenAPI::fromJsonValue(registration_ctxt_container, json[QString("registrationCtxtContainer")]);
    m_registration_ctxt_container_isSet = !json[QString("registrationCtxtContainer")].isNull() && m_registration_ctxt_container_isValid;

    m_new_lmf_identification_isValid = ::OpenAPI::fromJsonValue(new_lmf_identification, json[QString("newLmfIdentification")]);
    m_new_lmf_identification_isSet = !json[QString("newLmfIdentification")].isNull() && m_new_lmf_identification_isValid;

    m_guami_isValid = ::OpenAPI::fromJsonValue(guami, json[QString("guami")]);
    m_guami_isSet = !json[QString("guami")].isNull() && m_guami_isValid;

    m_c_io_t5_gs_optimisation_isValid = ::OpenAPI::fromJsonValue(c_io_t5_gs_optimisation, json[QString("cIoT5GSOptimisation")]);
    m_c_io_t5_gs_optimisation_isSet = !json[QString("cIoT5GSOptimisation")].isNull() && m_c_io_t5_gs_optimisation_isValid;

    m_ecgi_isValid = ::OpenAPI::fromJsonValue(ecgi, json[QString("ecgi")]);
    m_ecgi_isSet = !json[QString("ecgi")].isNull() && m_ecgi_isValid;

    m_ncgi_isValid = ::OpenAPI::fromJsonValue(ncgi, json[QString("ncgi")]);
    m_ncgi_isSet = !json[QString("ncgi")].isNull() && m_ncgi_isValid;
}

QString OAIN1MessageNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIN1MessageNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_n1_notify_subscription_id_isSet) {
        obj.insert(QString("n1NotifySubscriptionId"), ::OpenAPI::toJsonValue(n1_notify_subscription_id));
    }
    if (n1_message_container.isSet()) {
        obj.insert(QString("n1MessageContainer"), ::OpenAPI::toJsonValue(n1_message_container));
    }
    if (m_lcs_correlation_id_isSet) {
        obj.insert(QString("lcsCorrelationId"), ::OpenAPI::toJsonValue(lcs_correlation_id));
    }
    if (registration_ctxt_container.isSet()) {
        obj.insert(QString("registrationCtxtContainer"), ::OpenAPI::toJsonValue(registration_ctxt_container));
    }
    if (m_new_lmf_identification_isSet) {
        obj.insert(QString("newLmfIdentification"), ::OpenAPI::toJsonValue(new_lmf_identification));
    }
    if (guami.isSet()) {
        obj.insert(QString("guami"), ::OpenAPI::toJsonValue(guami));
    }
    if (m_c_io_t5_gs_optimisation_isSet) {
        obj.insert(QString("cIoT5GSOptimisation"), ::OpenAPI::toJsonValue(c_io_t5_gs_optimisation));
    }
    if (ecgi.isSet()) {
        obj.insert(QString("ecgi"), ::OpenAPI::toJsonValue(ecgi));
    }
    if (ncgi.isSet()) {
        obj.insert(QString("ncgi"), ::OpenAPI::toJsonValue(ncgi));
    }
    return obj;
}

QString OAIN1MessageNotification::getN1NotifySubscriptionId() const {
    return n1_notify_subscription_id;
}
void OAIN1MessageNotification::setN1NotifySubscriptionId(const QString &n1_notify_subscription_id) {
    this->n1_notify_subscription_id = n1_notify_subscription_id;
    this->m_n1_notify_subscription_id_isSet = true;
}

bool OAIN1MessageNotification::is_n1_notify_subscription_id_Set() const{
    return m_n1_notify_subscription_id_isSet;
}

bool OAIN1MessageNotification::is_n1_notify_subscription_id_Valid() const{
    return m_n1_notify_subscription_id_isValid;
}

OAIN1MessageContainer OAIN1MessageNotification::getN1MessageContainer() const {
    return n1_message_container;
}
void OAIN1MessageNotification::setN1MessageContainer(const OAIN1MessageContainer &n1_message_container) {
    this->n1_message_container = n1_message_container;
    this->m_n1_message_container_isSet = true;
}

bool OAIN1MessageNotification::is_n1_message_container_Set() const{
    return m_n1_message_container_isSet;
}

bool OAIN1MessageNotification::is_n1_message_container_Valid() const{
    return m_n1_message_container_isValid;
}

QString OAIN1MessageNotification::getLcsCorrelationId() const {
    return lcs_correlation_id;
}
void OAIN1MessageNotification::setLcsCorrelationId(const QString &lcs_correlation_id) {
    this->lcs_correlation_id = lcs_correlation_id;
    this->m_lcs_correlation_id_isSet = true;
}

bool OAIN1MessageNotification::is_lcs_correlation_id_Set() const{
    return m_lcs_correlation_id_isSet;
}

bool OAIN1MessageNotification::is_lcs_correlation_id_Valid() const{
    return m_lcs_correlation_id_isValid;
}

OAIRegistrationContextContainer OAIN1MessageNotification::getRegistrationCtxtContainer() const {
    return registration_ctxt_container;
}
void OAIN1MessageNotification::setRegistrationCtxtContainer(const OAIRegistrationContextContainer &registration_ctxt_container) {
    this->registration_ctxt_container = registration_ctxt_container;
    this->m_registration_ctxt_container_isSet = true;
}

bool OAIN1MessageNotification::is_registration_ctxt_container_Set() const{
    return m_registration_ctxt_container_isSet;
}

bool OAIN1MessageNotification::is_registration_ctxt_container_Valid() const{
    return m_registration_ctxt_container_isValid;
}

QString OAIN1MessageNotification::getNewLmfIdentification() const {
    return new_lmf_identification;
}
void OAIN1MessageNotification::setNewLmfIdentification(const QString &new_lmf_identification) {
    this->new_lmf_identification = new_lmf_identification;
    this->m_new_lmf_identification_isSet = true;
}

bool OAIN1MessageNotification::is_new_lmf_identification_Set() const{
    return m_new_lmf_identification_isSet;
}

bool OAIN1MessageNotification::is_new_lmf_identification_Valid() const{
    return m_new_lmf_identification_isValid;
}

OAIGuami OAIN1MessageNotification::getGuami() const {
    return guami;
}
void OAIN1MessageNotification::setGuami(const OAIGuami &guami) {
    this->guami = guami;
    this->m_guami_isSet = true;
}

bool OAIN1MessageNotification::is_guami_Set() const{
    return m_guami_isSet;
}

bool OAIN1MessageNotification::is_guami_Valid() const{
    return m_guami_isValid;
}

bool OAIN1MessageNotification::isCIoT5GsOptimisation() const {
    return c_io_t5_gs_optimisation;
}
void OAIN1MessageNotification::setCIoT5GsOptimisation(const bool &c_io_t5_gs_optimisation) {
    this->c_io_t5_gs_optimisation = c_io_t5_gs_optimisation;
    this->m_c_io_t5_gs_optimisation_isSet = true;
}

bool OAIN1MessageNotification::is_c_io_t5_gs_optimisation_Set() const{
    return m_c_io_t5_gs_optimisation_isSet;
}

bool OAIN1MessageNotification::is_c_io_t5_gs_optimisation_Valid() const{
    return m_c_io_t5_gs_optimisation_isValid;
}

OAIEcgi OAIN1MessageNotification::getEcgi() const {
    return ecgi;
}
void OAIN1MessageNotification::setEcgi(const OAIEcgi &ecgi) {
    this->ecgi = ecgi;
    this->m_ecgi_isSet = true;
}

bool OAIN1MessageNotification::is_ecgi_Set() const{
    return m_ecgi_isSet;
}

bool OAIN1MessageNotification::is_ecgi_Valid() const{
    return m_ecgi_isValid;
}

OAINcgi OAIN1MessageNotification::getNcgi() const {
    return ncgi;
}
void OAIN1MessageNotification::setNcgi(const OAINcgi &ncgi) {
    this->ncgi = ncgi;
    this->m_ncgi_isSet = true;
}

bool OAIN1MessageNotification::is_ncgi_Set() const{
    return m_ncgi_isSet;
}

bool OAIN1MessageNotification::is_ncgi_Valid() const{
    return m_ncgi_isValid;
}

bool OAIN1MessageNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_n1_notify_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (n1_message_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lcs_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (registration_ctxt_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_lmf_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (guami.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_c_io_t5_gs_optimisation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (ecgi.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (ncgi.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIN1MessageNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_n1_message_container_isValid && true;
}

} // namespace OpenAPI
