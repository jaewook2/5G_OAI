/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINFType_anyOf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINFType_anyOf::OAINFType_anyOf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINFType_anyOf::OAINFType_anyOf() {
    this->initializeModel();
}

OAINFType_anyOf::~OAINFType_anyOf() {}

void OAINFType_anyOf::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINFType_anyOf::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINFType_anyOf::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NRF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::NRF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UDM", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::UDM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AMF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::AMF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SMF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::SMF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUSF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::AUSF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NEF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::NEF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PCF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::PCF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SMSF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::SMSF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NSSF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::NSSF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UDR", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::UDR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LMF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::LMF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GMLC", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::GMLC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("5G_EIR", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::_5G_EIR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SEPP", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::SEPP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::UPF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("N3IWF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::N3IWF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::AF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UDSF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::UDSF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BSF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::BSF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::CHF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NWDAF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::NWDAF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PCSCF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::PCSCF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CBCF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::CBCF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HSS", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::HSS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UCMF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::UCMF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SOR_AF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::SOR_AF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SPAF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::SPAF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MME", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::MME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCSAS", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::SCSAS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCEF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::SCEF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCP", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::SCP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NSSAAF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::NSSAAF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ICSCF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::ICSCF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCSCF", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::SCSCF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DRA", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::DRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMS_AS", Qt::CaseInsensitive) == 0) {
        m_value = eOAINFType_anyOf::IMS_AS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINFType_anyOf::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINFType_anyOf::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINFType_anyOf::NRF:
            val = "NRF";
            break;
        case eOAINFType_anyOf::UDM:
            val = "UDM";
            break;
        case eOAINFType_anyOf::AMF:
            val = "AMF";
            break;
        case eOAINFType_anyOf::SMF:
            val = "SMF";
            break;
        case eOAINFType_anyOf::AUSF:
            val = "AUSF";
            break;
        case eOAINFType_anyOf::NEF:
            val = "NEF";
            break;
        case eOAINFType_anyOf::PCF:
            val = "PCF";
            break;
        case eOAINFType_anyOf::SMSF:
            val = "SMSF";
            break;
        case eOAINFType_anyOf::NSSF:
            val = "NSSF";
            break;
        case eOAINFType_anyOf::UDR:
            val = "UDR";
            break;
        case eOAINFType_anyOf::LMF:
            val = "LMF";
            break;
        case eOAINFType_anyOf::GMLC:
            val = "GMLC";
            break;
        case eOAINFType_anyOf::_5G_EIR:
            val = "5G_EIR";
            break;
        case eOAINFType_anyOf::SEPP:
            val = "SEPP";
            break;
        case eOAINFType_anyOf::UPF:
            val = "UPF";
            break;
        case eOAINFType_anyOf::N3IWF:
            val = "N3IWF";
            break;
        case eOAINFType_anyOf::AF:
            val = "AF";
            break;
        case eOAINFType_anyOf::UDSF:
            val = "UDSF";
            break;
        case eOAINFType_anyOf::BSF:
            val = "BSF";
            break;
        case eOAINFType_anyOf::CHF:
            val = "CHF";
            break;
        case eOAINFType_anyOf::NWDAF:
            val = "NWDAF";
            break;
        case eOAINFType_anyOf::PCSCF:
            val = "PCSCF";
            break;
        case eOAINFType_anyOf::CBCF:
            val = "CBCF";
            break;
        case eOAINFType_anyOf::HSS:
            val = "HSS";
            break;
        case eOAINFType_anyOf::UCMF:
            val = "UCMF";
            break;
        case eOAINFType_anyOf::SOR_AF:
            val = "SOR_AF";
            break;
        case eOAINFType_anyOf::SPAF:
            val = "SPAF";
            break;
        case eOAINFType_anyOf::MME:
            val = "MME";
            break;
        case eOAINFType_anyOf::SCSAS:
            val = "SCSAS";
            break;
        case eOAINFType_anyOf::SCEF:
            val = "SCEF";
            break;
        case eOAINFType_anyOf::SCP:
            val = "SCP";
            break;
        case eOAINFType_anyOf::NSSAAF:
            val = "NSSAAF";
            break;
        case eOAINFType_anyOf::ICSCF:
            val = "ICSCF";
            break;
        case eOAINFType_anyOf::SCSCF:
            val = "SCSCF";
            break;
        case eOAINFType_anyOf::DRA:
            val = "DRA";
            break;
        case eOAINFType_anyOf::IMS_AS:
            val = "IMS_AS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINFType_anyOf::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINFType_anyOf::eOAINFType_anyOf OAINFType_anyOf::getValue() const {
    return m_value;
}

void OAINFType_anyOf::setValue(const OAINFType_anyOf::eOAINFType_anyOf& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINFType_anyOf::isSet() const {
    
    return m_value_isSet;
}

bool OAINFType_anyOf::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
