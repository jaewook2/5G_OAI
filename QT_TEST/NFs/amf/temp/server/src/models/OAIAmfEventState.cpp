/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmfEventState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmfEventState::OAIAmfEventState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmfEventState::OAIAmfEventState() {
    this->initializeModel();
}

OAIAmfEventState::~OAIAmfEventState() {}

void OAIAmfEventState::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_remain_reports_isSet = false;
    m_remain_reports_isValid = false;

    m_remain_duration_isSet = false;
    m_remain_duration_isValid = false;
}

void OAIAmfEventState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmfEventState::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_remain_reports_isValid = ::OpenAPI::fromJsonValue(remain_reports, json[QString("remainReports")]);
    m_remain_reports_isSet = !json[QString("remainReports")].isNull() && m_remain_reports_isValid;

    m_remain_duration_isValid = ::OpenAPI::fromJsonValue(remain_duration, json[QString("remainDuration")]);
    m_remain_duration_isSet = !json[QString("remainDuration")].isNull() && m_remain_duration_isValid;
}

QString OAIAmfEventState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmfEventState::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(active));
    }
    if (m_remain_reports_isSet) {
        obj.insert(QString("remainReports"), ::OpenAPI::toJsonValue(remain_reports));
    }
    if (m_remain_duration_isSet) {
        obj.insert(QString("remainDuration"), ::OpenAPI::toJsonValue(remain_duration));
    }
    return obj;
}

bool OAIAmfEventState::isActive() const {
    return active;
}
void OAIAmfEventState::setActive(const bool &active) {
    this->active = active;
    this->m_active_isSet = true;
}

bool OAIAmfEventState::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAmfEventState::is_active_Valid() const{
    return m_active_isValid;
}

qint32 OAIAmfEventState::getRemainReports() const {
    return remain_reports;
}
void OAIAmfEventState::setRemainReports(const qint32 &remain_reports) {
    this->remain_reports = remain_reports;
    this->m_remain_reports_isSet = true;
}

bool OAIAmfEventState::is_remain_reports_Set() const{
    return m_remain_reports_isSet;
}

bool OAIAmfEventState::is_remain_reports_Valid() const{
    return m_remain_reports_isValid;
}

qint32 OAIAmfEventState::getRemainDuration() const {
    return remain_duration;
}
void OAIAmfEventState::setRemainDuration(const qint32 &remain_duration) {
    this->remain_duration = remain_duration;
    this->m_remain_duration_isSet = true;
}

bool OAIAmfEventState::is_remain_duration_Set() const{
    return m_remain_duration_isSet;
}

bool OAIAmfEventState::is_remain_duration_Valid() const{
    return m_remain_duration_isValid;
}

bool OAIAmfEventState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remain_reports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remain_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmfEventState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && true;
}

} // namespace OpenAPI
