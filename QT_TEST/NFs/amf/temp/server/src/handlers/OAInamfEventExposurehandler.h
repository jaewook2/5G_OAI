/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_NAMFEVENTEXPOSUREHANDLER_H 
#define OAI_NAMFEVENTEXPOSUREHANDLER_H

#include <functional>
#include <QObject>
#include <QStringList>
#include <QSharedPointer>
#include <QList>
#include <QMultiMap>
#include <QRegularExpression>

#include <qhttpengine/socket.h>
#include <qhttpengine/handler.h>
#include <qhttpengine/qobjecthandler.h>

#include "OAIEEIndividualSubscriptionDocumentApiHandler.h"
#include "OAIEESubscriptionsCollectionDocumentApiHandler.h"


namespace OpenAPI {

class OAInamfEventExposurehandler : public QObject
{
    Q_OBJECT
public:
    OAInamfEventExposurehandler();
    virtual ~OAInamfEventExposurehandler();

    void setUpRoutes();
    bool processRequest(QHttpEngine::Socket *socket);
    
    void setOAIEEIndividualSubscriptionDocumentApiHandler(QSharedPointer<OAIEEIndividualSubscriptionDocumentApiHandler> handler);
    void setOAIEESubscriptionsCollectionDocumentApiHandler(QSharedPointer<OAIEESubscriptionsCollectionDocumentApiHandler> handler);
private:
    QMap<QString, std::function<void(QHttpEngine::Socket *)>> Routes;
    QMultiMap<QString, std::function<void(QHttpEngine::Socket *)>> RoutesWithPathParam;

    bool handleRequest(QHttpEngine::Socket *socket);
    bool handleRequestAndExtractPathParam(QHttpEngine::Socket *socket);

    
    QSharedPointer<OAIEEIndividualSubscriptionDocumentApiHandler> mOAIEEIndividualSubscriptionDocumentApiHandler;
    QSharedPointer<OAIEESubscriptionsCollectionDocumentApiHandler> mOAIEESubscriptionsCollectionDocumentApiHandler;
protected:
    // override this method to provide custom class derived from ApiHandler classes
    virtual void createApiHandlers();

private :
    inline QString fromQHttpEngineMethod(QHttpEngine::Socket::Method method){
        switch( method ){
            case QHttpEngine::Socket::Method::OPTIONS:
                return QStringLiteral("OPTIONS");
            case QHttpEngine::Socket::Method::GET:
                return QStringLiteral("GET");
            case QHttpEngine::Socket::Method::HEAD:
                return QStringLiteral("HEAD");
            case QHttpEngine::Socket::Method::POST:
                return QStringLiteral("POST");
            case QHttpEngine::Socket::Method::PUT:
                return QStringLiteral("PUT");
            case QHttpEngine::Socket::Method::DELETE:
                return QStringLiteral("DELETE");
            case QHttpEngine::Socket::Method::TRACE:
                return QStringLiteral("TRACE");
            case QHttpEngine::Socket::Method::CONNECT:
                return QStringLiteral("CONNECT");
        }
        return QStringLiteral("");
    }

    inline QRegularExpressionMatch getRequestMatch(QString serverTemplatePath, QString requestPath){
        QStringList splitword = serverTemplatePath.split("{");
        //before
        QString before = splitword[0];
        QString middle = splitword[1].split("}")[0];
        QString after = splitword[1].split("}")[1];
        before.append("(?<");
        middle.append(">\\d)");
        QString path = QString("%1%2%3").arg(before).arg(middle).arg(after);
        QRegularExpression pathExpr(path);
        return pathExpr.match( requestPath );
    }

};


}

#endif // OAI_APIROUTER_H
