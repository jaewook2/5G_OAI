/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>


#include "OAInamfEventExposurehandler.h"
#include "OAIEEIndividualSubscriptionDocumentApiRequest.h"
#include "OAIEESubscriptionsCollectionDocumentApiRequest.h"


namespace OpenAPI {

OAInamfEventExposurehandler::OAInamfEventExposurehandler() {
    createApiHandlers();
}

OAInamfEventExposurehandler::~OAInamfEventExposurehandler(){

}

void OAInamfEventExposurehandler::createApiHandlers() { 
    mOAIEEIndividualSubscriptionDocumentApiHandler = QSharedPointer<OAIEEIndividualSubscriptionDocumentApiHandler>::create();
    mOAIEESubscriptionsCollectionDocumentApiHandler = QSharedPointer<OAIEESubscriptionsCollectionDocumentApiHandler>::create();
}


void OAInamfEventExposurehandler::setOAIEEIndividualSubscriptionDocumentApiHandler(QSharedPointer<OAIEEIndividualSubscriptionDocumentApiHandler> handler){
    mOAIEEIndividualSubscriptionDocumentApiHandler = handler;
}
void OAInamfEventExposurehandler::setOAIEESubscriptionsCollectionDocumentApiHandler(QSharedPointer<OAIEESubscriptionsCollectionDocumentApiHandler> handler){
    mOAIEESubscriptionsCollectionDocumentApiHandler = handler;
}

void OAInamfEventExposurehandler::setUpRoutes() {
    
    Routes.insert(QString("%1 %2").arg("POST").arg("/namf-evts/v1/subscriptions").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIEESubscriptionsCollectionDocumentApiRequest(socket, mOAIEESubscriptionsCollectionDocumentApiHandler);
            reqObj->createSubscriptionRequest();
    });
}

bool OAInamfEventExposurehandler::processRequest(QHttpEngine::Socket *socket){
    if( handleRequest(socket) ){
        return true;
    }
    if( handleRequestAndExtractPathParam(socket) ){
        return true;
    }
    return false;
}

bool OAInamfEventExposurehandler::handleRequest(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    if ( Routes.contains(reqPath) ) {
        Routes.value(reqPath).operator()(socket);
        return true;
    }
    return false;
}

bool OAInamfEventExposurehandler::handleRequestAndExtractPathParam(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/namf-evts/v1/subscriptions/{subscriptionId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString subscriptionId = match.captured(QString("subscriptionId").toLower());
                auto reqObj = new OAIEEIndividualSubscriptionDocumentApiRequest(socket, mOAIEEIndividualSubscriptionDocumentApiHandler);
                reqObj->deleteSubscriptionRequest(subscriptionId);
                return true;
            }
        }
    }
    return false;
}

}
