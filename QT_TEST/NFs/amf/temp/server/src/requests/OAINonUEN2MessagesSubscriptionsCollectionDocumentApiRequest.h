/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest_H
#define OAI_OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAINonUeN2InfoSubscriptionCreateData.h"
#include "OAINonUeN2InfoSubscriptionCreatedData.h"
#include "OAIProblemDetails.h"
#include "OAIRedirectResponse.h"
#include <QString>
#include "OAINonUEN2MessagesSubscriptionsCollectionDocumentApiHandler.h"

namespace OpenAPI {

class OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest : public QObject
{
    Q_OBJECT

public:
    OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAINonUEN2MessagesSubscriptionsCollectionDocumentApiHandler> handler);
    virtual ~OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest();

    void nonUeN2InfoSubscribeRequest();
    

    void nonUeN2InfoSubscribeResponse(const OAINonUeN2InfoSubscriptionCreatedData& res);
    

    void nonUeN2InfoSubscribeError(const OAINonUeN2InfoSubscriptionCreatedData& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void nonUeN2InfoSubscribe(OAINonUeN2InfoSubscriptionCreateData oai_non_ue_n2_info_subscription_create_data);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAINonUEN2MessagesSubscriptionsCollectionDocumentApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest_H
