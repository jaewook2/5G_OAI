/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest.h"

namespace OpenAPI {

OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest::OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAINonUEN2MessagesSubscriptionsCollectionDocumentApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest::~OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest::~OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest()";
}

QMap<QString, QString>
OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest::getRawSocket(){
    return socket;
}


void OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest::nonUeN2InfoSubscribeRequest(){
    qDebug() << "/namf-comm/v1/non-ue-n2-messages/subscriptions";
    connect(this, &OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest::nonUeN2InfoSubscribe, handler.data(), &OAINonUEN2MessagesSubscriptionsCollectionDocumentApiHandler::nonUeN2InfoSubscribe);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAINonUeN2InfoSubscriptionCreateData oai_non_ue_n2_info_subscription_create_data;
    ::OpenAPI::fromJsonValue(oai_non_ue_n2_info_subscription_create_data, obj);
    

    emit nonUeN2InfoSubscribe(oai_non_ue_n2_info_subscription_create_data);
}



void OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest::nonUeN2InfoSubscribeResponse(const OAINonUeN2InfoSubscriptionCreatedData& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest::nonUeN2InfoSubscribeError(const OAINonUeN2InfoSubscriptionCreatedData& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAINonUEN2MessagesSubscriptionsCollectionDocumentApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
