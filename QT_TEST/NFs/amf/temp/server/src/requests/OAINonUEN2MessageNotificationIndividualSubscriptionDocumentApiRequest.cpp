/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest.h"

namespace OpenAPI {

OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest::OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest::~OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest::~OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest()";
}

QMap<QString, QString>
OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest::getRawSocket(){
    return socket;
}


void OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest::nonUeN2InfoUnSubscribeRequest(const QString& n2_notify_subscription_idstr){
    qDebug() << "/namf-comm/v1/non-ue-n2-messages/subscriptions/{n2NotifySubscriptionId}";
    connect(this, &OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest::nonUeN2InfoUnSubscribe, handler.data(), &OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiHandler::nonUeN2InfoUnSubscribe);

    
    QString n2_notify_subscription_id;
    fromStringValue(n2_notify_subscription_idstr, n2_notify_subscription_id);
    

    emit nonUeN2InfoUnSubscribe(n2_notify_subscription_id);
}



void OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest::nonUeN2InfoUnSubscribeResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}


void OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest::nonUeN2InfoUnSubscribeError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAINonUEN2MessageNotificationIndividualSubscriptionDocumentApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
