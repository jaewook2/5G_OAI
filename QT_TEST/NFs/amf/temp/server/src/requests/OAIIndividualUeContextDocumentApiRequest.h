/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIndividualUeContextDocumentApiRequest_H
#define OAI_OAIIndividualUeContextDocumentApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIAssignEbiData.h"
#include "OAIAssignEbiError.h"
#include "OAIAssignedEbiData.h"
#include "OAIHttpFileElement.h"
#include "OAIProblemDetails.h"
#include "OAIRedirectResponse.h"
#include "OAIUEContextRelease.h"
#include "OAIUeContextCancelRelocateData.h"
#include "OAIUeContextCreateData.h"
#include "OAIUeContextCreateError.h"
#include "OAIUeContextCreatedData.h"
#include "OAIUeContextRelocateData.h"
#include "OAIUeContextRelocatedData.h"
#include "OAIUeContextTransferReqData.h"
#include "OAIUeContextTransferRspData.h"
#include "OAIUeRegStatusUpdateReqData.h"
#include "OAIUeRegStatusUpdateRspData.h"
#include <QString>
#include "OAIIndividualUeContextDocumentApiHandler.h"

namespace OpenAPI {

class OAIIndividualUeContextDocumentApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIIndividualUeContextDocumentApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIIndividualUeContextDocumentApiHandler> handler);
    virtual ~OAIIndividualUeContextDocumentApiRequest();

    void cancelRelocateUEContextRequest(const QString& ue_context_id);
    void createUEContextRequest(const QString& ue_context_id);
    void eBIAssignmentRequest(const QString& ue_context_id);
    void registrationStatusUpdateRequest(const QString& ue_context_id);
    void releaseUEContextRequest(const QString& ue_context_id);
    void relocateUEContextRequest(const QString& ue_context_id);
    void uEContextTransferRequest(const QString& ue_context_id);
    

    void cancelRelocateUEContextResponse();
    void createUEContextResponse(const OAIUeContextCreatedData& res);
    void eBIAssignmentResponse(const OAIAssignedEbiData& res);
    void registrationStatusUpdateResponse(const OAIUeRegStatusUpdateRspData& res);
    void releaseUEContextResponse();
    void relocateUEContextResponse(const OAIUeContextRelocatedData& res);
    void uEContextTransferResponse(const OAIUeContextTransferRspData& res);
    

    void cancelRelocateUEContextError(QNetworkReply::NetworkError error_type, QString& error_str);
    void createUEContextError(const OAIUeContextCreatedData& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void eBIAssignmentError(const OAIAssignedEbiData& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void registrationStatusUpdateError(const OAIUeRegStatusUpdateRspData& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void releaseUEContextError(QNetworkReply::NetworkError error_type, QString& error_str);
    void relocateUEContextError(const OAIUeContextRelocatedData& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void uEContextTransferError(const OAIUeContextTransferRspData& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void cancelRelocateUEContext(QString ue_context_id, OAIUeContextCancelRelocateData json_data, OAIHttpFileElement binary_data_gtpc_message);
    void createUEContext(QString ue_context_id, OAIUeContextCreateData json_data, OAIHttpFileElement binary_data_n2_information, OAIHttpFileElement binary_data_n2_information_ext1, OAIHttpFileElement binary_data_n2_information_ext2, OAIHttpFileElement binary_data_n2_information_ext3, OAIHttpFileElement binary_data_n2_information_ext4, OAIHttpFileElement binary_data_n2_information_ext5, OAIHttpFileElement binary_data_n2_information_ext6, OAIHttpFileElement binary_data_n2_information_ext7, OAIHttpFileElement binary_data_n2_information_ext8, OAIHttpFileElement binary_data_n2_information_ext9, OAIHttpFileElement binary_data_n2_information_ext10, OAIHttpFileElement binary_data_n2_information_ext11, OAIHttpFileElement binary_data_n2_information_ext12, OAIHttpFileElement binary_data_n2_information_ext13, OAIHttpFileElement binary_data_n2_information_ext14, OAIHttpFileElement binary_data_n2_information_ext15, OAIHttpFileElement binary_data_n2_information_ext16);
    void eBIAssignment(QString ue_context_id, OAIAssignEbiData oai_assign_ebi_data);
    void registrationStatusUpdate(QString ue_context_id, OAIUeRegStatusUpdateReqData oaiue_reg_status_update_req_data);
    void releaseUEContext(QString ue_context_id, OAIUEContextRelease oaiue_context_release);
    void relocateUEContext(QString ue_context_id, OAIUeContextRelocateData json_data, OAIHttpFileElement binary_data_gtpc_message, OAIHttpFileElement binary_data_n2_information, OAIHttpFileElement binary_data_n2_information_ext1, OAIHttpFileElement binary_data_n2_information_ext2, OAIHttpFileElement binary_data_n2_information_ext3, OAIHttpFileElement binary_data_n2_information_ext4, OAIHttpFileElement binary_data_n2_information_ext5, OAIHttpFileElement binary_data_n2_information_ext6, OAIHttpFileElement binary_data_n2_information_ext7, OAIHttpFileElement binary_data_n2_information_ext8, OAIHttpFileElement binary_data_n2_information_ext9, OAIHttpFileElement binary_data_n2_information_ext10, OAIHttpFileElement binary_data_n2_information_ext11, OAIHttpFileElement binary_data_n2_information_ext12, OAIHttpFileElement binary_data_n2_information_ext13, OAIHttpFileElement binary_data_n2_information_ext14, OAIHttpFileElement binary_data_n2_information_ext15, OAIHttpFileElement binary_data_n2_information_ext16);
    void uEContextTransfer(QString ue_context_id, OAIUeContextTransferReqData oaiue_context_transfer_req_data);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIIndividualUeContextDocumentApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIIndividualUeContextDocumentApiRequest_H
