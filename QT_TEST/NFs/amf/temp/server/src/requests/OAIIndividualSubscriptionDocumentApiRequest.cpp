/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIIndividualSubscriptionDocumentApiRequest.h"

namespace OpenAPI {

OAIIndividualSubscriptionDocumentApiRequest::OAIIndividualSubscriptionDocumentApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIIndividualSubscriptionDocumentApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIIndividualSubscriptionDocumentApiRequest::~OAIIndividualSubscriptionDocumentApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIIndividualSubscriptionDocumentApiRequest::~OAIIndividualSubscriptionDocumentApiRequest()";
}

QMap<QString, QString>
OAIIndividualSubscriptionDocumentApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIIndividualSubscriptionDocumentApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIIndividualSubscriptionDocumentApiRequest::getRawSocket(){
    return socket;
}


void OAIIndividualSubscriptionDocumentApiRequest::aMFStatusChangeSubscribeModfyRequest(const QString& subscription_idstr){
    qDebug() << "/namf-comm/v1/subscriptions/{subscriptionId}";
    connect(this, &OAIIndividualSubscriptionDocumentApiRequest::aMFStatusChangeSubscribeModfy, handler.data(), &OAIIndividualSubscriptionDocumentApiHandler::aMFStatusChangeSubscribeModfy);

    
    QString subscription_id;
    fromStringValue(subscription_idstr, subscription_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISubscriptionData oai_subscription_data;
    ::OpenAPI::fromJsonValue(oai_subscription_data, obj);
    

    emit aMFStatusChangeSubscribeModfy(subscription_id, oai_subscription_data);
}


void OAIIndividualSubscriptionDocumentApiRequest::aMFStatusChangeUnSubscribeRequest(const QString& subscription_idstr){
    qDebug() << "/namf-comm/v1/subscriptions/{subscriptionId}";
    connect(this, &OAIIndividualSubscriptionDocumentApiRequest::aMFStatusChangeUnSubscribe, handler.data(), &OAIIndividualSubscriptionDocumentApiHandler::aMFStatusChangeUnSubscribe);

    
    QString subscription_id;
    fromStringValue(subscription_idstr, subscription_id);
    

    emit aMFStatusChangeUnSubscribe(subscription_id);
}



void OAIIndividualSubscriptionDocumentApiRequest::aMFStatusChangeSubscribeModfyResponse(const OAISubscriptionData& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIndividualSubscriptionDocumentApiRequest::aMFStatusChangeUnSubscribeResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIIndividualSubscriptionDocumentApiRequest::aMFStatusChangeSubscribeModfyError(const OAISubscriptionData& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIndividualSubscriptionDocumentApiRequest::aMFStatusChangeUnSubscribeError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIIndividualSubscriptionDocumentApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIndividualSubscriptionDocumentApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
