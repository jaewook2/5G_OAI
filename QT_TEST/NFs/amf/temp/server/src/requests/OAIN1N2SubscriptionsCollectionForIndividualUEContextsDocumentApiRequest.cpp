/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest.h"

namespace OpenAPI {

OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest::OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest::~OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest::~OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest()";
}

QMap<QString, QString>
OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest::getRawSocket(){
    return socket;
}


void OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest::n1N2MessageSubscribeRequest(const QString& ue_context_idstr){
    qDebug() << "/namf-comm/v1/ue-contexts/{ueContextId}/n1-n2-messages/subscriptions";
    connect(this, &OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest::n1N2MessageSubscribe, handler.data(), &OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiHandler::n1N2MessageSubscribe);

    
    QString ue_context_id;
    fromStringValue(ue_context_idstr, ue_context_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUeN1N2InfoSubscriptionCreateData oaiue_n1_n2_info_subscription_create_data;
    ::OpenAPI::fromJsonValue(oaiue_n1_n2_info_subscription_create_data, obj);
    

    emit n1N2MessageSubscribe(ue_context_id, oaiue_n1_n2_info_subscription_create_data);
}



void OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest::n1N2MessageSubscribeResponse(const OAIUeN1N2InfoSubscriptionCreatedData& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest::n1N2MessageSubscribeError(const OAIUeN1N2InfoSubscriptionCreatedData& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
