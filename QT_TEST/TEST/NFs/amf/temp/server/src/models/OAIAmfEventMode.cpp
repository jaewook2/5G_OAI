/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmfEventMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmfEventMode::OAIAmfEventMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmfEventMode::OAIAmfEventMode() {
    this->initializeModel();
}

OAIAmfEventMode::~OAIAmfEventMode() {}

void OAIAmfEventMode::initializeModel() {

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_max_reports_isSet = false;
    m_max_reports_isValid = false;

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_rep_period_isSet = false;
    m_rep_period_isValid = false;

    m_samp_ratio_isSet = false;
    m_samp_ratio_isValid = false;
}

void OAIAmfEventMode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmfEventMode::fromJsonObject(QJsonObject json) {

    m_trigger_isValid = ::OpenAPI::fromJsonValue(trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_max_reports_isValid = ::OpenAPI::fromJsonValue(max_reports, json[QString("maxReports")]);
    m_max_reports_isSet = !json[QString("maxReports")].isNull() && m_max_reports_isValid;

    m_expiry_isValid = ::OpenAPI::fromJsonValue(expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_rep_period_isValid = ::OpenAPI::fromJsonValue(rep_period, json[QString("repPeriod")]);
    m_rep_period_isSet = !json[QString("repPeriod")].isNull() && m_rep_period_isValid;

    m_samp_ratio_isValid = ::OpenAPI::fromJsonValue(samp_ratio, json[QString("sampRatio")]);
    m_samp_ratio_isSet = !json[QString("sampRatio")].isNull() && m_samp_ratio_isValid;
}

QString OAIAmfEventMode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmfEventMode::asJsonObject() const {
    QJsonObject obj;
    if (trigger.isSet()) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(trigger));
    }
    if (m_max_reports_isSet) {
        obj.insert(QString("maxReports"), ::OpenAPI::toJsonValue(max_reports));
    }
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(expiry));
    }
    if (m_rep_period_isSet) {
        obj.insert(QString("repPeriod"), ::OpenAPI::toJsonValue(rep_period));
    }
    if (m_samp_ratio_isSet) {
        obj.insert(QString("sampRatio"), ::OpenAPI::toJsonValue(samp_ratio));
    }
    return obj;
}

OAIAmfEventTrigger OAIAmfEventMode::getTrigger() const {
    return trigger;
}
void OAIAmfEventMode::setTrigger(const OAIAmfEventTrigger &trigger) {
    this->trigger = trigger;
    this->m_trigger_isSet = true;
}

bool OAIAmfEventMode::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIAmfEventMode::is_trigger_Valid() const{
    return m_trigger_isValid;
}

qint32 OAIAmfEventMode::getMaxReports() const {
    return max_reports;
}
void OAIAmfEventMode::setMaxReports(const qint32 &max_reports) {
    this->max_reports = max_reports;
    this->m_max_reports_isSet = true;
}

bool OAIAmfEventMode::is_max_reports_Set() const{
    return m_max_reports_isSet;
}

bool OAIAmfEventMode::is_max_reports_Valid() const{
    return m_max_reports_isValid;
}

QDateTime OAIAmfEventMode::getExpiry() const {
    return expiry;
}
void OAIAmfEventMode::setExpiry(const QDateTime &expiry) {
    this->expiry = expiry;
    this->m_expiry_isSet = true;
}

bool OAIAmfEventMode::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIAmfEventMode::is_expiry_Valid() const{
    return m_expiry_isValid;
}

qint32 OAIAmfEventMode::getRepPeriod() const {
    return rep_period;
}
void OAIAmfEventMode::setRepPeriod(const qint32 &rep_period) {
    this->rep_period = rep_period;
    this->m_rep_period_isSet = true;
}

bool OAIAmfEventMode::is_rep_period_Set() const{
    return m_rep_period_isSet;
}

bool OAIAmfEventMode::is_rep_period_Valid() const{
    return m_rep_period_isValid;
}

qint32 OAIAmfEventMode::getSampRatio() const {
    return samp_ratio;
}
void OAIAmfEventMode::setSampRatio(const qint32 &samp_ratio) {
    this->samp_ratio = samp_ratio;
    this->m_samp_ratio_isSet = true;
}

bool OAIAmfEventMode::is_samp_ratio_Set() const{
    return m_samp_ratio_isSet;
}

bool OAIAmfEventMode::is_samp_ratio_Valid() const{
    return m_samp_ratio_isValid;
}

bool OAIAmfEventMode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_reports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rep_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_samp_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmfEventMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_trigger_isValid && true;
}

} // namespace OpenAPI
