/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGNbId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGNbId::OAIGNbId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGNbId::OAIGNbId() {
    this->initializeModel();
}

OAIGNbId::~OAIGNbId() {}

void OAIGNbId::initializeModel() {

    m_bit_length_isSet = false;
    m_bit_length_isValid = false;

    m_g_nb_value_isSet = false;
    m_g_nb_value_isValid = false;
}

void OAIGNbId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGNbId::fromJsonObject(QJsonObject json) {

    m_bit_length_isValid = ::OpenAPI::fromJsonValue(bit_length, json[QString("bitLength")]);
    m_bit_length_isSet = !json[QString("bitLength")].isNull() && m_bit_length_isValid;

    m_g_nb_value_isValid = ::OpenAPI::fromJsonValue(g_nb_value, json[QString("gNBValue")]);
    m_g_nb_value_isSet = !json[QString("gNBValue")].isNull() && m_g_nb_value_isValid;
}

QString OAIGNbId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGNbId::asJsonObject() const {
    QJsonObject obj;
    if (m_bit_length_isSet) {
        obj.insert(QString("bitLength"), ::OpenAPI::toJsonValue(bit_length));
    }
    if (m_g_nb_value_isSet) {
        obj.insert(QString("gNBValue"), ::OpenAPI::toJsonValue(g_nb_value));
    }
    return obj;
}

qint32 OAIGNbId::getBitLength() const {
    return bit_length;
}
void OAIGNbId::setBitLength(const qint32 &bit_length) {
    this->bit_length = bit_length;
    this->m_bit_length_isSet = true;
}

bool OAIGNbId::is_bit_length_Set() const{
    return m_bit_length_isSet;
}

bool OAIGNbId::is_bit_length_Valid() const{
    return m_bit_length_isValid;
}

QString OAIGNbId::getGNbValue() const {
    return g_nb_value;
}
void OAIGNbId::setGNbValue(const QString &g_nb_value) {
    this->g_nb_value = g_nb_value;
    this->m_g_nb_value_isSet = true;
}

bool OAIGNbId::is_g_nb_value_Set() const{
    return m_g_nb_value_isSet;
}

bool OAIGNbId::is_g_nb_value_Valid() const{
    return m_g_nb_value_isValid;
}

bool OAIGNbId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bit_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_g_nb_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGNbId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bit_length_isValid && m_g_nb_value_isValid && true;
}

} // namespace OpenAPI
