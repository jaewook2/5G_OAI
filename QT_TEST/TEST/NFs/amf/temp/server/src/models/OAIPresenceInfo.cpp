/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPresenceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPresenceInfo::OAIPresenceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPresenceInfo::OAIPresenceInfo() {
    this->initializeModel();
}

OAIPresenceInfo::~OAIPresenceInfo() {}

void OAIPresenceInfo::initializeModel() {

    m_pra_id_isSet = false;
    m_pra_id_isValid = false;

    m_additional_pra_id_isSet = false;
    m_additional_pra_id_isValid = false;

    m_presence_state_isSet = false;
    m_presence_state_isValid = false;

    m_tracking_area_list_isSet = false;
    m_tracking_area_list_isValid = false;

    m_ecgi_list_isSet = false;
    m_ecgi_list_isValid = false;

    m_ncgi_list_isSet = false;
    m_ncgi_list_isValid = false;

    m_global_ran_node_id_list_isSet = false;
    m_global_ran_node_id_list_isValid = false;

    m_globale_nb_id_list_isSet = false;
    m_globale_nb_id_list_isValid = false;
}

void OAIPresenceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPresenceInfo::fromJsonObject(QJsonObject json) {

    m_pra_id_isValid = ::OpenAPI::fromJsonValue(pra_id, json[QString("praId")]);
    m_pra_id_isSet = !json[QString("praId")].isNull() && m_pra_id_isValid;

    m_additional_pra_id_isValid = ::OpenAPI::fromJsonValue(additional_pra_id, json[QString("additionalPraId")]);
    m_additional_pra_id_isSet = !json[QString("additionalPraId")].isNull() && m_additional_pra_id_isValid;

    m_presence_state_isValid = ::OpenAPI::fromJsonValue(presence_state, json[QString("presenceState")]);
    m_presence_state_isSet = !json[QString("presenceState")].isNull() && m_presence_state_isValid;

    m_tracking_area_list_isValid = ::OpenAPI::fromJsonValue(tracking_area_list, json[QString("trackingAreaList")]);
    m_tracking_area_list_isSet = !json[QString("trackingAreaList")].isNull() && m_tracking_area_list_isValid;

    m_ecgi_list_isValid = ::OpenAPI::fromJsonValue(ecgi_list, json[QString("ecgiList")]);
    m_ecgi_list_isSet = !json[QString("ecgiList")].isNull() && m_ecgi_list_isValid;

    m_ncgi_list_isValid = ::OpenAPI::fromJsonValue(ncgi_list, json[QString("ncgiList")]);
    m_ncgi_list_isSet = !json[QString("ncgiList")].isNull() && m_ncgi_list_isValid;

    m_global_ran_node_id_list_isValid = ::OpenAPI::fromJsonValue(global_ran_node_id_list, json[QString("globalRanNodeIdList")]);
    m_global_ran_node_id_list_isSet = !json[QString("globalRanNodeIdList")].isNull() && m_global_ran_node_id_list_isValid;

    m_globale_nb_id_list_isValid = ::OpenAPI::fromJsonValue(globale_nb_id_list, json[QString("globaleNbIdList")]);
    m_globale_nb_id_list_isSet = !json[QString("globaleNbIdList")].isNull() && m_globale_nb_id_list_isValid;
}

QString OAIPresenceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPresenceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_pra_id_isSet) {
        obj.insert(QString("praId"), ::OpenAPI::toJsonValue(pra_id));
    }
    if (m_additional_pra_id_isSet) {
        obj.insert(QString("additionalPraId"), ::OpenAPI::toJsonValue(additional_pra_id));
    }
    if (presence_state.isSet()) {
        obj.insert(QString("presenceState"), ::OpenAPI::toJsonValue(presence_state));
    }
    if (tracking_area_list.size() > 0) {
        obj.insert(QString("trackingAreaList"), ::OpenAPI::toJsonValue(tracking_area_list));
    }
    if (ecgi_list.size() > 0) {
        obj.insert(QString("ecgiList"), ::OpenAPI::toJsonValue(ecgi_list));
    }
    if (ncgi_list.size() > 0) {
        obj.insert(QString("ncgiList"), ::OpenAPI::toJsonValue(ncgi_list));
    }
    if (global_ran_node_id_list.size() > 0) {
        obj.insert(QString("globalRanNodeIdList"), ::OpenAPI::toJsonValue(global_ran_node_id_list));
    }
    if (globale_nb_id_list.size() > 0) {
        obj.insert(QString("globaleNbIdList"), ::OpenAPI::toJsonValue(globale_nb_id_list));
    }
    return obj;
}

QString OAIPresenceInfo::getPraId() const {
    return pra_id;
}
void OAIPresenceInfo::setPraId(const QString &pra_id) {
    this->pra_id = pra_id;
    this->m_pra_id_isSet = true;
}

bool OAIPresenceInfo::is_pra_id_Set() const{
    return m_pra_id_isSet;
}

bool OAIPresenceInfo::is_pra_id_Valid() const{
    return m_pra_id_isValid;
}

QString OAIPresenceInfo::getAdditionalPraId() const {
    return additional_pra_id;
}
void OAIPresenceInfo::setAdditionalPraId(const QString &additional_pra_id) {
    this->additional_pra_id = additional_pra_id;
    this->m_additional_pra_id_isSet = true;
}

bool OAIPresenceInfo::is_additional_pra_id_Set() const{
    return m_additional_pra_id_isSet;
}

bool OAIPresenceInfo::is_additional_pra_id_Valid() const{
    return m_additional_pra_id_isValid;
}

OAIPresenceState OAIPresenceInfo::getPresenceState() const {
    return presence_state;
}
void OAIPresenceInfo::setPresenceState(const OAIPresenceState &presence_state) {
    this->presence_state = presence_state;
    this->m_presence_state_isSet = true;
}

bool OAIPresenceInfo::is_presence_state_Set() const{
    return m_presence_state_isSet;
}

bool OAIPresenceInfo::is_presence_state_Valid() const{
    return m_presence_state_isValid;
}

QList<OAITai> OAIPresenceInfo::getTrackingAreaList() const {
    return tracking_area_list;
}
void OAIPresenceInfo::setTrackingAreaList(const QList<OAITai> &tracking_area_list) {
    this->tracking_area_list = tracking_area_list;
    this->m_tracking_area_list_isSet = true;
}

bool OAIPresenceInfo::is_tracking_area_list_Set() const{
    return m_tracking_area_list_isSet;
}

bool OAIPresenceInfo::is_tracking_area_list_Valid() const{
    return m_tracking_area_list_isValid;
}

QList<OAIEcgi> OAIPresenceInfo::getEcgiList() const {
    return ecgi_list;
}
void OAIPresenceInfo::setEcgiList(const QList<OAIEcgi> &ecgi_list) {
    this->ecgi_list = ecgi_list;
    this->m_ecgi_list_isSet = true;
}

bool OAIPresenceInfo::is_ecgi_list_Set() const{
    return m_ecgi_list_isSet;
}

bool OAIPresenceInfo::is_ecgi_list_Valid() const{
    return m_ecgi_list_isValid;
}

QList<OAINcgi> OAIPresenceInfo::getNcgiList() const {
    return ncgi_list;
}
void OAIPresenceInfo::setNcgiList(const QList<OAINcgi> &ncgi_list) {
    this->ncgi_list = ncgi_list;
    this->m_ncgi_list_isSet = true;
}

bool OAIPresenceInfo::is_ncgi_list_Set() const{
    return m_ncgi_list_isSet;
}

bool OAIPresenceInfo::is_ncgi_list_Valid() const{
    return m_ncgi_list_isValid;
}

QList<OAIGlobalRanNodeId> OAIPresenceInfo::getGlobalRanNodeIdList() const {
    return global_ran_node_id_list;
}
void OAIPresenceInfo::setGlobalRanNodeIdList(const QList<OAIGlobalRanNodeId> &global_ran_node_id_list) {
    this->global_ran_node_id_list = global_ran_node_id_list;
    this->m_global_ran_node_id_list_isSet = true;
}

bool OAIPresenceInfo::is_global_ran_node_id_list_Set() const{
    return m_global_ran_node_id_list_isSet;
}

bool OAIPresenceInfo::is_global_ran_node_id_list_Valid() const{
    return m_global_ran_node_id_list_isValid;
}

QList<OAIGlobalRanNodeId> OAIPresenceInfo::getGlobaleNbIdList() const {
    return globale_nb_id_list;
}
void OAIPresenceInfo::setGlobaleNbIdList(const QList<OAIGlobalRanNodeId> &globale_nb_id_list) {
    this->globale_nb_id_list = globale_nb_id_list;
    this->m_globale_nb_id_list_isSet = true;
}

bool OAIPresenceInfo::is_globale_nb_id_list_Set() const{
    return m_globale_nb_id_list_isSet;
}

bool OAIPresenceInfo::is_globale_nb_id_list_Valid() const{
    return m_globale_nb_id_list_isValid;
}

bool OAIPresenceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pra_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_pra_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (presence_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (tracking_area_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (ecgi_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (ncgi_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (global_ran_node_id_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (globale_nb_id_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPresenceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
