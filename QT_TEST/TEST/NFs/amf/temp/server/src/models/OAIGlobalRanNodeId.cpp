/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalRanNodeId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalRanNodeId::OAIGlobalRanNodeId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalRanNodeId::OAIGlobalRanNodeId() {
    this->initializeModel();
}

OAIGlobalRanNodeId::~OAIGlobalRanNodeId() {}

void OAIGlobalRanNodeId::initializeModel() {

    m_plmn_id_isSet = false;
    m_plmn_id_isValid = false;

    m_n3_iwf_id_isSet = false;
    m_n3_iwf_id_isValid = false;

    m_g_nb_id_isSet = false;
    m_g_nb_id_isValid = false;

    m_nge_nb_id_isSet = false;
    m_nge_nb_id_isValid = false;

    m_wagf_id_isSet = false;
    m_wagf_id_isValid = false;

    m_tngf_id_isSet = false;
    m_tngf_id_isValid = false;

    m_nid_isSet = false;
    m_nid_isValid = false;

    m_e_nb_id_isSet = false;
    m_e_nb_id_isValid = false;
}

void OAIGlobalRanNodeId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalRanNodeId::fromJsonObject(QJsonObject json) {

    m_plmn_id_isValid = ::OpenAPI::fromJsonValue(plmn_id, json[QString("plmnId")]);
    m_plmn_id_isSet = !json[QString("plmnId")].isNull() && m_plmn_id_isValid;

    m_n3_iwf_id_isValid = ::OpenAPI::fromJsonValue(n3_iwf_id, json[QString("n3IwfId")]);
    m_n3_iwf_id_isSet = !json[QString("n3IwfId")].isNull() && m_n3_iwf_id_isValid;

    m_g_nb_id_isValid = ::OpenAPI::fromJsonValue(g_nb_id, json[QString("gNbId")]);
    m_g_nb_id_isSet = !json[QString("gNbId")].isNull() && m_g_nb_id_isValid;

    m_nge_nb_id_isValid = ::OpenAPI::fromJsonValue(nge_nb_id, json[QString("ngeNbId")]);
    m_nge_nb_id_isSet = !json[QString("ngeNbId")].isNull() && m_nge_nb_id_isValid;

    m_wagf_id_isValid = ::OpenAPI::fromJsonValue(wagf_id, json[QString("wagfId")]);
    m_wagf_id_isSet = !json[QString("wagfId")].isNull() && m_wagf_id_isValid;

    m_tngf_id_isValid = ::OpenAPI::fromJsonValue(tngf_id, json[QString("tngfId")]);
    m_tngf_id_isSet = !json[QString("tngfId")].isNull() && m_tngf_id_isValid;

    m_nid_isValid = ::OpenAPI::fromJsonValue(nid, json[QString("nid")]);
    m_nid_isSet = !json[QString("nid")].isNull() && m_nid_isValid;

    m_e_nb_id_isValid = ::OpenAPI::fromJsonValue(e_nb_id, json[QString("eNbId")]);
    m_e_nb_id_isSet = !json[QString("eNbId")].isNull() && m_e_nb_id_isValid;
}

QString OAIGlobalRanNodeId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalRanNodeId::asJsonObject() const {
    QJsonObject obj;
    if (plmn_id.isSet()) {
        obj.insert(QString("plmnId"), ::OpenAPI::toJsonValue(plmn_id));
    }
    if (m_n3_iwf_id_isSet) {
        obj.insert(QString("n3IwfId"), ::OpenAPI::toJsonValue(n3_iwf_id));
    }
    if (g_nb_id.isSet()) {
        obj.insert(QString("gNbId"), ::OpenAPI::toJsonValue(g_nb_id));
    }
    if (m_nge_nb_id_isSet) {
        obj.insert(QString("ngeNbId"), ::OpenAPI::toJsonValue(nge_nb_id));
    }
    if (m_wagf_id_isSet) {
        obj.insert(QString("wagfId"), ::OpenAPI::toJsonValue(wagf_id));
    }
    if (m_tngf_id_isSet) {
        obj.insert(QString("tngfId"), ::OpenAPI::toJsonValue(tngf_id));
    }
    if (m_nid_isSet) {
        obj.insert(QString("nid"), ::OpenAPI::toJsonValue(nid));
    }
    if (m_e_nb_id_isSet) {
        obj.insert(QString("eNbId"), ::OpenAPI::toJsonValue(e_nb_id));
    }
    return obj;
}

OAIPlmnId OAIGlobalRanNodeId::getPlmnId() const {
    return plmn_id;
}
void OAIGlobalRanNodeId::setPlmnId(const OAIPlmnId &plmn_id) {
    this->plmn_id = plmn_id;
    this->m_plmn_id_isSet = true;
}

bool OAIGlobalRanNodeId::is_plmn_id_Set() const{
    return m_plmn_id_isSet;
}

bool OAIGlobalRanNodeId::is_plmn_id_Valid() const{
    return m_plmn_id_isValid;
}

QString OAIGlobalRanNodeId::getN3IwfId() const {
    return n3_iwf_id;
}
void OAIGlobalRanNodeId::setN3IwfId(const QString &n3_iwf_id) {
    this->n3_iwf_id = n3_iwf_id;
    this->m_n3_iwf_id_isSet = true;
}

bool OAIGlobalRanNodeId::is_n3_iwf_id_Set() const{
    return m_n3_iwf_id_isSet;
}

bool OAIGlobalRanNodeId::is_n3_iwf_id_Valid() const{
    return m_n3_iwf_id_isValid;
}

OAIGNbId OAIGlobalRanNodeId::getGNbId() const {
    return g_nb_id;
}
void OAIGlobalRanNodeId::setGNbId(const OAIGNbId &g_nb_id) {
    this->g_nb_id = g_nb_id;
    this->m_g_nb_id_isSet = true;
}

bool OAIGlobalRanNodeId::is_g_nb_id_Set() const{
    return m_g_nb_id_isSet;
}

bool OAIGlobalRanNodeId::is_g_nb_id_Valid() const{
    return m_g_nb_id_isValid;
}

QString OAIGlobalRanNodeId::getNgeNbId() const {
    return nge_nb_id;
}
void OAIGlobalRanNodeId::setNgeNbId(const QString &nge_nb_id) {
    this->nge_nb_id = nge_nb_id;
    this->m_nge_nb_id_isSet = true;
}

bool OAIGlobalRanNodeId::is_nge_nb_id_Set() const{
    return m_nge_nb_id_isSet;
}

bool OAIGlobalRanNodeId::is_nge_nb_id_Valid() const{
    return m_nge_nb_id_isValid;
}

QString OAIGlobalRanNodeId::getWagfId() const {
    return wagf_id;
}
void OAIGlobalRanNodeId::setWagfId(const QString &wagf_id) {
    this->wagf_id = wagf_id;
    this->m_wagf_id_isSet = true;
}

bool OAIGlobalRanNodeId::is_wagf_id_Set() const{
    return m_wagf_id_isSet;
}

bool OAIGlobalRanNodeId::is_wagf_id_Valid() const{
    return m_wagf_id_isValid;
}

QString OAIGlobalRanNodeId::getTngfId() const {
    return tngf_id;
}
void OAIGlobalRanNodeId::setTngfId(const QString &tngf_id) {
    this->tngf_id = tngf_id;
    this->m_tngf_id_isSet = true;
}

bool OAIGlobalRanNodeId::is_tngf_id_Set() const{
    return m_tngf_id_isSet;
}

bool OAIGlobalRanNodeId::is_tngf_id_Valid() const{
    return m_tngf_id_isValid;
}

QString OAIGlobalRanNodeId::getNid() const {
    return nid;
}
void OAIGlobalRanNodeId::setNid(const QString &nid) {
    this->nid = nid;
    this->m_nid_isSet = true;
}

bool OAIGlobalRanNodeId::is_nid_Set() const{
    return m_nid_isSet;
}

bool OAIGlobalRanNodeId::is_nid_Valid() const{
    return m_nid_isValid;
}

QString OAIGlobalRanNodeId::getENbId() const {
    return e_nb_id;
}
void OAIGlobalRanNodeId::setENbId(const QString &e_nb_id) {
    this->e_nb_id = e_nb_id;
    this->m_e_nb_id_isSet = true;
}

bool OAIGlobalRanNodeId::is_e_nb_id_Set() const{
    return m_e_nb_id_isSet;
}

bool OAIGlobalRanNodeId::is_e_nb_id_Valid() const{
    return m_e_nb_id_isValid;
}

bool OAIGlobalRanNodeId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (plmn_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_n3_iwf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (g_nb_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nge_nb_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wagf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tngf_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_nb_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalRanNodeId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_plmn_id_isValid && true;
}

} // namespace OpenAPI
