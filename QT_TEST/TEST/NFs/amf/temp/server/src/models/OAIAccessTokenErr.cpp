/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessTokenErr.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessTokenErr::OAIAccessTokenErr(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessTokenErr::OAIAccessTokenErr() {
    this->initializeModel();
}

OAIAccessTokenErr::~OAIAccessTokenErr() {}

void OAIAccessTokenErr::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_error_description_isSet = false;
    m_error_description_isValid = false;

    m_error_uri_isSet = false;
    m_error_uri_isValid = false;
}

void OAIAccessTokenErr::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessTokenErr::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_error_description_isValid = ::OpenAPI::fromJsonValue(error_description, json[QString("error_description")]);
    m_error_description_isSet = !json[QString("error_description")].isNull() && m_error_description_isValid;

    m_error_uri_isValid = ::OpenAPI::fromJsonValue(error_uri, json[QString("error_uri")]);
    m_error_uri_isSet = !json[QString("error_uri")].isNull() && m_error_uri_isValid;
}

QString OAIAccessTokenErr::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessTokenErr::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(error));
    }
    if (m_error_description_isSet) {
        obj.insert(QString("error_description"), ::OpenAPI::toJsonValue(error_description));
    }
    if (m_error_uri_isSet) {
        obj.insert(QString("error_uri"), ::OpenAPI::toJsonValue(error_uri));
    }
    return obj;
}

QString OAIAccessTokenErr::getError() const {
    return error;
}
void OAIAccessTokenErr::setError(const QString &error) {
    this->error = error;
    this->m_error_isSet = true;
}

bool OAIAccessTokenErr::is_error_Set() const{
    return m_error_isSet;
}

bool OAIAccessTokenErr::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIAccessTokenErr::getErrorDescription() const {
    return error_description;
}
void OAIAccessTokenErr::setErrorDescription(const QString &error_description) {
    this->error_description = error_description;
    this->m_error_description_isSet = true;
}

bool OAIAccessTokenErr::is_error_description_Set() const{
    return m_error_description_isSet;
}

bool OAIAccessTokenErr::is_error_description_Valid() const{
    return m_error_description_isValid;
}

QString OAIAccessTokenErr::getErrorUri() const {
    return error_uri;
}
void OAIAccessTokenErr::setErrorUri(const QString &error_uri) {
    this->error_uri = error_uri;
    this->m_error_uri_isSet = true;
}

bool OAIAccessTokenErr::is_error_uri_Set() const{
    return m_error_uri_isSet;
}

bool OAIAccessTokenErr::is_error_uri_Valid() const{
    return m_error_uri_isValid;
}

bool OAIAccessTokenErr::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessTokenErr::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_isValid && true;
}

} // namespace OpenAPI
