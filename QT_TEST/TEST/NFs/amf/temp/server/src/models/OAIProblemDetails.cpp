/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProblemDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProblemDetails::OAIProblemDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProblemDetails::OAIProblemDetails() {
    this->initializeModel();
}

OAIProblemDetails::~OAIProblemDetails() {}

void OAIProblemDetails::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_invalid_params_isSet = false;
    m_invalid_params_isValid = false;

    m_supported_features_isSet = false;
    m_supported_features_isValid = false;

    m_access_token_error_isSet = false;
    m_access_token_error_isValid = false;

    m_access_token_request_isSet = false;
    m_access_token_request_isValid = false;

    m_nrf_id_isSet = false;
    m_nrf_id_isValid = false;
}

void OAIProblemDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProblemDetails::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_cause_isValid = ::OpenAPI::fromJsonValue(cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_invalid_params_isValid = ::OpenAPI::fromJsonValue(invalid_params, json[QString("invalidParams")]);
    m_invalid_params_isSet = !json[QString("invalidParams")].isNull() && m_invalid_params_isValid;

    m_supported_features_isValid = ::OpenAPI::fromJsonValue(supported_features, json[QString("supportedFeatures")]);
    m_supported_features_isSet = !json[QString("supportedFeatures")].isNull() && m_supported_features_isValid;

    m_access_token_error_isValid = ::OpenAPI::fromJsonValue(access_token_error, json[QString("accessTokenError")]);
    m_access_token_error_isSet = !json[QString("accessTokenError")].isNull() && m_access_token_error_isValid;

    m_access_token_request_isValid = ::OpenAPI::fromJsonValue(access_token_request, json[QString("accessTokenRequest")]);
    m_access_token_request_isSet = !json[QString("accessTokenRequest")].isNull() && m_access_token_request_isValid;

    m_nrf_id_isValid = ::OpenAPI::fromJsonValue(nrf_id, json[QString("nrfId")]);
    m_nrf_id_isSet = !json[QString("nrfId")].isNull() && m_nrf_id_isValid;
}

QString OAIProblemDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProblemDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(detail));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(instance));
    }
    if (m_cause_isSet) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(cause));
    }
    if (invalid_params.size() > 0) {
        obj.insert(QString("invalidParams"), ::OpenAPI::toJsonValue(invalid_params));
    }
    if (m_supported_features_isSet) {
        obj.insert(QString("supportedFeatures"), ::OpenAPI::toJsonValue(supported_features));
    }
    if (access_token_error.isSet()) {
        obj.insert(QString("accessTokenError"), ::OpenAPI::toJsonValue(access_token_error));
    }
    if (access_token_request.isSet()) {
        obj.insert(QString("accessTokenRequest"), ::OpenAPI::toJsonValue(access_token_request));
    }
    if (m_nrf_id_isSet) {
        obj.insert(QString("nrfId"), ::OpenAPI::toJsonValue(nrf_id));
    }
    return obj;
}

QString OAIProblemDetails::getType() const {
    return type;
}
void OAIProblemDetails::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIProblemDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProblemDetails::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIProblemDetails::getTitle() const {
    return title;
}
void OAIProblemDetails::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

bool OAIProblemDetails::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProblemDetails::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIProblemDetails::getStatus() const {
    return status;
}
void OAIProblemDetails::setStatus(const qint32 &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAIProblemDetails::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProblemDetails::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIProblemDetails::getDetail() const {
    return detail;
}
void OAIProblemDetails::setDetail(const QString &detail) {
    this->detail = detail;
    this->m_detail_isSet = true;
}

bool OAIProblemDetails::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIProblemDetails::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIProblemDetails::getInstance() const {
    return instance;
}
void OAIProblemDetails::setInstance(const QString &instance) {
    this->instance = instance;
    this->m_instance_isSet = true;
}

bool OAIProblemDetails::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIProblemDetails::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIProblemDetails::getCause() const {
    return cause;
}
void OAIProblemDetails::setCause(const QString &cause) {
    this->cause = cause;
    this->m_cause_isSet = true;
}

bool OAIProblemDetails::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIProblemDetails::is_cause_Valid() const{
    return m_cause_isValid;
}

QList<OAIInvalidParam> OAIProblemDetails::getInvalidParams() const {
    return invalid_params;
}
void OAIProblemDetails::setInvalidParams(const QList<OAIInvalidParam> &invalid_params) {
    this->invalid_params = invalid_params;
    this->m_invalid_params_isSet = true;
}

bool OAIProblemDetails::is_invalid_params_Set() const{
    return m_invalid_params_isSet;
}

bool OAIProblemDetails::is_invalid_params_Valid() const{
    return m_invalid_params_isValid;
}

QString OAIProblemDetails::getSupportedFeatures() const {
    return supported_features;
}
void OAIProblemDetails::setSupportedFeatures(const QString &supported_features) {
    this->supported_features = supported_features;
    this->m_supported_features_isSet = true;
}

bool OAIProblemDetails::is_supported_features_Set() const{
    return m_supported_features_isSet;
}

bool OAIProblemDetails::is_supported_features_Valid() const{
    return m_supported_features_isValid;
}

OAIAccessTokenErr OAIProblemDetails::getAccessTokenError() const {
    return access_token_error;
}
void OAIProblemDetails::setAccessTokenError(const OAIAccessTokenErr &access_token_error) {
    this->access_token_error = access_token_error;
    this->m_access_token_error_isSet = true;
}

bool OAIProblemDetails::is_access_token_error_Set() const{
    return m_access_token_error_isSet;
}

bool OAIProblemDetails::is_access_token_error_Valid() const{
    return m_access_token_error_isValid;
}

OAIAccessTokenReq OAIProblemDetails::getAccessTokenRequest() const {
    return access_token_request;
}
void OAIProblemDetails::setAccessTokenRequest(const OAIAccessTokenReq &access_token_request) {
    this->access_token_request = access_token_request;
    this->m_access_token_request_isSet = true;
}

bool OAIProblemDetails::is_access_token_request_Set() const{
    return m_access_token_request_isSet;
}

bool OAIProblemDetails::is_access_token_request_Valid() const{
    return m_access_token_request_isValid;
}

QString OAIProblemDetails::getNrfId() const {
    return nrf_id;
}
void OAIProblemDetails::setNrfId(const QString &nrf_id) {
    this->nrf_id = nrf_id;
    this->m_nrf_id_isSet = true;
}

bool OAIProblemDetails::is_nrf_id_Set() const{
    return m_nrf_id_isSet;
}

bool OAIProblemDetails::is_nrf_id_Valid() const{
    return m_nrf_id_isValid;
}

bool OAIProblemDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (invalid_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (access_token_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (access_token_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nrf_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProblemDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
