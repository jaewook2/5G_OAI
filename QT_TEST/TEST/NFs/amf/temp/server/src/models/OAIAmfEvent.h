/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAmfEvent.h
 *
 * 
 */

#ifndef OAIAmfEvent_H
#define OAIAmfEvent_H

#include <QJsonObject>

#include "OAIAmfEventArea.h"
#include "OAIAmfEventType.h"
#include "OAILocationFilter.h"
#include "OAIReachabilityFilter.h"
#include "OAITrafficDescriptor.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAmfEvent : public OAIObject {
public:
    OAIAmfEvent();
    OAIAmfEvent(QString json);
    ~OAIAmfEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAmfEventType getType() const;
    void setType(const OAIAmfEventType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    bool isImmediateFlag() const;
    void setImmediateFlag(const bool &immediate_flag);
    bool is_immediate_flag_Set() const;
    bool is_immediate_flag_Valid() const;

    QList<OAIAmfEventArea> getAreaList() const;
    void setAreaList(const QList<OAIAmfEventArea> &area_list);
    bool is_area_list_Set() const;
    bool is_area_list_Valid() const;

    QList<OAILocationFilter> getLocationFilterList() const;
    void setLocationFilterList(const QList<OAILocationFilter> &location_filter_list);
    bool is_location_filter_list_Set() const;
    bool is_location_filter_list_Valid() const;

    qint32 getRefId() const;
    void setRefId(const qint32 &ref_id);
    bool is_ref_id_Set() const;
    bool is_ref_id_Valid() const;

    QList<OAITrafficDescriptor> getTrafficDescriptorList() const;
    void setTrafficDescriptorList(const QList<OAITrafficDescriptor> &traffic_descriptor_list);
    bool is_traffic_descriptor_list_Set() const;
    bool is_traffic_descriptor_list_Valid() const;

    bool isReportUeReachable() const;
    void setReportUeReachable(const bool &report_ue_reachable);
    bool is_report_ue_reachable_Set() const;
    bool is_report_ue_reachable_Valid() const;

    OAIReachabilityFilter getReachabilityFilter() const;
    void setReachabilityFilter(const OAIReachabilityFilter &reachability_filter);
    bool is_reachability_filter_Set() const;
    bool is_reachability_filter_Valid() const;

    qint32 getMaxReports() const;
    void setMaxReports(const qint32 &max_reports);
    bool is_max_reports_Set() const;
    bool is_max_reports_Valid() const;

    qint32 getMaxResponseTime() const;
    void setMaxResponseTime(const qint32 &max_response_time);
    bool is_max_response_time_Set() const;
    bool is_max_response_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAmfEventType type;
    bool m_type_isSet;
    bool m_type_isValid;

    bool immediate_flag;
    bool m_immediate_flag_isSet;
    bool m_immediate_flag_isValid;

    QList<OAIAmfEventArea> area_list;
    bool m_area_list_isSet;
    bool m_area_list_isValid;

    QList<OAILocationFilter> location_filter_list;
    bool m_location_filter_list_isSet;
    bool m_location_filter_list_isValid;

    qint32 ref_id;
    bool m_ref_id_isSet;
    bool m_ref_id_isValid;

    QList<OAITrafficDescriptor> traffic_descriptor_list;
    bool m_traffic_descriptor_list_isSet;
    bool m_traffic_descriptor_list_isValid;

    bool report_ue_reachable;
    bool m_report_ue_reachable_isSet;
    bool m_report_ue_reachable_isValid;

    OAIReachabilityFilter reachability_filter;
    bool m_reachability_filter_isSet;
    bool m_reachability_filter_isValid;

    qint32 max_reports;
    bool m_max_reports_isSet;
    bool m_max_reports_isValid;

    qint32 max_response_time;
    bool m_max_response_time_isSet;
    bool m_max_response_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAmfEvent)

#endif // OAIAmfEvent_H
