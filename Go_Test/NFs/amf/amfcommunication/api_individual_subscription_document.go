/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfcommunication

import (
"amf.com/amfcommon"
"amf.com/amfmodel"
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IndividualSubscriptionDocumentApiController binds http requests to an api service and writes the service results to the http response
type IndividualSubscriptionDocumentApiController struct {
	service IndividualSubscriptionDocumentApiServicer
	errorHandler amfcommon.ErrorHandler
}

// IndividualSubscriptionDocumentApiOption for how the controller is set up.
type IndividualSubscriptionDocumentApiOption func(*IndividualSubscriptionDocumentApiController)

// WithIndividualSubscriptionDocumentApiErrorHandler inject amfcommon.ErrorHandler into controller
func WithIndividualSubscriptionDocumentApiErrorHandler(h amfcommon.ErrorHandler) IndividualSubscriptionDocumentApiOption {
	return func(c *IndividualSubscriptionDocumentApiController) {
		c.errorHandler = h
	}
}

// NewIndividualSubscriptionDocumentApiController creates a default api controller
func NewIndividualSubscriptionDocumentApiController(s IndividualSubscriptionDocumentApiServicer, opts ...IndividualSubscriptionDocumentApiOption) amfcommon.Router {
	controller := &IndividualSubscriptionDocumentApiController{
		service:      s,
		errorHandler: amfcommon.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the IndividualSubscriptionDocumentApiController
func (c *IndividualSubscriptionDocumentApiController) Routes() amfcommon.Routes {
	return amfcommon.Routes { 
		{
			"AMFStatusChangeSubscribeModfy",
			strings.ToUpper("Put"),
			"/namf-comm/v1/subscriptions/{subscriptionId}",
			c.AMFStatusChangeSubscribeModfy,
		},
		{
			"AMFStatusChangeUnSubscribe",
			strings.ToUpper("Delete"),
			"/namf-comm/v1/subscriptions/{subscriptionId}",
			c.AMFStatusChangeUnSubscribe,
		},
	}
}

// AMFStatusChangeSubscribeModfy - Namf_Communication AMF Status Change Subscribe Modify service Operation
func (c *IndividualSubscriptionDocumentApiController) AMFStatusChangeSubscribeModfy(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subscriptionIdParam := params["subscriptionId"]
	
	subscriptionDataParam := amfmodel.SubscriptionData{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&subscriptionDataParam); err != nil {
		c.errorHandler(w, r, & amfcommon.ParsingError{Err: err}, nil)
		return
	}
	if err :=  amfmodel.AssertSubscriptionDataRequired(subscriptionDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AMFStatusChangeSubscribeModfy(r.Context(), subscriptionIdParam, subscriptionDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	amfcommon.EncodeJSONResponse(result.Body, &result.Code, w)

}

// AMFStatusChangeUnSubscribe - Namf_Communication AMF Status Change UnSubscribe service Operation
func (c *IndividualSubscriptionDocumentApiController) AMFStatusChangeUnSubscribe(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subscriptionIdParam := params["subscriptionId"]
	
	result, err := c.service.AMFStatusChangeUnSubscribe(r.Context(), subscriptionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	amfcommon.EncodeJSONResponse(result.Body, &result.Code, w)

}
