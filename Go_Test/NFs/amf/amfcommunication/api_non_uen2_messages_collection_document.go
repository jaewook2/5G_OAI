/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfcommunication

import (
	"encoding/json"
	"net/http"
	"strings"

	"amf.com/amfcommon"
	"amf.com/amfmodel"
)

// NonUEN2MessagesCollectionDocumentApiController binds http requests to an api service and writes the service results to the http response
type NonUEN2MessagesCollectionDocumentApiController struct {
	service      NonUEN2MessagesCollectionDocumentApiServicer
	errorHandler amfcommon.ErrorHandler
}

// NonUEN2MessagesCollectionDocumentApiOption for how the controller is set up.
type NonUEN2MessagesCollectionDocumentApiOption func(*NonUEN2MessagesCollectionDocumentApiController)

// WithNonUEN2MessagesCollectionDocumentApiErrorHandler inject amfcommon.ErrorHandler into controller
func WithNonUEN2MessagesCollectionDocumentApiErrorHandler(h amfcommon.ErrorHandler) NonUEN2MessagesCollectionDocumentApiOption {
	return func(c *NonUEN2MessagesCollectionDocumentApiController) {
		c.errorHandler = h
	}
}

// NewNonUEN2MessagesCollectionDocumentApiController creates a default api controller
func NewNonUEN2MessagesCollectionDocumentApiController(s NonUEN2MessagesCollectionDocumentApiServicer, opts ...NonUEN2MessagesCollectionDocumentApiOption) amfcommon.Router {
	controller := &NonUEN2MessagesCollectionDocumentApiController{
		service:      s,
		errorHandler: amfcommon.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the NonUEN2MessagesCollectionDocumentApiController
func (c *NonUEN2MessagesCollectionDocumentApiController) Routes() amfcommon.Routes {
	return amfcommon.Routes{
		{
			"NonUeN2MessageTransfer",
			strings.ToUpper("Post"),
			"/namf-comm/v1/non-ue-n2-messages/transfer",
			c.NonUeN2MessageTransfer,
		},
	}
}

// NonUeN2MessageTransfer - Namf_Communication Non UE N2 Message Transfer service Operation
func (c *NonUEN2MessagesCollectionDocumentApiController) NonUeN2MessageTransfer(w http.ResponseWriter, r *http.Request) {
	n2InformationTransferReqDataParam := amfmodel.N2InformationTransferReqData{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&n2InformationTransferReqDataParam); err != nil {
		c.errorHandler(w, r, &amfcommon.ParsingError{Err: err}, nil)
		return
	}
	if err := amfmodel.AssertN2InformationTransferReqDataRequired(n2InformationTransferReqDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.NonUeN2MessageTransfer(r.Context(), n2InformationTransferReqDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	amfcommon.EncodeJSONResponse(result.Body, &result.Code, w)

}
