/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfcommunication

import (
"amf.com/amfcommon"
"amf.com/amfmodel"
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// N1N2MessageCollectionDocumentApiController binds http requests to an api service and writes the service results to the http response
type N1N2MessageCollectionDocumentApiController struct {
	service N1N2MessageCollectionDocumentApiServicer
	errorHandler amfcommon.ErrorHandler
}

// N1N2MessageCollectionDocumentApiOption for how the controller is set up.
type N1N2MessageCollectionDocumentApiOption func(*N1N2MessageCollectionDocumentApiController)

// WithN1N2MessageCollectionDocumentApiErrorHandler inject amfcommon.ErrorHandler into controller
func WithN1N2MessageCollectionDocumentApiErrorHandler(h amfcommon.ErrorHandler) N1N2MessageCollectionDocumentApiOption {
	return func(c *N1N2MessageCollectionDocumentApiController) {
		c.errorHandler = h
	}
}

// NewN1N2MessageCollectionDocumentApiController creates a default api controller
func NewN1N2MessageCollectionDocumentApiController(s N1N2MessageCollectionDocumentApiServicer, opts ...N1N2MessageCollectionDocumentApiOption) amfcommon.Router {
	controller := &N1N2MessageCollectionDocumentApiController{
		service:      s,
		errorHandler: amfcommon.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the N1N2MessageCollectionDocumentApiController
func (c *N1N2MessageCollectionDocumentApiController) Routes() amfcommon.Routes {
	return amfcommon.Routes { 
		{
			"N1N2MessageTransfer",
			strings.ToUpper("Post"),
			"/namf-comm/v1/ue-contexts/{ueContextId}/n1-n2-messages",
			c.N1N2MessageTransfer,
		},
	}
}

// N1N2MessageTransfer - Namf_Communication N1N2 Message Transfer (UE Specific) service Operation
func (c *N1N2MessageCollectionDocumentApiController) N1N2MessageTransfer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	ueContextIdParam := params["ueContextId"]
	
	n1N2MessageTransferReqDataParam := amfmodel.N1N2MessageTransferReqData{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&n1N2MessageTransferReqDataParam); err != nil {
		c.errorHandler(w, r, & amfcommon.ParsingError{Err: err}, nil)
		return
	}
	if err :=  amfmodel.AssertN1N2MessageTransferReqDataRequired(n1N2MessageTransferReqDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.N1N2MessageTransfer(r.Context(), ueContextIdParam, n1N2MessageTransferReqDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	amfcommon.EncodeJSONResponse(result.Body, &result.Code, w)

}
