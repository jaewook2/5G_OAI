/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfcommunication

import (
"amf.com/amfcommon"
"amf.com/amfmodel"
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiController binds http requests to an api service and writes the service results to the http response
type N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiController struct {
	service N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiServicer
	errorHandler amfcommon.ErrorHandler
}

// N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiOption for how the controller is set up.
type N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiOption func(*N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiController)

// WithN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiErrorHandler inject amfcommon.ErrorHandler into controller
func WithN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiErrorHandler(h amfcommon.ErrorHandler) N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiOption {
	return func(c *N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiController) {
		c.errorHandler = h
	}
}

// NewN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiController creates a default api controller
func NewN1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiController(s N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiServicer, opts ...N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiOption) amfcommon.Router {
	controller := &N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiController{
		service:      s,
		errorHandler: amfcommon.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiController
func (c *N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiController) Routes() amfcommon.Routes {
	return amfcommon.Routes { 
		{
			"N1N2MessageSubscribe",
			strings.ToUpper("Post"),
			"/namf-comm/v1/ue-contexts/{ueContextId}/n1-n2-messages/subscriptions",
			c.N1N2MessageSubscribe,
		},
	}
}

// N1N2MessageSubscribe - Namf_Communication N1N2 Message Subscribe (UE Specific) service Operation
func (c *N1N2SubscriptionsCollectionForIndividualUEContextsDocumentApiController) N1N2MessageSubscribe(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	ueContextIdParam := params["ueContextId"]
	
	ueN1N2InfoSubscriptionCreateDataParam := amfmodel.UeN1N2InfoSubscriptionCreateData{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&ueN1N2InfoSubscriptionCreateDataParam); err != nil {
		c.errorHandler(w, r, & amfcommon.ParsingError{Err: err}, nil)
		return
	}
	if err :=  amfmodel.AssertUeN1N2InfoSubscriptionCreateDataRequired(ueN1N2InfoSubscriptionCreateDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.N1N2MessageSubscribe(r.Context(), ueContextIdParam, ueN1N2InfoSubscriptionCreateDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	amfcommon.EncodeJSONResponse(result.Body, &result.Code, w)

}
