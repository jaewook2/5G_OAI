/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfcommunication

import (
"amf.com/amfcommon"
"amf.com/amfmodel"
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// N1N2IndividualSubscriptionDocumentApiController binds http requests to an api service and writes the service results to the http response
type N1N2IndividualSubscriptionDocumentApiController struct {
	service N1N2IndividualSubscriptionDocumentApiServicer
	errorHandler amfcommon.ErrorHandler
}

// N1N2IndividualSubscriptionDocumentApiOption for how the controller is set up.
type N1N2IndividualSubscriptionDocumentApiOption func(*N1N2IndividualSubscriptionDocumentApiController)

// WithN1N2IndividualSubscriptionDocumentApiErrorHandler inject amfcommon.ErrorHandler into controller
func WithN1N2IndividualSubscriptionDocumentApiErrorHandler(h amfcommon.ErrorHandler) N1N2IndividualSubscriptionDocumentApiOption {
	return func(c *N1N2IndividualSubscriptionDocumentApiController) {
		c.errorHandler = h
	}
}

// NewN1N2IndividualSubscriptionDocumentApiController creates a default api controller
func NewN1N2IndividualSubscriptionDocumentApiController(s N1N2IndividualSubscriptionDocumentApiServicer, opts ...N1N2IndividualSubscriptionDocumentApiOption) amfcommon.Router {
	controller := &N1N2IndividualSubscriptionDocumentApiController{
		service:      s,
		errorHandler: amfcommon.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the N1N2IndividualSubscriptionDocumentApiController
func (c *N1N2IndividualSubscriptionDocumentApiController) Routes() amfcommon.Routes {
	return amfcommon.Routes { 
		{
			"N1N2MessageUnSubscribe",
			strings.ToUpper("Delete"),
			"/namf-comm/v1/ue-contexts/{ueContextId}/n1-n2-messages/subscriptions/{subscriptionId}",
			c.N1N2MessageUnSubscribe,
		},
	}
}

// N1N2MessageUnSubscribe - Namf_Communication N1N2 Message UnSubscribe (UE Specific) service Operation
func (c *N1N2IndividualSubscriptionDocumentApiController) N1N2MessageUnSubscribe(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	ueContextIdParam := params["ueContextId"]
	
	subscriptionIdParam := params["subscriptionId"]
	
	result, err := c.service.N1N2MessageUnSubscribe(r.Context(), ueContextIdParam, subscriptionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	amfcommon.EncodeJSONResponse(result.Body, &result.Code, w)

}
