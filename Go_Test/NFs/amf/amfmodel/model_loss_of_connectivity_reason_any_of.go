/*
 * Namf_EventExposure
 *
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type LossOfConnectivityReasonAnyOf string

// List of LossOfConnectivityReasonAnyOf
const (
	LOSSOFCONNECTIVITYREASONANYOF_DEREGISTERED LossOfConnectivityReasonAnyOf = "DEREGISTERED"
	LOSSOFCONNECTIVITYREASONANYOF_MAX_DETECTION_TIME_EXPIRED LossOfConnectivityReasonAnyOf = "MAX_DETECTION_TIME_EXPIRED"
	LOSSOFCONNECTIVITYREASONANYOF_PURGED LossOfConnectivityReasonAnyOf = "PURGED"
)

// AssertLossOfConnectivityReasonAnyOfRequired checks if the required fields are not zero-ed
func AssertLossOfConnectivityReasonAnyOfRequired(obj LossOfConnectivityReasonAnyOf) error {
	return nil
}

// AssertRecurseLossOfConnectivityReasonAnyOfRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of LossOfConnectivityReasonAnyOf (e.g. [][]LossOfConnectivityReasonAnyOf), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseLossOfConnectivityReasonAnyOfRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aLossOfConnectivityReasonAnyOf, ok := obj.(LossOfConnectivityReasonAnyOf)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertLossOfConnectivityReasonAnyOfRequired(aLossOfConnectivityReasonAnyOf)
	})
}
