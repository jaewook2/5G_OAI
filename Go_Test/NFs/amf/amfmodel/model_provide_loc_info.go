/*
 * Namf_Location
 *
 * AMF Location Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type ProvideLocInfo struct {

	CurrentLoc bool `json:"currentLoc,omitempty"`

	Location UserLocation `json:"location,omitempty"`

	AdditionalLocation UserLocation `json:"additionalLocation,omitempty"`

	GeoInfo GeographicArea `json:"geoInfo,omitempty"`

	LocationAge int32 `json:"locationAge,omitempty"`

	RatType RatType `json:"ratType,omitempty"`

	Timezone string `json:"timezone,omitempty"`

	SupportedFeatures string `json:"supportedFeatures,omitempty"`

	OldGuami Guami `json:"oldGuami,omitempty"`
}

// AssertProvideLocInfoRequired checks if the required fields are not zero-ed
func AssertProvideLocInfoRequired(obj ProvideLocInfo) error {
	if err := AssertUserLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.AdditionalLocation); err != nil {
		return err
	}
	if err := AssertGeographicAreaRequired(obj.GeoInfo); err != nil {
		return err
	}
	if err := AssertRatTypeRequired(obj.RatType); err != nil {
		return err
	}
	if err := AssertGuamiRequired(obj.OldGuami); err != nil {
		return err
	}
	return nil
}

// AssertRecurseProvideLocInfoRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ProvideLocInfo (e.g. [][]ProvideLocInfo), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseProvideLocInfoRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aProvideLocInfo, ok := obj.(ProvideLocInfo)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertProvideLocInfoRequired(aProvideLocInfo)
	})
}
