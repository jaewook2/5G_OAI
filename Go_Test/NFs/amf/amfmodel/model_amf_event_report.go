/*
 * Namf_EventExposure
 *
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"

	"time"
)

type AmfEventReport struct {

	Type AmfEventType `json:"type"`

	State AmfEventState `json:"state"`

	TimeStamp time.Time `json:"timeStamp"`

	SubscriptionId string `json:"subscriptionId,omitempty"`

	AnyUe bool `json:"anyUe,omitempty"`

	Supi string `json:"supi,omitempty"`

	AreaList []AmfEventArea `json:"areaList,omitempty"`

	RefId int32 `json:"refId,omitempty"`

	Gpsi string `json:"gpsi,omitempty"`

	Pei string `json:"pei,omitempty"`

	Location UserLocation `json:"location,omitempty"`

	AdditionalLocation UserLocation `json:"additionalLocation,omitempty"`

	Timezone string `json:"timezone,omitempty"`

	AccessTypeList []AccessType `json:"accessTypeList,omitempty"`

	RmInfoList []RmInfo `json:"rmInfoList,omitempty"`

	CmInfoList []CmInfo `json:"cmInfoList,omitempty"`

	Reachability UeReachability `json:"reachability,omitempty"`

	CommFailure CommunicationFailure `json:"commFailure,omitempty"`

	LossOfConnectReason LossOfConnectivityReason `json:"lossOfConnectReason,omitempty"`

	NumberOfUes int32 `json:"numberOfUes,omitempty"`

	Var5gsUserStateList []Model5GsUserStateInfo `json:"5gsUserStateList,omitempty"`

	TypeCode string `json:"typeCode,omitempty"`

	RegistrationNumber int32 `json:"registrationNumber,omitempty"`

	MaxAvailabilityTime time.Time `json:"maxAvailabilityTime,omitempty"`

	UeIdExt []UeidExt `json:"ueIdExt,omitempty"`
}

// AssertAmfEventReportRequired checks if the required fields are not zero-ed
func AssertAmfEventReportRequired(obj AmfEventReport) error {
	elements := map[string]interface{}{
		"type": obj.Type,
		"state": obj.State,
		"timeStamp": obj.TimeStamp,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertAmfEventTypeRequired(obj.Type); err != nil {
		return err
	}
	if err := AssertAmfEventStateRequired(obj.State); err != nil {
		return err
	}
	for _, el := range obj.AreaList {
		if err := AssertAmfEventAreaRequired(el); err != nil {
			return err
		}
	}
	if err := AssertUserLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.AdditionalLocation); err != nil {
		return err
	}
	for _, el := range obj.RmInfoList {
		if err := AssertRmInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CmInfoList {
		if err := AssertCmInfoRequired(el); err != nil {
			return err
		}
	}
	if err := AssertUeReachabilityRequired(obj.Reachability); err != nil {
		return err
	}
	if err := AssertCommunicationFailureRequired(obj.CommFailure); err != nil {
		return err
	}
	if err := AssertLossOfConnectivityReasonRequired(obj.LossOfConnectReason); err != nil {
		return err
	}
	for _, el := range obj.Var5gsUserStateList {
		if err := AssertModel5GsUserStateInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.UeIdExt {
		if err := AssertUeidExtRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseAmfEventReportRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AmfEventReport (e.g. [][]AmfEventReport), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseAmfEventReportRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAmfEventReport, ok := obj.(AmfEventReport)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertAmfEventReportRequired(aAmfEventReport)
	})
}
