/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
	"amf.com/amfcommon"
)

type AreaOfValidity struct {
	TaiList []Tai `json:"taiList"`
}

// AssertAreaOfValidityRequired checks if the required fields are not zero-ed
func AssertAreaOfValidityRequired(obj AreaOfValidity) error {
	elements := map[string]interface{}{
		"taiList": obj.TaiList,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	for _, el := range obj.TaiList {
		if err := AssertTaiRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseAreaOfValidityRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AreaOfValidity (e.g. [][]AreaOfValidity), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseAreaOfValidityRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAreaOfValidity, ok := obj.(AreaOfValidity)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertAreaOfValidityRequired(aAreaOfValidity)
	})
}
