/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"

	"time"
)

type GeraLocation struct {

	LocationNumber string `json:"locationNumber,omitempty"`

	Cgi CellGlobalId `json:"cgi,omitempty"`

	Rai RoutingAreaId `json:"rai,omitempty"`

	Sai ServiceAreaId `json:"sai,omitempty"`

	Lai LocationAreaId `json:"lai,omitempty"`

	VlrNumber string `json:"vlrNumber,omitempty"`

	MscNumber string `json:"mscNumber,omitempty"`

	AgeOfLocationInformation int32 `json:"ageOfLocationInformation,omitempty"`

	UeLocationTimestamp time.Time `json:"ueLocationTimestamp,omitempty"`

	GeographicalInformation string `json:"geographicalInformation,omitempty"`

	GeodeticInformation string `json:"geodeticInformation,omitempty"`
}

// AssertGeraLocationRequired checks if the required fields are not zero-ed
func AssertGeraLocationRequired(obj GeraLocation) error {
	if err := AssertCellGlobalIdRequired(obj.Cgi); err != nil {
		return err
	}
	if err := AssertRoutingAreaIdRequired(obj.Rai); err != nil {
		return err
	}
	if err := AssertServiceAreaIdRequired(obj.Sai); err != nil {
		return err
	}
	if err := AssertLocationAreaIdRequired(obj.Lai); err != nil {
		return err
	}
	return nil
}

// AssertRecurseGeraLocationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of GeraLocation (e.g. [][]GeraLocation), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseGeraLocationRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aGeraLocation, ok := obj.(GeraLocation)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertGeraLocationRequired(aGeraLocation)
	})
}
