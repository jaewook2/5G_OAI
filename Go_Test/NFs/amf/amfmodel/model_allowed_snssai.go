/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
	"amf.com/amfcommon"
)

type AllowedSnssai struct {
	AllowedSnssai Snssai `json:"allowedSnssai"`

	NsiInformationList []NsiInformation `json:"nsiInformationList,omitempty"`

	MappedHomeSnssai Snssai `json:"mappedHomeSnssai,omitempty"`
}

// AssertAllowedSnssaiRequired checks if the required fields are not zero-ed
func AssertAllowedSnssaiRequired(obj AllowedSnssai) error {
	elements := map[string]interface{}{
		"allowedSnssai": obj.AllowedSnssai,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertSnssaiRequired(obj.AllowedSnssai); err != nil {
		return err
	}
	for _, el := range obj.NsiInformationList {
		if err := AssertNsiInformationRequired(el); err != nil {
			return err
		}
	}
	if err := AssertSnssaiRequired(obj.MappedHomeSnssai); err != nil {
		return err
	}
	return nil
}

// AssertRecurseAllowedSnssaiRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AllowedSnssai (e.g. [][]AllowedSnssai), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseAllowedSnssaiRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAllowedSnssai, ok := obj.(AllowedSnssai)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertAllowedSnssaiRequired(aAllowedSnssai)
	})
}
