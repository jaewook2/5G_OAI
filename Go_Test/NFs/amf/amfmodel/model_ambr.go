/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
	"amf.com/amfcommon"
)

type Ambr struct {
	Uplink string `json:"uplink"`

	Downlink string `json:"downlink"`
}

// AssertAmbrRequired checks if the required fields are not zero-ed
func AssertAmbrRequired(obj Ambr) error {
	elements := map[string]interface{}{
		"uplink":   obj.Uplink,
		"downlink": obj.Downlink,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseAmbrRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Ambr (e.g. [][]Ambr), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseAmbrRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAmbr, ok := obj.(Ambr)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertAmbrRequired(aAmbr)
	})
}
