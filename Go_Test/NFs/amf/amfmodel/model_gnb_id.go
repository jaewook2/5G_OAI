/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type GnbId struct {

	BitLength int32 `json:"bitLength"`

	GNBValue string `json:"gNBValue"`
}

// AssertGnbIdRequired checks if the required fields are not zero-ed
func AssertGnbIdRequired(obj GnbId) error {
	elements := map[string]interface{}{
		"bitLength": obj.BitLength,
		"gNBValue": obj.GNBValue,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseGnbIdRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of GnbId (e.g. [][]GnbId), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseGnbIdRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aGnbId, ok := obj.(GnbId)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertGnbIdRequired(aGnbId)
	})
}
