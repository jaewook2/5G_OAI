/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
	"amf.com/amfcommon"
)

type AmfEvent struct {
	Type AmfEventType `json:"type"`

	ImmediateFlag bool `json:"immediateFlag,omitempty"`

	AreaList []AmfEventArea `json:"areaList,omitempty"`

	LocationFilterList []LocationFilter `json:"locationFilterList,omitempty"`

	RefId int32 `json:"refId,omitempty"`

	TrafficDescriptorList []TrafficDescriptor `json:"trafficDescriptorList,omitempty"`

	ReportUeReachable bool `json:"reportUeReachable,omitempty"`

	ReachabilityFilter ReachabilityFilter `json:"reachabilityFilter,omitempty"`

	MaxReports int32 `json:"maxReports,omitempty"`

	MaxResponseTime int32 `json:"maxResponseTime,omitempty"`
}

// AssertAmfEventRequired checks if the required fields are not zero-ed
func AssertAmfEventRequired(obj AmfEvent) error {
	elements := map[string]interface{}{
		"type": obj.Type,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertAmfEventTypeRequired(obj.Type); err != nil {
		return err
	}
	for _, el := range obj.AreaList {
		if err := AssertAmfEventAreaRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.LocationFilterList {
		if err := AssertLocationFilterRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TrafficDescriptorList {
		if err := AssertTrafficDescriptorRequired(el); err != nil {
			return err
		}
	}
	if err := AssertReachabilityFilterRequired(obj.ReachabilityFilter); err != nil {
		return err
	}
	return nil
}

// AssertRecurseAmfEventRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AmfEvent (e.g. [][]AmfEvent), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseAmfEventRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAmfEvent, ok := obj.(AmfEvent)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertAmfEventRequired(aAmfEvent)
	})
}
