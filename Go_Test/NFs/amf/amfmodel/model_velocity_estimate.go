/*
 * Namf_Location
 *
 * AMF Location Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type VelocityEstimate struct {

	HSpeed float32 `json:"hSpeed"`

	Bearing int32 `json:"bearing"`

	VSpeed float32 `json:"vSpeed"`

	VDirection VerticalDirection `json:"vDirection"`

	HUncertainty float32 `json:"hUncertainty"`

	VUncertainty float32 `json:"vUncertainty"`
}

// AssertVelocityEstimateRequired checks if the required fields are not zero-ed
func AssertVelocityEstimateRequired(obj VelocityEstimate) error {
	elements := map[string]interface{}{
		"hSpeed": obj.HSpeed,
		"bearing": obj.Bearing,
		"vSpeed": obj.VSpeed,
		"vDirection": obj.VDirection,
		"hUncertainty": obj.HUncertainty,
		"vUncertainty": obj.VUncertainty,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseVelocityEstimateRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of VelocityEstimate (e.g. [][]VelocityEstimate), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseVelocityEstimateRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aVelocityEstimate, ok := obj.(VelocityEstimate)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertVelocityEstimateRequired(aVelocityEstimate)
	})
}
