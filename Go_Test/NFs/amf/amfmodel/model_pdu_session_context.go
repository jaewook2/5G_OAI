/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type PduSessionContext struct {

	PduSessionId int32 `json:"pduSessionId"`

	SmContextRef string `json:"smContextRef"`

	SNssai Snssai `json:"sNssai"`

	Dnn string `json:"dnn"`

	SelectedDnn string `json:"selectedDnn,omitempty"`

	AccessType AccessType `json:"accessType"`

	AdditionalAccessType AccessType `json:"additionalAccessType,omitempty"`

	AllocatedEbiList []EbiArpMapping `json:"allocatedEbiList,omitempty"`

	HsmfId string `json:"hsmfId,omitempty"`

	HsmfSetId string `json:"hsmfSetId,omitempty"`

	HsmfServiceSetId string `json:"hsmfServiceSetId,omitempty"`

	SmfBinding SbiBindingLevel `json:"smfBinding,omitempty"`

	VsmfId string `json:"vsmfId,omitempty"`

	VsmfSetId string `json:"vsmfSetId,omitempty"`

	VsmfServiceSetId string `json:"vsmfServiceSetId,omitempty"`

	VsmfBinding SbiBindingLevel `json:"vsmfBinding,omitempty"`

	IsmfId string `json:"ismfId,omitempty"`

	IsmfSetId string `json:"ismfSetId,omitempty"`

	IsmfServiceSetId string `json:"ismfServiceSetId,omitempty"`

	IsmfBinding SbiBindingLevel `json:"ismfBinding,omitempty"`

	NsInstance string `json:"nsInstance,omitempty"`

	SmfServiceInstanceId string `json:"smfServiceInstanceId,omitempty"`

	MaPduSession bool `json:"maPduSession,omitempty"`

	CnAssistedRanPara CnAssistedRanPara `json:"cnAssistedRanPara,omitempty"`
}

// AssertPduSessionContextRequired checks if the required fields are not zero-ed
func AssertPduSessionContextRequired(obj PduSessionContext) error {
	elements := map[string]interface{}{
		"pduSessionId": obj.PduSessionId,
		"smContextRef": obj.SmContextRef,
		"sNssai": obj.SNssai,
		"dnn": obj.Dnn,
		"accessType": obj.AccessType,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertSnssaiRequired(obj.SNssai); err != nil {
		return err
	}
	for _, el := range obj.AllocatedEbiList {
		if err := AssertEbiArpMappingRequired(el); err != nil {
			return err
		}
	}
	if err := AssertSbiBindingLevelRequired(obj.SmfBinding); err != nil {
		return err
	}
	if err := AssertSbiBindingLevelRequired(obj.VsmfBinding); err != nil {
		return err
	}
	if err := AssertSbiBindingLevelRequired(obj.IsmfBinding); err != nil {
		return err
	}
	if err := AssertCnAssistedRanParaRequired(obj.CnAssistedRanPara); err != nil {
		return err
	}
	return nil
}

// AssertRecursePduSessionContextRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of PduSessionContext (e.g. [][]PduSessionContext), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecursePduSessionContextRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPduSessionContext, ok := obj.(PduSessionContext)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertPduSessionContextRequired(aPduSessionContext)
	})
}
