/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"
)

// LteMInd - LTE-M Indication.
type LteMInd struct {

	LteCatMInd bool `json:"lteCatMInd"`
}

// AssertLteMIndRequired checks if the required fields are not zero-ed
func AssertLteMIndRequired(obj LteMInd) error {
	elements := map[string]interface{}{
		"lteCatMInd": obj.LteCatMInd,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseLteMIndRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of LteMInd (e.g. [][]LteMInd), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseLteMIndRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aLteMInd, ok := obj.(LteMInd)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertLteMIndRequired(aLteMInd)
	})
}
