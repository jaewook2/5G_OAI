/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
	"amf.com/amfcommon"
)

type CnAssistedRanPara struct {
	StationaryIndication StationaryIndication `json:"stationaryIndication,omitempty"`

	CommunicationDurationTime int32 `json:"communicationDurationTime,omitempty"`

	PeriodicTime int32 `json:"periodicTime,omitempty"`

	ScheduledCommunicationTime ScheduledCommunicationTime `json:"scheduledCommunicationTime,omitempty"`

	ScheduledCommunicationType ScheduledCommunicationType `json:"scheduledCommunicationType,omitempty"`

	TrafficProfile TrafficProfile `json:"trafficProfile,omitempty"`

	BatteryIndication BatteryIndication `json:"batteryIndication,omitempty"`
}

// AssertCnAssistedRanParaRequired checks if the required fields are not zero-ed
func AssertCnAssistedRanParaRequired(obj CnAssistedRanPara) error {
	if err := AssertStationaryIndicationRequired(obj.StationaryIndication); err != nil {
		return err
	}
	if err := AssertScheduledCommunicationTimeRequired(obj.ScheduledCommunicationTime); err != nil {
		return err
	}
	if err := AssertScheduledCommunicationTypeRequired(obj.ScheduledCommunicationType); err != nil {
		return err
	}
	if err := AssertTrafficProfileRequired(obj.TrafficProfile); err != nil {
		return err
	}
	if err := AssertBatteryIndicationRequired(obj.BatteryIndication); err != nil {
		return err
	}
	return nil
}

// AssertRecurseCnAssistedRanParaRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CnAssistedRanPara (e.g. [][]CnAssistedRanPara), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseCnAssistedRanParaRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCnAssistedRanPara, ok := obj.(CnAssistedRanPara)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertCnAssistedRanParaRequired(aCnAssistedRanPara)
	})
}
