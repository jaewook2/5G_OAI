/*
 * Namf_EventExposure
 *
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
	"amf.com/amfcommon"
)

type AmfCreateEventSubscription struct {
	Subscription AmfEventSubscription `json:"subscription"`

	SupportedFeatures string `json:"supportedFeatures,omitempty"`

	OldGuami Guami `json:"oldGuami,omitempty"`
}

// AssertAmfCreateEventSubscriptionRequired checks if the required fields are not zero-ed
func AssertAmfCreateEventSubscriptionRequired(obj AmfCreateEventSubscription) error {
	elements := map[string]interface{}{
		"subscription": obj.Subscription,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertAmfEventSubscriptionRequired(obj.Subscription); err != nil {
		return err
	}
	if err := AssertGuamiRequired(obj.OldGuami); err != nil {
		return err
	}
	return nil
}

// AssertRecurseAmfCreateEventSubscriptionRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AmfCreateEventSubscription (e.g. [][]AmfCreateEventSubscription), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseAmfCreateEventSubscriptionRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAmfCreateEventSubscription, ok := obj.(AmfCreateEventSubscription)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertAmfCreateEventSubscriptionRequired(aAmfCreateEventSubscription)
	})
}
