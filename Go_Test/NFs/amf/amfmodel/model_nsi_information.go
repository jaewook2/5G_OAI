/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"
)

type NsiInformation struct {

	NrfId string `json:"nrfId"`

	NsiId string `json:"nsiId,omitempty"`

	NrfNfMgtUri string `json:"nrfNfMgtUri,omitempty"`

	NrfAccessTokenUri string `json:"nrfAccessTokenUri,omitempty"`
}

// AssertNsiInformationRequired checks if the required fields are not zero-ed
func AssertNsiInformationRequired(obj NsiInformation) error {
	elements := map[string]interface{}{
		"nrfId": obj.NrfId,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseNsiInformationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of NsiInformation (e.g. [][]NsiInformation), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseNsiInformationRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aNsiInformation, ok := obj.(NsiInformation)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertNsiInformationRequired(aNsiInformation)
	})
}
