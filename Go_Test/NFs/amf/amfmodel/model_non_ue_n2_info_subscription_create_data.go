/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type NonUeN2InfoSubscriptionCreateData struct {

	GlobalRanNodeList []GlobalRanNodeId `json:"globalRanNodeList,omitempty"`

	AnTypeList []AccessType `json:"anTypeList,omitempty"`

	N2InformationClass N2InformationClass `json:"n2InformationClass"`

	N2NotifyCallbackUri string `json:"n2NotifyCallbackUri"`

	NfId string `json:"nfId,omitempty"`

	SupportedFeatures string `json:"supportedFeatures,omitempty"`
}

// AssertNonUeN2InfoSubscriptionCreateDataRequired checks if the required fields are not zero-ed
func AssertNonUeN2InfoSubscriptionCreateDataRequired(obj NonUeN2InfoSubscriptionCreateData) error {
	elements := map[string]interface{}{
		"n2InformationClass": obj.N2InformationClass,
		"n2NotifyCallbackUri": obj.N2NotifyCallbackUri,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	for _, el := range obj.GlobalRanNodeList {
		if err := AssertGlobalRanNodeIdRequired(el); err != nil {
			return err
		}
	}
	if err := AssertN2InformationClassRequired(obj.N2InformationClass); err != nil {
		return err
	}
	return nil
}

// AssertRecurseNonUeN2InfoSubscriptionCreateDataRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of NonUeN2InfoSubscriptionCreateData (e.g. [][]NonUeN2InfoSubscriptionCreateData), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseNonUeN2InfoSubscriptionCreateDataRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aNonUeN2InfoSubscriptionCreateData, ok := obj.(NonUeN2InfoSubscriptionCreateData)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertNonUeN2InfoSubscriptionCreateDataRequired(aNonUeN2InfoSubscriptionCreateData)
	})
}
