/*
 * Namf_Location
 *
 * AMF Location Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
	"amf.com/amfcommon"
)

type AreaEventInfo struct {
	AreaDefinition []ReportingArea `json:"areaDefinition"`

	OccurrenceInfo OccurrenceInfo `json:"occurrenceInfo,omitempty"`

	MinimumInterval int32 `json:"minimumInterval,omitempty"`

	MaximumInterval int32 `json:"maximumInterval,omitempty"`

	SamplingInterval int32 `json:"samplingInterval,omitempty"`

	ReportingDuration int32 `json:"reportingDuration,omitempty"`

	ReportingLocationReq bool `json:"reportingLocationReq,omitempty"`
}

// AssertAreaEventInfoRequired checks if the required fields are not zero-ed
func AssertAreaEventInfoRequired(obj AreaEventInfo) error {
	elements := map[string]interface{}{
		"areaDefinition": obj.AreaDefinition,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	for _, el := range obj.AreaDefinition {
		if err := AssertReportingAreaRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOccurrenceInfoRequired(obj.OccurrenceInfo); err != nil {
		return err
	}
	return nil
}

// AssertRecurseAreaEventInfoRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AreaEventInfo (e.g. [][]AreaEventInfo), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseAreaEventInfoRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAreaEventInfo, ok := obj.(AreaEventInfo)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertAreaEventInfoRequired(aAreaEventInfo)
	})
}
