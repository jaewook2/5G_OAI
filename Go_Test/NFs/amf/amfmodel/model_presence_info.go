/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"
)

type PresenceInfo struct {

	PraId string `json:"praId,omitempty"`

	AdditionalPraId string `json:"additionalPraId,omitempty"`

	PresenceState PresenceState `json:"presenceState,omitempty"`

	TrackingAreaList []Tai `json:"trackingAreaList,omitempty"`

	EcgiList []Ecgi `json:"ecgiList,omitempty"`

	NcgiList []Ncgi `json:"ncgiList,omitempty"`

	GlobalRanNodeIdList []GlobalRanNodeId `json:"globalRanNodeIdList,omitempty"`

	GlobaleNbIdList []GlobalRanNodeId `json:"globaleNbIdList,omitempty"`
}

// AssertPresenceInfoRequired checks if the required fields are not zero-ed
func AssertPresenceInfoRequired(obj PresenceInfo) error {
	if err := AssertPresenceStateRequired(obj.PresenceState); err != nil {
		return err
	}
	for _, el := range obj.TrackingAreaList {
		if err := AssertTaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.EcgiList {
		if err := AssertEcgiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NcgiList {
		if err := AssertNcgiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GlobalRanNodeIdList {
		if err := AssertGlobalRanNodeIdRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GlobaleNbIdList {
		if err := AssertGlobalRanNodeIdRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecursePresenceInfoRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of PresenceInfo (e.g. [][]PresenceInfo), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecursePresenceInfoRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPresenceInfo, ok := obj.(PresenceInfo)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertPresenceInfoRequired(aPresenceInfo)
	})
}
