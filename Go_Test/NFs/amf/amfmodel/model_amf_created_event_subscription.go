/*
 * Namf_EventExposure
 *
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"
)

type AmfCreatedEventSubscription struct {

	Subscription AmfEventSubscription `json:"subscription"`

	SubscriptionId string `json:"subscriptionId"`

	ReportList []AmfEventReport `json:"reportList,omitempty"`

	SupportedFeatures string `json:"supportedFeatures,omitempty"`
}

// AssertAmfCreatedEventSubscriptionRequired checks if the required fields are not zero-ed
func AssertAmfCreatedEventSubscriptionRequired(obj AmfCreatedEventSubscription) error {
	elements := map[string]interface{}{
		"subscription": obj.Subscription,
		"subscriptionId": obj.SubscriptionId,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertAmfEventSubscriptionRequired(obj.Subscription); err != nil {
		return err
	}
	for _, el := range obj.ReportList {
		if err := AssertAmfEventReportRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseAmfCreatedEventSubscriptionRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AmfCreatedEventSubscription (e.g. [][]AmfCreatedEventSubscription), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseAmfCreatedEventSubscriptionRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAmfCreatedEventSubscription, ok := obj.(AmfCreatedEventSubscription)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertAmfCreatedEventSubscriptionRequired(aAmfCreatedEventSubscription)
	})
}
