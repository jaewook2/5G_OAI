/*
 * Namf_Location
 *
 * AMF Location Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"
)

type GnssPositioningMethodAndUsage struct {

	Mode PositioningMode `json:"mode"`

	Gnss GnssId `json:"gnss"`

	Usage Usage `json:"usage"`
}

// AssertGnssPositioningMethodAndUsageRequired checks if the required fields are not zero-ed
func AssertGnssPositioningMethodAndUsageRequired(obj GnssPositioningMethodAndUsage) error {
	elements := map[string]interface{}{
		"mode": obj.Mode,
		"gnss": obj.Gnss,
		"usage": obj.Usage,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertPositioningModeRequired(obj.Mode); err != nil {
		return err
	}
	if err := AssertGnssIdRequired(obj.Gnss); err != nil {
		return err
	}
	if err := AssertUsageRequired(obj.Usage); err != nil {
		return err
	}
	return nil
}

// AssertRecurseGnssPositioningMethodAndUsageRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of GnssPositioningMethodAndUsage (e.g. [][]GnssPositioningMethodAndUsage), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseGnssPositioningMethodAndUsageRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aGnssPositioningMethodAndUsage, ok := obj.(GnssPositioningMethodAndUsage)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertGnssPositioningMethodAndUsageRequired(aGnssPositioningMethodAndUsage)
	})
}
