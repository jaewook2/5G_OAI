/*
 * Namf_Location
 *
 * AMF Location Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type ProvidePosInfo struct {

	LocationEstimate GeographicArea `json:"locationEstimate,omitempty"`

	AccuracyFulfilmentIndicator AccuracyFulfilmentIndicator `json:"accuracyFulfilmentIndicator,omitempty"`

	AgeOfLocationEstimate int32 `json:"ageOfLocationEstimate,omitempty"`

	VelocityEstimate VelocityEstimate `json:"velocityEstimate,omitempty"`

	PositioningDataList []PositioningMethodAndUsage `json:"positioningDataList,omitempty"`

	GnssPositioningDataList []GnssPositioningMethodAndUsage `json:"gnssPositioningDataList,omitempty"`

	Ecgi Ecgi `json:"ecgi,omitempty"`

	Ncgi Ncgi `json:"ncgi,omitempty"`

	TargetServingNode string `json:"targetServingNode,omitempty"`

	TargetMmeName string `json:"targetMmeName,omitempty"`

	TargetMmeRealm string `json:"targetMmeRealm,omitempty"`

	UtranSrvccInd bool `json:"utranSrvccInd,omitempty"`

	CivicAddress CivicAddress `json:"civicAddress,omitempty"`

	BarometricPressure int32 `json:"barometricPressure,omitempty"`

	Altitude float64 `json:"altitude,omitempty"`

	SupportedFeatures string `json:"supportedFeatures,omitempty"`

	ServingLMFIdentification string `json:"servingLMFIdentification,omitempty"`

	LocationPrivacyVerResult LocationPrivacyVerResult `json:"locationPrivacyVerResult,omitempty"`
}

// AssertProvidePosInfoRequired checks if the required fields are not zero-ed
func AssertProvidePosInfoRequired(obj ProvidePosInfo) error {
	if err := AssertGeographicAreaRequired(obj.LocationEstimate); err != nil {
		return err
	}
	if err := AssertAccuracyFulfilmentIndicatorRequired(obj.AccuracyFulfilmentIndicator); err != nil {
		return err
	}
	if err := AssertVelocityEstimateRequired(obj.VelocityEstimate); err != nil {
		return err
	}
	for _, el := range obj.PositioningDataList {
		if err := AssertPositioningMethodAndUsageRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.GnssPositioningDataList {
		if err := AssertGnssPositioningMethodAndUsageRequired(el); err != nil {
			return err
		}
	}
	if err := AssertEcgiRequired(obj.Ecgi); err != nil {
		return err
	}
	if err := AssertNcgiRequired(obj.Ncgi); err != nil {
		return err
	}
	if err := AssertCivicAddressRequired(obj.CivicAddress); err != nil {
		return err
	}
	if err := AssertLocationPrivacyVerResultRequired(obj.LocationPrivacyVerResult); err != nil {
		return err
	}
	return nil
}

// AssertRecurseProvidePosInfoRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ProvidePosInfo (e.g. [][]ProvidePosInfo), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseProvidePosInfoRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aProvidePosInfo, ok := obj.(ProvidePosInfo)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertProvidePosInfoRequired(aProvidePosInfo)
	})
}
