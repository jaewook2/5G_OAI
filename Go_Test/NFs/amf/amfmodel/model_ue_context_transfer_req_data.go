/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type UeContextTransferReqData struct {

	Reason TransferReason `json:"reason"`

	AccessType AccessType `json:"accessType"`

	PlmnId PlmnId `json:"plmnId,omitempty"`

	RegRequest N1MessageContainer `json:"regRequest,omitempty"`

	SupportedFeatures string `json:"supportedFeatures,omitempty"`
}

// AssertUeContextTransferReqDataRequired checks if the required fields are not zero-ed
func AssertUeContextTransferReqDataRequired(obj UeContextTransferReqData) error {
	elements := map[string]interface{}{
		"reason": obj.Reason,
		"accessType": obj.AccessType,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertTransferReasonRequired(obj.Reason); err != nil {
		return err
	}
	if err := AssertPlmnIdRequired(obj.PlmnId); err != nil {
		return err
	}
	if err := AssertN1MessageContainerRequired(obj.RegRequest); err != nil {
		return err
	}
	return nil
}

// AssertRecurseUeContextTransferReqDataRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of UeContextTransferReqData (e.g. [][]UeContextTransferReqData), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseUeContextTransferReqDataRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUeContextTransferReqData, ok := obj.(UeContextTransferReqData)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertUeContextTransferReqDataRequired(aUeContextTransferReqData)
	})
}
