/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"

	"os"
)

type InlineObject3 struct {

	JsonData N1MessageNotification `json:"jsonData,omitempty"`

	BinaryDataN1Message *os.File `json:"binaryDataN1Message,omitempty"`
}

// AssertInlineObject3Required checks if the required fields are not zero-ed
func AssertInlineObject3Required(obj InlineObject3) error {
	if err := AssertN1MessageNotificationRequired(obj.JsonData); err != nil {
		return err
	}
	return nil
}

// AssertRecurseInlineObject3Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of InlineObject3 (e.g. [][]InlineObject3), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseInlineObject3Required(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aInlineObject3, ok := obj.(InlineObject3)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertInlineObject3Required(aInlineObject3)
	})
}
