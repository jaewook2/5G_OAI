/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type DddTrafficDescriptor struct {

	Ipv4Addr string `json:"ipv4Addr,omitempty"`

	Ipv6Addr Ipv6Addr `json:"ipv6Addr,omitempty"`

	PortNumber int32 `json:"portNumber,omitempty"`

	MacAddr string `json:"macAddr,omitempty"`
}

// AssertDddTrafficDescriptorRequired checks if the required fields are not zero-ed
func AssertDddTrafficDescriptorRequired(obj DddTrafficDescriptor) error {
	if err := AssertIpv6AddrRequired(obj.Ipv6Addr); err != nil {
		return err
	}
	return nil
}

// AssertRecurseDddTrafficDescriptorRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of DddTrafficDescriptor (e.g. [][]DddTrafficDescriptor), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseDddTrafficDescriptorRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aDddTrafficDescriptor, ok := obj.(DddTrafficDescriptor)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertDddTrafficDescriptorRequired(aDddTrafficDescriptor)
	})
}
