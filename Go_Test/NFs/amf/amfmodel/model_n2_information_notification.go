/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"
)

type N2InformationNotification struct {

	N2NotifySubscriptionId string `json:"n2NotifySubscriptionId"`

	N2InfoContainer N2InfoContainer `json:"n2InfoContainer,omitempty"`

	ToReleaseSessionList []int32 `json:"toReleaseSessionList,omitempty"`

	LcsCorrelationId string `json:"lcsCorrelationId,omitempty"`

	NotifyReason N2InfoNotifyReason `json:"notifyReason,omitempty"`

	SmfChangeInfoList []SmfChangeInfo `json:"smfChangeInfoList,omitempty"`

	RanNodeId GlobalRanNodeId `json:"ranNodeId,omitempty"`

	InitialAmfName string `json:"initialAmfName,omitempty"`

	AnN2IPv4Addr string `json:"anN2IPv4Addr,omitempty"`

	AnN2IPv6Addr Ipv6Addr `json:"anN2IPv6Addr,omitempty"`

	Guami Guami `json:"guami,omitempty"`

	NotifySourceNgRan bool `json:"notifySourceNgRan,omitempty"`
}

// AssertN2InformationNotificationRequired checks if the required fields are not zero-ed
func AssertN2InformationNotificationRequired(obj N2InformationNotification) error {
	elements := map[string]interface{}{
		"n2NotifySubscriptionId": obj.N2NotifySubscriptionId,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertN2InfoContainerRequired(obj.N2InfoContainer); err != nil {
		return err
	}
	if err := AssertN2InfoNotifyReasonRequired(obj.NotifyReason); err != nil {
		return err
	}
	for _, el := range obj.SmfChangeInfoList {
		if err := AssertSmfChangeInfoRequired(el); err != nil {
			return err
		}
	}
	if err := AssertGlobalRanNodeIdRequired(obj.RanNodeId); err != nil {
		return err
	}
	if err := AssertIpv6AddrRequired(obj.AnN2IPv6Addr); err != nil {
		return err
	}
	if err := AssertGuamiRequired(obj.Guami); err != nil {
		return err
	}
	return nil
}

// AssertRecurseN2InformationNotificationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of N2InformationNotification (e.g. [][]N2InformationNotification), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseN2InformationNotificationRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aN2InformationNotification, ok := obj.(N2InformationNotification)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertN2InformationNotificationRequired(aN2InformationNotification)
	})
}
