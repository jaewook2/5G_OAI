/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type PwsResponseData struct {

	NgapMessageType int32 `json:"ngapMessageType"`

	SerialNumber int32 `json:"serialNumber"`

	MessageIdentifier int32 `json:"messageIdentifier"`

	UnknownTaiList []Tai `json:"unknownTaiList,omitempty"`
}

// AssertPwsResponseDataRequired checks if the required fields are not zero-ed
func AssertPwsResponseDataRequired(obj PwsResponseData) error {
	elements := map[string]interface{}{
		"ngapMessageType": obj.NgapMessageType,
		"serialNumber": obj.SerialNumber,
		"messageIdentifier": obj.MessageIdentifier,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	for _, el := range obj.UnknownTaiList {
		if err := AssertTaiRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecursePwsResponseDataRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of PwsResponseData (e.g. [][]PwsResponseData), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecursePwsResponseDataRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPwsResponseData, ok := obj.(PwsResponseData)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertPwsResponseDataRequired(aPwsResponseData)
	})
}
