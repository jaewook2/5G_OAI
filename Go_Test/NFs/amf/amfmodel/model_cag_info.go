/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
	"amf.com/amfcommon"
)

type CagInfo struct {
	AllowedCagList []string `json:"allowedCagList"`

	CagOnlyIndicator bool `json:"cagOnlyIndicator,omitempty"`
}

// AssertCagInfoRequired checks if the required fields are not zero-ed
func AssertCagInfoRequired(obj CagInfo) error {
	elements := map[string]interface{}{
		"allowedCagList": obj.AllowedCagList,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseCagInfoRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CagInfo (e.g. [][]CagInfo), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseCagInfoRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCagInfo, ok := obj.(CagInfo)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertCagInfoRequired(aCagInfo)
	})
}
