/*
 * Namf_Location
 *
 * AMF Location Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"
)

type TerminationCauseAnyOf string

// List of TerminationCauseAnyOf
const (
	TERMINATIONCAUSEANYOF_TERMINATION_BY_UE TerminationCauseAnyOf = "TERMINATION_BY_UE"
	TERMINATIONCAUSEANYOF_TERMINATION_BY_NETWORK TerminationCauseAnyOf = "TERMINATION_BY_NETWORK"
	TERMINATIONCAUSEANYOF_NORMAL_TERMINATION TerminationCauseAnyOf = "NORMAL_TERMINATION"
)

// AssertTerminationCauseAnyOfRequired checks if the required fields are not zero-ed
func AssertTerminationCauseAnyOfRequired(obj TerminationCauseAnyOf) error {
	return nil
}

// AssertRecurseTerminationCauseAnyOfRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of TerminationCauseAnyOf (e.g. [][]TerminationCauseAnyOf), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseTerminationCauseAnyOfRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTerminationCauseAnyOf, ok := obj.(TerminationCauseAnyOf)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertTerminationCauseAnyOfRequired(aTerminationCauseAnyOf)
	})
}
