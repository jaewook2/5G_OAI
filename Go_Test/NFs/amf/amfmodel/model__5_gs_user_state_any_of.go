/*
 * Namf_EventExposure
 *
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"
)

type _5GsUserStateAnyOf string

// List of _5GsUserStateAnyOf
const (
	_5GSUSERSTATEANYOF_DEREGISTERED _5GsUserStateAnyOf = "DEREGISTERED"
	_5GSUSERSTATEANYOF_REGISTERED_NOT_REACHABLE_FOR_PAGING _5GsUserStateAnyOf = "REGISTERED_NOT_REACHABLE_FOR_PAGING"
	_5GSUSERSTATEANYOF_REGISTERED_REACHABLE_FOR_PAGING _5GsUserStateAnyOf = "REGISTERED_REACHABLE_FOR_PAGING"
	_5GSUSERSTATEANYOF_CONNECTED_NOT_REACHABLE_FOR_PAGING _5GsUserStateAnyOf = "CONNECTED_NOT_REACHABLE_FOR_PAGING"
	_5GSUSERSTATEANYOF_CONNECTED_REACHABLE_FOR_PAGING _5GsUserStateAnyOf = "CONNECTED_REACHABLE_FOR_PAGING"
	_5GSUSERSTATEANYOF_NOT_PROVIDED_FROM_AMF _5GsUserStateAnyOf = "NOT_PROVIDED_FROM_AMF"
)

// Assert5GsUserStateAnyOfRequired checks if the required fields are not zero-ed
func Assert5GsUserStateAnyOfRequired(obj _5GsUserStateAnyOf) error {
	return nil
}

// AssertRecurse_5GsUserStateAnyOfRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of _5GsUserStateAnyOf (e.g. [][]_5GsUserStateAnyOf), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurse_5GsUserStateAnyOfRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		a5GsUserStateAnyOf, ok := obj.(_5GsUserStateAnyOf)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return Assert5GsUserStateAnyOfRequired(a5GsUserStateAnyOf)
	})
}
