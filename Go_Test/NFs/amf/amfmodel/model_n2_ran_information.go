/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type N2RanInformation struct {

	N2InfoContent N2InfoContent `json:"n2InfoContent"`
}

// AssertN2RanInformationRequired checks if the required fields are not zero-ed
func AssertN2RanInformationRequired(obj N2RanInformation) error {
	elements := map[string]interface{}{
		"n2InfoContent": obj.N2InfoContent,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertN2InfoContentRequired(obj.N2InfoContent); err != nil {
		return err
	}
	return nil
}

// AssertRecurseN2RanInformationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of N2RanInformation (e.g. [][]N2RanInformation), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseN2RanInformationRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aN2RanInformation, ok := obj.(N2RanInformation)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertN2RanInformationRequired(aN2RanInformation)
	})
}
