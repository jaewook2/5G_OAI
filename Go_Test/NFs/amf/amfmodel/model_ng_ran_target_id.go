/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"
)

type NgRanTargetId struct {

	RanNodeId GlobalRanNodeId `json:"ranNodeId"`

	Tai Tai `json:"tai"`
}

// AssertNgRanTargetIdRequired checks if the required fields are not zero-ed
func AssertNgRanTargetIdRequired(obj NgRanTargetId) error {
	elements := map[string]interface{}{
		"ranNodeId": obj.RanNodeId,
		"tai": obj.Tai,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertGlobalRanNodeIdRequired(obj.RanNodeId); err != nil {
		return err
	}
	if err := AssertTaiRequired(obj.Tai); err != nil {
		return err
	}
	return nil
}

// AssertRecurseNgRanTargetIdRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of NgRanTargetId (e.g. [][]NgRanTargetId), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseNgRanTargetIdRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aNgRanTargetId, ok := obj.(NgRanTargetId)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertNgRanTargetIdRequired(aNgRanTargetId)
	})
}
