/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type SubscriptionData struct {

	AmfStatusUri string `json:"amfStatusUri"`

	GuamiList []Guami `json:"guamiList,omitempty"`
}

// AssertSubscriptionDataRequired checks if the required fields are not zero-ed
func AssertSubscriptionDataRequired(obj SubscriptionData) error {
	elements := map[string]interface{}{
		"amfStatusUri": obj.AmfStatusUri,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	for _, el := range obj.GuamiList {
		if err := AssertGuamiRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseSubscriptionDataRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SubscriptionData (e.g. [][]SubscriptionData), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseSubscriptionDataRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSubscriptionData, ok := obj.(SubscriptionData)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertSubscriptionDataRequired(aSubscriptionData)
	})
}
