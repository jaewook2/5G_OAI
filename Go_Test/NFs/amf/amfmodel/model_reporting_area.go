/*
 * Namf_Location
 *
 * AMF Location Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type ReportingArea struct {

	AreaType ReportingAreaType `json:"areaType"`

	Tai Tai `json:"tai,omitempty"`

	Ecgi Ecgi `json:"ecgi,omitempty"`

	Ncgi Ncgi `json:"ncgi,omitempty"`
}

// AssertReportingAreaRequired checks if the required fields are not zero-ed
func AssertReportingAreaRequired(obj ReportingArea) error {
	elements := map[string]interface{}{
		"areaType": obj.AreaType,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertReportingAreaTypeRequired(obj.AreaType); err != nil {
		return err
	}
	if err := AssertTaiRequired(obj.Tai); err != nil {
		return err
	}
	if err := AssertEcgiRequired(obj.Ecgi); err != nil {
		return err
	}
	if err := AssertNcgiRequired(obj.Ncgi); err != nil {
		return err
	}
	return nil
}

// AssertRecurseReportingAreaRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ReportingArea (e.g. [][]ReportingArea), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseReportingAreaRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aReportingArea, ok := obj.(ReportingArea)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertReportingAreaRequired(aReportingArea)
	})
}
