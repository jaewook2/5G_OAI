/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"
)

type Arp struct {

	// nullable true shall not be used for this attribute
	PriorityLevel *int32 `json:"priorityLevel"`

	PreemptCap PreemptionCapability `json:"preemptCap"`

	PreemptVuln PreemptionVulnerability `json:"preemptVuln"`
}

// AssertArpRequired checks if the required fields are not zero-ed
func AssertArpRequired(obj Arp) error {
	elements := map[string]interface{}{
		"priorityLevel": obj.PriorityLevel,
		"preemptCap": obj.PreemptCap,
		"preemptVuln": obj.PreemptVuln,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertPreemptionCapabilityRequired(obj.PreemptCap); err != nil {
		return err
	}
	if err := AssertPreemptionVulnerabilityRequired(obj.PreemptVuln); err != nil {
		return err
	}
	return nil
}

// AssertRecurseArpRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Arp (e.g. [][]Arp), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseArpRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aArp, ok := obj.(Arp)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertArpRequired(aArp)
	})
}
