/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type RegistrationContextContainer struct {

	UeContext UeContext `json:"ueContext"`

	LocalTimeZone string `json:"localTimeZone,omitempty"`

	AnType AccessType `json:"anType"`

	AnN2ApId int32 `json:"anN2ApId"`

	RanNodeId GlobalRanNodeId `json:"ranNodeId"`

	InitialAmfName string `json:"initialAmfName"`

	UserLocation UserLocation `json:"userLocation"`

	RrcEstCause string `json:"rrcEstCause,omitempty"`

	UeContextRequest bool `json:"ueContextRequest,omitempty"`

	InitialAmfN2ApId int32 `json:"initialAmfN2ApId,omitempty"`

	AnN2IPv4Addr string `json:"anN2IPv4Addr,omitempty"`

	AnN2IPv6Addr Ipv6Addr `json:"anN2IPv6Addr,omitempty"`

	AllowedNssai AllowedNssai `json:"allowedNssai,omitempty"`

	ConfiguredNssai []ConfiguredSnssai `json:"configuredNssai,omitempty"`

	RejectedNssaiInPlmn []Snssai `json:"rejectedNssaiInPlmn,omitempty"`

	RejectedNssaiInTa []Snssai `json:"rejectedNssaiInTa,omitempty"`

	SelectedPlmnId PlmnId `json:"selectedPlmnId,omitempty"`

	IabNodeInd bool `json:"iabNodeInd,omitempty"`

	CeModeBInd CeModeBInd `json:"ceModeBInd,omitempty"`

	LteMInd LteMInd `json:"lteMInd,omitempty"`

	AuthenticatedInd bool `json:"authenticatedInd,omitempty"`

	NpnAccessInfo NpnAccessInfo `json:"npnAccessInfo,omitempty"`
}

// AssertRegistrationContextContainerRequired checks if the required fields are not zero-ed
func AssertRegistrationContextContainerRequired(obj RegistrationContextContainer) error {
	elements := map[string]interface{}{
		"ueContext": obj.UeContext,
		"anType": obj.AnType,
		"anN2ApId": obj.AnN2ApId,
		"ranNodeId": obj.RanNodeId,
		"initialAmfName": obj.InitialAmfName,
		"userLocation": obj.UserLocation,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertUeContextRequired(obj.UeContext); err != nil {
		return err
	}
	if err := AssertGlobalRanNodeIdRequired(obj.RanNodeId); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.UserLocation); err != nil {
		return err
	}
	if err := AssertIpv6AddrRequired(obj.AnN2IPv6Addr); err != nil {
		return err
	}
	if err := AssertAllowedNssaiRequired(obj.AllowedNssai); err != nil {
		return err
	}
	for _, el := range obj.ConfiguredNssai {
		if err := AssertConfiguredSnssaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RejectedNssaiInPlmn {
		if err := AssertSnssaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RejectedNssaiInTa {
		if err := AssertSnssaiRequired(el); err != nil {
			return err
		}
	}
	if err := AssertPlmnIdRequired(obj.SelectedPlmnId); err != nil {
		return err
	}
	if err := AssertCeModeBIndRequired(obj.CeModeBInd); err != nil {
		return err
	}
	if err := AssertLteMIndRequired(obj.LteMInd); err != nil {
		return err
	}
	if err := AssertNpnAccessInfoRequired(obj.NpnAccessInfo); err != nil {
		return err
	}
	return nil
}

// AssertRecurseRegistrationContextContainerRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of RegistrationContextContainer (e.g. [][]RegistrationContextContainer), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseRegistrationContextContainerRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aRegistrationContextContainer, ok := obj.(RegistrationContextContainer)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertRegistrationContextContainerRequired(aRegistrationContextContainer)
	})
}
