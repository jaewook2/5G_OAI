/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"

	"time"
)

type CagData struct {

	// A map (list of key-value pairs where PlmnId serves as key) of CagInfo
	CagInfos map[string]CagInfo `json:"cagInfos"`

	ProvisioningTime time.Time `json:"provisioningTime,omitempty"`
}

// AssertCagDataRequired checks if the required fields are not zero-ed
func AssertCagDataRequired(obj CagData) error {
	elements := map[string]interface{}{
		"cagInfos": obj.CagInfos,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseCagDataRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CagData (e.g. [][]CagData), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseCagDataRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCagData, ok := obj.(CagData)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertCagDataRequired(aCagData)
	})
}
