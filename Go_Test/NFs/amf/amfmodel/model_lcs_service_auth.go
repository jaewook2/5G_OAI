/*
 * Namf_Location
 *
 * AMF Location Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

// LcsServiceAuth - Possible values are - \"LOCATION_ALLOWED_WITH_NOTIFICATION\": Location allowed with notification - \"LOCATION_ALLOWED_WITHOUT_NOTIFICATION\": Location allowed without notification - \"LOCATION_ALLOWED_WITHOUT_RESPONSE\": Location with notification and privacy verification; location allowed if no response - \"LOCATION_RESTRICTED_WITHOUT_RESPONSE\": Location with notification and privacy verification; location restricted if no response - \"NOTIFICATION_ONLY\": Notification only - \"NOTIFICATION_AND_VERIFICATION_ONLY\": Notification and privacy verification only 
type LcsServiceAuth struct {
}

// AssertLcsServiceAuthRequired checks if the required fields are not zero-ed
func AssertLcsServiceAuthRequired(obj LcsServiceAuth) error {
	return nil
}

// AssertRecurseLcsServiceAuthRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of LcsServiceAuth (e.g. [][]LcsServiceAuth), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseLcsServiceAuthRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aLcsServiceAuth, ok := obj.(LcsServiceAuth)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertLcsServiceAuthRequired(aLcsServiceAuth)
	})
}
