/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type UeContextCreateData struct {

	UeContext UeContext `json:"ueContext"`

	TargetId NgRanTargetId `json:"targetId"`

	SourceToTargetData N2InfoContent `json:"sourceToTargetData"`

	PduSessionList []N2SmInformation `json:"pduSessionList"`

	N2NotifyUri string `json:"n2NotifyUri,omitempty"`

	UeRadioCapability N2InfoContent `json:"ueRadioCapability,omitempty"`

	NgapCause NgApCause `json:"ngapCause,omitempty"`

	SupportedFeatures string `json:"supportedFeatures,omitempty"`

	ServingNetwork PlmnIdNid `json:"servingNetwork,omitempty"`
}

// AssertUeContextCreateDataRequired checks if the required fields are not zero-ed
func AssertUeContextCreateDataRequired(obj UeContextCreateData) error {
	elements := map[string]interface{}{
		"ueContext": obj.UeContext,
		"targetId": obj.TargetId,
		"sourceToTargetData": obj.SourceToTargetData,
		"pduSessionList": obj.PduSessionList,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertUeContextRequired(obj.UeContext); err != nil {
		return err
	}
	if err := AssertNgRanTargetIdRequired(obj.TargetId); err != nil {
		return err
	}
	if err := AssertN2InfoContentRequired(obj.SourceToTargetData); err != nil {
		return err
	}
	for _, el := range obj.PduSessionList {
		if err := AssertN2SmInformationRequired(el); err != nil {
			return err
		}
	}
	if err := AssertN2InfoContentRequired(obj.UeRadioCapability); err != nil {
		return err
	}
	if err := AssertNgApCauseRequired(obj.NgapCause); err != nil {
		return err
	}
	if err := AssertPlmnIdNidRequired(obj.ServingNetwork); err != nil {
		return err
	}
	return nil
}

// AssertRecurseUeContextCreateDataRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of UeContextCreateData (e.g. [][]UeContextCreateData), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseUeContextCreateDataRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUeContextCreateData, ok := obj.(UeContextCreateData)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertUeContextCreateDataRequired(aUeContextCreateData)
	})
}
