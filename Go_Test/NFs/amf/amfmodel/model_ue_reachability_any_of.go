/*
 * Namf_EventExposure
 *
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel

import (
"amf.com/amfcommon"
)

type UeReachabilityAnyOf string

// List of UeReachabilityAnyOf
const (
	UEREACHABILITYANYOF_UNREACHABLE UeReachabilityAnyOf = "UNREACHABLE"
	UEREACHABILITYANYOF_REACHABLE UeReachabilityAnyOf = "REACHABLE"
	UEREACHABILITYANYOF_REGULATORY_ONLY UeReachabilityAnyOf = "REGULATORY_ONLY"
)

// AssertUeReachabilityAnyOfRequired checks if the required fields are not zero-ed
func AssertUeReachabilityAnyOfRequired(obj UeReachabilityAnyOf) error {
	return nil
}

// AssertRecurseUeReachabilityAnyOfRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of UeReachabilityAnyOf (e.g. [][]UeReachabilityAnyOf), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseUeReachabilityAnyOfRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUeReachabilityAnyOf, ok := obj.(UeReachabilityAnyOf)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertUeReachabilityAnyOfRequired(aUeReachabilityAnyOf)
	})
}
