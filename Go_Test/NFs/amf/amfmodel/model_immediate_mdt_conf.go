/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type ImmediateMdtConf struct {

	JobType JobType `json:"jobType"`

	MeasurementLteList []MeasurementLteForMdt `json:"measurementLteList,omitempty"`

	MeasurementNrList []MeasurementNrForMdt `json:"measurementNrList,omitempty"`

	ReportingTriggerList []ReportingTrigger `json:"reportingTriggerList,omitempty"`

	ReportInterval ReportIntervalMdt `json:"reportInterval,omitempty"`

	ReportIntervalNr ReportIntervalNrMdt `json:"reportIntervalNr,omitempty"`

	ReportAmount ReportAmountMdt `json:"reportAmount,omitempty"`

	EventThresholdRsrp int32 `json:"eventThresholdRsrp,omitempty"`

	EventThresholdRsrq int32 `json:"eventThresholdRsrq,omitempty"`

	EventThresholdRsrpNr int32 `json:"eventThresholdRsrpNr,omitempty"`

	EventThresholdRsrqNr int32 `json:"eventThresholdRsrqNr,omitempty"`

	CollectionPeriodRmmLte CollectionPeriodRmmLteMdt `json:"collectionPeriodRmmLte,omitempty"`

	CollectionPeriodRmmNr CollectionPeriodRmmNrMdt `json:"collectionPeriodRmmNr,omitempty"`

	MeasurementPeriodLte MeasurementPeriodLteMdt `json:"measurementPeriodLte,omitempty"`

	AreaScope AreaScope `json:"areaScope,omitempty"`

	PositioningMethod PositioningMethodMdt `json:"positioningMethod,omitempty"`

	AddPositioningMethodList []PositioningMethodMdt `json:"addPositioningMethodList,omitempty"`

	MdtAllowedPlmnIdList []PlmnId `json:"mdtAllowedPlmnIdList,omitempty"`

	SensorMeasurementList []SensorMeasurement `json:"sensorMeasurementList,omitempty"`
}

// AssertImmediateMdtConfRequired checks if the required fields are not zero-ed
func AssertImmediateMdtConfRequired(obj ImmediateMdtConf) error {
	elements := map[string]interface{}{
		"jobType": obj.JobType,
	}
	for name, el := range elements {
		if isZero := amfcommon.IsZeroValue(el); isZero {
			return &amfcommon.RequiredError{Field: name}
		}
	}

	if err := AssertJobTypeRequired(obj.JobType); err != nil {
		return err
	}
	for _, el := range obj.MeasurementLteList {
		if err := AssertMeasurementLteForMdtRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MeasurementNrList {
		if err := AssertMeasurementNrForMdtRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ReportingTriggerList {
		if err := AssertReportingTriggerRequired(el); err != nil {
			return err
		}
	}
	if err := AssertReportIntervalMdtRequired(obj.ReportInterval); err != nil {
		return err
	}
	if err := AssertReportIntervalNrMdtRequired(obj.ReportIntervalNr); err != nil {
		return err
	}
	if err := AssertReportAmountMdtRequired(obj.ReportAmount); err != nil {
		return err
	}
	if err := AssertCollectionPeriodRmmLteMdtRequired(obj.CollectionPeriodRmmLte); err != nil {
		return err
	}
	if err := AssertCollectionPeriodRmmNrMdtRequired(obj.CollectionPeriodRmmNr); err != nil {
		return err
	}
	if err := AssertMeasurementPeriodLteMdtRequired(obj.MeasurementPeriodLte); err != nil {
		return err
	}
	if err := AssertAreaScopeRequired(obj.AreaScope); err != nil {
		return err
	}
	if err := AssertPositioningMethodMdtRequired(obj.PositioningMethod); err != nil {
		return err
	}
	for _, el := range obj.AddPositioningMethodList {
		if err := AssertPositioningMethodMdtRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MdtAllowedPlmnIdList {
		if err := AssertPlmnIdRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SensorMeasurementList {
		if err := AssertSensorMeasurementRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseImmediateMdtConfRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ImmediateMdtConf (e.g. [][]ImmediateMdtConf), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseImmediateMdtConfRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aImmediateMdtConf, ok := obj.(ImmediateMdtConf)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertImmediateMdtConfRequired(aImmediateMdtConf)
	})
}
