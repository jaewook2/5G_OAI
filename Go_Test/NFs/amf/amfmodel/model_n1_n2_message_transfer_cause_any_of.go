/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmodel
import (
"amf.com/amfcommon"
)

type N1N2MessageTransferCauseAnyOf string

// List of N1N2MessageTransferCauseAnyOf
const (
	N1N2MESSAGETRANSFERCAUSEANYOF_ATTEMPTING_TO_REACH_UE N1N2MessageTransferCauseAnyOf = "ATTEMPTING_TO_REACH_UE"
	N1N2MESSAGETRANSFERCAUSEANYOF_N1_N2_TRANSFER_INITIATED N1N2MessageTransferCauseAnyOf = "N1_N2_TRANSFER_INITIATED"
	N1N2MESSAGETRANSFERCAUSEANYOF_WAITING_FOR_ASYNCHRONOUS_TRANSFER N1N2MessageTransferCauseAnyOf = "WAITING_FOR_ASYNCHRONOUS_TRANSFER"
	N1N2MESSAGETRANSFERCAUSEANYOF_UE_NOT_RESPONDING N1N2MessageTransferCauseAnyOf = "UE_NOT_RESPONDING"
	N1N2MESSAGETRANSFERCAUSEANYOF_N1_MSG_NOT_TRANSFERRED N1N2MessageTransferCauseAnyOf = "N1_MSG_NOT_TRANSFERRED"
	N1N2MESSAGETRANSFERCAUSEANYOF_UE_NOT_REACHABLE_FOR_SESSION N1N2MessageTransferCauseAnyOf = "UE_NOT_REACHABLE_FOR_SESSION"
	N1N2MESSAGETRANSFERCAUSEANYOF_TEMPORARY_REJECT_REGISTRATION_ONGOING N1N2MessageTransferCauseAnyOf = "TEMPORARY_REJECT_REGISTRATION_ONGOING"
	N1N2MESSAGETRANSFERCAUSEANYOF_TEMPORARY_REJECT_HANDOVER_ONGOING N1N2MessageTransferCauseAnyOf = "TEMPORARY_REJECT_HANDOVER_ONGOING"
)

// AssertN1N2MessageTransferCauseAnyOfRequired checks if the required fields are not zero-ed
func AssertN1N2MessageTransferCauseAnyOfRequired(obj N1N2MessageTransferCauseAnyOf) error {
	return nil
}

// AssertRecurseN1N2MessageTransferCauseAnyOfRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of N1N2MessageTransferCauseAnyOf (e.g. [][]N1N2MessageTransferCauseAnyOf), otherwise amfcommon.ErrTypeAssertionError is thrown.
func AssertRecurseN1N2MessageTransferCauseAnyOfRequired(objSlice interface{}) error {
	return amfcommon.AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aN1N2MessageTransferCauseAnyOf, ok := obj.(N1N2MessageTransferCauseAnyOf)
		if !ok {
			return amfcommon.ErrTypeAssertionError
		}
		return AssertN1N2MessageTransferCauseAnyOfRequired(aN1N2MessageTransferCauseAnyOf)
	})
}
