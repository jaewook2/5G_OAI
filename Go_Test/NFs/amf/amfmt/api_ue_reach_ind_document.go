/*
 * Namf_MT
 *
 * AMF Mobile Terminated Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amfmt

import (
	"encoding/json"
	"net/http"
	"strings"

	"amf.com/amfcommon"
	"amf.com/amfmodel"

	"github.com/gorilla/mux"
)

// UeReachIndDocumentApiController binds http requests to an api service and writes the service results to the http response
type UeReachIndDocumentApiController struct {
	service      UeReachIndDocumentApiServicer
	errorHandler amfcommon.ErrorHandler
}

// UeReachIndDocumentApiOption for how the controller is set up.
type UeReachIndDocumentApiOption func(*UeReachIndDocumentApiController)

// WithUeReachIndDocumentApiErrorHandler inject amfcommon.ErrorHandler into controller
func WithUeReachIndDocumentApiErrorHandler(h amfcommon.ErrorHandler) UeReachIndDocumentApiOption {
	return func(c *UeReachIndDocumentApiController) {
		c.errorHandler = h
	}
}

// NewUeReachIndDocumentApiController creates a default api controller
func NewUeReachIndDocumentApiController(s UeReachIndDocumentApiServicer, opts ...UeReachIndDocumentApiOption) amfcommon.Router {
	controller := &UeReachIndDocumentApiController{
		service:      s,
		errorHandler: amfcommon.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the UeReachIndDocumentApiController
func (c *UeReachIndDocumentApiController) Routes() amfcommon.Routes {
	return amfcommon.Routes{
		{
			"EnableUeReachability",
			strings.ToUpper("Put"),
			"/namf-mt/v1/ue-contexts/{ueContextId}/ue-reachind",
			c.EnableUeReachability,
		},
	}
}

// EnableUeReachability - Namf_MT EnableUEReachability service Operation
func (c *UeReachIndDocumentApiController) EnableUeReachability(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	ueContextIdParam := params["ueContextId"]

	enableUeReachabilityReqDataParam := amfmodel.EnableUeReachabilityReqData{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&enableUeReachabilityReqDataParam); err != nil {
		c.errorHandler(w, r, &amfcommon.ParsingError{Err: err}, nil)
		return
	}
	if err := amfmodel.AssertEnableUeReachabilityReqDataRequired(enableUeReachabilityReqDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EnableUeReachability(r.Context(), ueContextIdParam, enableUeReachabilityReqDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	amfcommon.EncodeJSONResponse(result.Body, &result.Code, w)

}
